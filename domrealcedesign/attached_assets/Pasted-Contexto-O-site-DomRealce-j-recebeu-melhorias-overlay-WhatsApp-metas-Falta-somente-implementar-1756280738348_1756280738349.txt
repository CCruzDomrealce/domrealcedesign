Contexto
O site DomRealce já recebeu melhorias (overlay, WhatsApp, metas). Falta somente implementar um carrossel de 3 imagens no hero da homepage.
Tecnologia: HTML + CSS + JS puros (sem jQuery). Não reescrever a estrutura; apenas acrescentar.

Regras importantes

Não remover CSS/JS/HTML existentes.

Criar/usar estes ficheiros (se ainda não existirem):

/assets/css/domrealce-enhancements.css (acrescentar estilos do slider)

/assets/js/domrealce-enhancements.js (acrescentar script do slider)

Comentar inserções com /* DOMREALCE: ... */ e <!-- DOMREALCE: ... -->.

Acessibilidade: botões com aria-label, setas navegáveis por teclado, indicadores (bolinhas) com aria-selected.

Performance: primeira imagem preload; 2ª e 3ª com lazy (carregam ao ativar).

Responsividade: preencher o hero em qualquer viewport.

Sem jQuery e < 5KB de CSS/JS adicionais.

O que fazer
1) HTML (inserção não-destrutiva)

Dentro da secção do hero existente (não apague conteúdo atual), inserir logo após a abertura do container do hero:

<!-- DOMREALCE: HERO SLIDER (background layer) -->
<div class="dr-hero-slider" aria-label="Galeria de destaque" aria-live="polite">
  <img class="dr-slide is-active"
       src="/img/hero-1.webp"
       alt=""
       width="1920" height="1080"
       fetchpriority="high" />
  <img class="dr-slide"
       data-src="/img/hero-2.webp"
       alt=""
       width="1920" height="1080" />
  <img class="dr-slide"
       data-src="/img/hero-3.webp"
       alt=""
       width="1920" height="1080" />
</div>

<!-- DOMREALCE: HERO CONTROLS -->
<div class="dr-hero-controls" role="group" aria-label="Controlo do carrossel">
  <button class="dr-prev" type="button" aria-label="Imagem anterior">‹</button>
  <div class="dr-dots" role="tablist" aria-label="Selecionar imagem">
    <button class="dr-dot is-active" role="tab" aria-selected="true" aria-label="Imagem 1"></button>
    <button class="dr-dot" role="tab" aria-selected="false" aria-label="Imagem 2"></button>
    <button class="dr-dot" role="tab" aria-selected="false" aria-label="Imagem 3"></button>
  </div>
  <button class="dr-next" type="button" aria-label="Próxima imagem">›</button>
</div>


Observação: as imagens ficam por trás do conteúdo do hero (título/CTAs). Não mexer no texto/CTAs existentes.

2) <head> – preload da 1ª imagem

Adicionar no <head>:

<!-- DOMREALCE: preload primeira imagem do hero -->
<link rel="preload" as="image" href="/img/hero-1.webp">

3) CSS (append em /assets/css/domrealce-enhancements.css)
/* DOMREALCE: HERO SLIDER */
.dr-hero-slider{
  position:absolute; inset:0; z-index:0; overflow:hidden;
}
.dr-hero-slider .dr-slide{
  position:absolute; inset:0;
  width:100%; height:100%; object-fit:cover;
  opacity:0; transition:opacity .6s ease;
  will-change: opacity;
}
.dr-hero-slider .dr-slide.is-active{ opacity:1; }

.dr-hero-controls{
  position:absolute; left:0; right:0; bottom:18px;
  display:flex; align-items:center; justify-content:center; gap:12px;
  z-index:2; pointer-events:auto;
}
.dr-prev,.dr-next{
  background:rgba(0,0,0,.45); color:#fff; border:0; width:36px; height:36px;
  border-radius:50%; cursor:pointer; font-size:20px; line-height:36px;
}
.dr-prev:hover,.dr-next:hover{ background:rgba(0,0,0,.6); }

.dr-dots{ display:flex; gap:8px; }
.dr-dot{
  width:10px; height:10px; border-radius:50%; border:0; cursor:pointer;
  background:rgba(255,255,255,.45);
}
.dr-dot.is-active, .dr-dot[aria-selected="true"]{ background:#f8d100; }

/* garante que o conteúdo do hero fica acima */
.hero, .hero * { position:relative; z-index:1; }


Se o seu container do hero não for .hero, não tem problema: o slider é absoluto e ficará por trás de qualquer conteúdo do bloco.

4) JS (append em /assets/js/domrealce-enhancements.js)
/* DOMREALCE: HERO SLIDER VANILLA */
(function(){
  const slider = document.querySelector('.dr-hero-slider');
  if(!slider) return;

  const slides = Array.from(slider.querySelectorAll('.dr-slide'));
  const prevBtn = document.querySelector('.dr-prev');
  const nextBtn = document.querySelector('.dr-next');
  const dotsWrap = document.querySelector('.dr-dots');
  const dots = dotsWrap ? Array.from(dotsWrap.querySelectorAll('.dr-dot')) : [];
  let index = 0, timer = null, AUTOPLAY_MS = 5500;

  // lazy para data-src
  function ensureLoaded(i){
    const img = slides[i];
    if(img && img.dataset && img.dataset.src){
      img.src = img.dataset.src;
      img.removeAttribute('data-src');
      img.setAttribute('loading','lazy');
      img.decoding = 'async';
    }
  }

  function go(to){
    const max = slides.length - 1;
    index = (to + slides.length) % slides.length;

    slides.forEach((s,i)=>s.classList.toggle('is-active', i===index));
    if(dots.length){
      dots.forEach((d,i)=>{
        const active = i===index;
        d.classList.toggle('is-active', active);
        d.setAttribute('aria-selected', String(active));
      });
    }
    // pré-carregar próximo slide
    ensureLoaded((index+1) % slides.length);
  }

  function next(){ go(index+1); restart(); }
  function prev(){ go(index-1); restart(); }

  function restart(){
    if(timer) clearInterval(timer);
    timer = setInterval(next, AUTOPLAY_MS);
  }

  // Controles
  if(nextBtn) nextBtn.addEventListener('click', next);
  if(prevBtn) prevBtn.addEventListener('click', prev);
  dots.forEach((d,i)=> d.addEventListener('click', ()=>{ go(i); restart(); }));

  // Teclado
  document.addEventListener('keydown', (e)=>{
    if(e.key === 'ArrowRight') next();
    if(e.key === 'ArrowLeft') prev();
  });

  // Inicialização
  ensureLoaded(0);
  ensureLoaded(1);
  go(0);
  restart();
})();

Critérios de aceitação (para o Agent validar)

O hero exibe 3 imagens em fade por trás do conteúdo, trocando automaticamente (≈5,5s) e com controles (setas + bolinhas).

Sem jQuery e sem quebrar layout/CTAs existentes.

1ª imagem tem preload; 2ª/3ª carregam lazy quando forem usadas.

Navegação por teclado (setas esquerda/direita) funciona.

Sem erros no console e sem regressões visuais em mobile/desktop.