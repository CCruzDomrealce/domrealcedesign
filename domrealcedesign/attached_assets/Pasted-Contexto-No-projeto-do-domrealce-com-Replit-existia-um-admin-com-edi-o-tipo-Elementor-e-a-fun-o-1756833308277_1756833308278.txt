Contexto:
No projeto do domrealce.com (Replit) existia um admin com edição tipo Elementor e a função “detetar imagens” no portfólio. Após alterações, várias áreas editáveis deixaram de funcionar e o botão desapareceu. Quero restaurar e melhorar o editor em todas as páginas que contêm fotos, sem alterar o front público.

Objetivo

Auditar todo o admin (páginas, blocos, mídia) e corrigir o que não funciona.

Implementar/estabilizar um editor visual (WYSIWYG) para todas as páginas que permita editar/trocar imagens, textos, tamanhos, cores, fundos, reordenar/duplicar blocos e criar novos conteúdos/páginas.

Criar um Detetor Global de Imagens (além do portfólio) que varra o Object Storage e associe imagens às páginas com base em pastas/rotas, com prevenção de duplicados.

Entregar branch + PR, backup/rollback e docs curtas.

Regras e salvaguardas (obrigatório)

Sem breaking changes no site público (HTML/CSS/JS/rotas existentes).

Trabalhar numa branch: fix-editor-global-images-safe.

Backup completo (código + chaves de App/Object Storage relevantes) em /backups/<timestamp>.zip + script npm run rollback:<timestamp>.

Editor/admin só em rotas /admin/** (feature flag).

Qualquer migração de dados deve ser idempotente e reversível.

Tarefas
1) Auditoria do Admin

Mapear rotas/admin existentes: /admin, /admin/editor, /admin/portfolio, /admin/midia, etc.

Listar regressões (onde não edita texto/imagem/cor/tamanho/fundo, onde não cria/ordena blocos, onde não cria novas páginas).

Uniformizar a persistência via App Storage em JSON (um por página/rota):

content:/pages/<rota>.json (ex.: content:/pages/index.json, content:/pages/servicos/impressoes.json)

content:/media-index.json (índice global de imagens)

content:/portfolio.json (metadados do portfólio, se já existir manter)

2) Editor Visual (todas as páginas com fotos)

UI em /admin/editor com seletor de página (lista de rotas) e preview.

Blocos suportados: título, parágrafo, imagem, galeria, banner/hero, grid cards, botão/CTA, separador, secção.

Edição por bloco: texto, tipografia (tamanho/peso/linha), cores (texto/links/botões), fundos (cor/imagem/overlay), margens/padding, alinhamento, largura.

Imagens: trocar por upload (Object Storage) ou seleção do Gestor de Mídia; editar alt, legenda, link, focal point; opção de crop simples (client-side canvas).

Drag & drop para reordenar; duplicar e remover blocos.

Templates: salvar layout como modelo e aplicar a novas páginas.

Draft → Preview → Publish com histórico de versões por página e undo/redo.

Hidratação não-invasiva: renderizar blocos no front em “slots/containers” sem tocar no HTML/CSS global.

3) Gestor de Mídia (global)

/admin/midia: upload múltiplo, renomear, mover, apagar (confirmação), gerar thumbnail, mostrar tamanho/dimensões, copiar URL público.

Padrão de pastas para mapear páginas automaticamente:

public/pages/<rota-sanitizada>/... (ex.: public/pages/index/hero.jpg, public/pages/servicos/impressoes/galeria/img1.jpg)

Portfólio permanece em public/portfolio/<Categoria>/<ficheiro>

Outras imagens livres: public/media/...

4) Detetor Global de Imagens (todas as páginas + portfólio)

Reintroduzir o botão “Detetar novas imagens” no portfólio e criar o botão “Sincronizar imagens do site” em /admin/midia ou /admin/editor.

Função: varrer o Object Storage nos prefixos:

public/pages/** → associar imagens às páginas pela rota (converter caminho em rota)

public/portfolio/** → manter lógica por categoria (nome da subpasta)

Preencher/atualizar:

content:/media-index.json com { key, pageRoute, src, alt, hash, size, tags }

content:/pages/<rota>.json → se a página tiver blocos de galeria “auto”, agregar as novas imagens respetivas

content:/portfolio.json (se aplicável)

Sem duplicados: comparar por hash (MD5 da key).

Gerar alt legível a partir do nome do ficheiro; permitir edição manual depois.

UI mostra contagem de novos itens, atualizados, ignorados e erros.

5) Tema/Design Tokens

Painel /admin/editor/tema com cores (primária/secundária/texto/fundo/acento) e tipografia (font-family do site e tamanhos base).

Persistir em content:/design-tokens.json.

O editor usa tokens; não sobrescrever o CSS global do site.

6) Segurança e performance

Proteger /admin/** (se já existir auth, manter; senão implementar JWT com .env: ADMIN_EMAIL, ADMIN_PASSWORD, JWT_SECRET).

Rate-limit em endpoints de escrita, validar schema (Zod ou similar).

Logs em /logs/admin-editor.log (login, publicar, upload, sincronizar).

Carregamento lazy do editor/admin (não impactar o público).

7) Variáveis .env (confirmar / documentar)
OBJECT_STORAGE_ENDPOINT=
OBJECT_STORAGE_BUCKET=
OBJECT_STORAGE_ACCESS_KEY=
OBJECT_STORAGE_SECRET_KEY=
OBJECT_STORAGE_PUBLIC_URL_BASE=  # ex.: https://<bucket>.<endpoint>
ADMIN_EMAIL=
ADMIN_PASSWORD=
JWT_SECRET=

8) Entregáveis

PR a partir da branch fix-editor-global-images-safe com:

Editor visual funcional em todas as páginas com fotos.

Gestor de mídia global.

Detetor Global de Imagens + restauração do botão no portfólio.

Scripts: npm run backup, npm run rollback:<timestamp>, npm run build-admin.

Docs docs/admin-editor.md (como editar, publicar, restaurar, sincronizar imagens; estrutura dos JSONs; variáveis .env).

Lista de ficheiros alterados e porque.

9) Critérios de aceite

Em /admin/editor consigo abrir qualquer página, trocar imagens, editar texto/cores/tamanhos/fundos, salvar draft, pré-visualizar e publicar.

Consigo criar nova página por template e organizá-la.

O botão “Sincronizar imagens do site” indexa public/pages/** e atualiza content:/media-index.json e as páginas “auto”; o botão “Detetar novas imagens” atualiza o portfólio sem duplicar.

O site público permanece idêntico (sem regressões).

Existem backup/rollback e documentação.

Se algo não puder ser feito sem risco, documentar e propor alternativa no PR.