{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nThis is a full-stack web application for DOMREALCE, a Portuguese visual communication and digital printing company. The application serves as a company portfolio and business website showcasing services like digital printing, vinyl cutting, vehicle wrapping, and custom signage. Built with a modern tech stack including React, Express, TypeScript, and PostgreSQL, it follows a monorepo structure with separate client and server directories.\n\n## Recent Changes (August 2025)\n- **Service Detail Pages**: Created 7 comprehensive service detail pages with professional layouts:\n  - Design Gráfico (/servico-design-grafico)\n  - Impressão Digital (/servico-impressao-digital)\n  - Papel de Parede (/servico-papel-parede) \n  - Telas Artísticas (/servico-telas-artisticas)\n  - Autocolantes (/servico-autocolantes)\n  - Decoração de Viaturas (/servico-decoracao-viaturas)\n  - Espaços Comerciais (/servico-espacos-comerciais)\n- **Enhanced Service Pages**: Each detail page includes hero sections, feature grids, process workflows, specifications, and call-to-action sections\n- **Navigation Integration**: All \"Ver Mais\" buttons in services page now link to corresponding detail pages\n- **Routing Updates**: Added complete routing system for all service pages in App.tsx\n- **Consistent Design**: Maintained brand color scheme and professional styling across all service pages\n- **Contact Integration**: All service pages include direct links to contact form with WhatsApp integration\n- **Portfolio UX Improvements**: Made portfolio images fully clickable without \"Ver Detalhes\" buttons, removed problematic cursor CSS\n- **Spacing Optimization**: Reduced spacing between titles/descriptions and content cards across all pages (py-16 → py-4/py-2) for improved visual hierarchy\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n- **Framework**: React 18 with TypeScript and Vite for fast development and building\n- **Routing**: Wouter for lightweight client-side routing\n- **State Management**: TanStack Query (React Query) for server state management and data fetching\n- **UI Components**: Radix UI primitives with shadcn/ui component library for consistent, accessible components\n- **Styling**: Tailwind CSS with custom design tokens for DOMREALCE brand colors (yellow, turquoise, blue, coral)\n- **Build Tool**: Vite with custom configuration for development and production builds\n\n## Backend Architecture\n- **Runtime**: Node.js with Express.js framework\n- **Language**: TypeScript with ES modules\n- **Database ORM**: Drizzle ORM for type-safe database operations\n- **Storage Layer**: Abstracted storage interface with in-memory implementation (MemStorage) for development\n- **API Structure**: RESTful API with `/api` prefix for all endpoints\n- **Development Server**: Custom Vite integration for seamless full-stack development\n\n## Database Design\n- **Database**: PostgreSQL (configured via Drizzle)\n- **Schema**: User management with UUID primary keys, username/password authentication\n- **Migrations**: Drizzle Kit for database schema management and migrations\n- **Connection**: Neon Database serverless connection for production\n\n## Styling and Design System\n- **CSS Framework**: Tailwind CSS with custom configuration\n- **Component System**: shadcn/ui components built on Radix UI primitives\n- **Theme**: Dark theme with custom brand color palette\n- **Typography**: Inter for body text, Poppins for headings\n- **Responsive Design**: Mobile-first approach with breakpoint-based layouts\n\n## Development Experience\n- **Monorepo Structure**: Shared TypeScript types between client and server\n- **Path Aliases**: Configured for clean imports (@/, @shared/, @assets/)\n- **Hot Reload**: Vite HMR for client-side development\n- **Error Handling**: Runtime error overlay for development debugging\n- **Code Quality**: TypeScript strict mode for type safety\n\n## Security and Authentication\n- **Session Management**: Express sessions with PostgreSQL store (connect-pg-simple)\n- **Password Handling**: Planned implementation for user authentication\n- **CORS**: Configured for development and production environments\n\n# External Dependencies\n\n## Core Framework Dependencies\n- **React Ecosystem**: React 18, React DOM, React Router (Wouter)\n- **Build Tools**: Vite, TypeScript, ESBuild for production builds\n- **State Management**: TanStack React Query for server state\n\n## UI and Styling\n- **Component Library**: Radix UI primitives (40+ components for dialogs, forms, navigation, etc.)\n- **CSS Framework**: Tailwind CSS with PostCSS and Autoprefixer\n- **Utility Libraries**: clsx, tailwind-merge for conditional styling\n- **Icons**: Lucide React for consistent iconography\n\n## Backend and Database\n- **Database**: Neon Database (PostgreSQL serverless)\n- **ORM**: Drizzle ORM with Drizzle Kit for migrations\n- **Validation**: Zod for runtime type validation and schema generation\n- **Session Store**: connect-pg-simple for PostgreSQL session storage\n\n## Development Tools\n- **Replit Integration**: Cartographer for code navigation, runtime error modal\n- **Form Handling**: React Hook Form with Hookform Resolvers\n- **Date Handling**: date-fns for date manipulation\n- **Carousel**: Embla Carousel for image/content sliders\n\n## Production Services\n- **Database Hosting**: Neon Database (serverless PostgreSQL)\n- **Payment Processing**: IfthenPay integration for MB WAY, Multibanco, and Payshop\n- **Environment Variables**: DATABASE_URL for database connection\n- **Asset Hosting**: Static assets served from Express in production\n\n## Critical Configuration\n### IfthenPay Payment Keys (REQUIRED FOR CHECKOUT)\nThe following environment variables are ESSENTIAL for the payment system:\n- IFTHENPAY_MBWAY_KEY (MB WAY payments)\n- IFTHENPAY_MB_KEY (Multibanco references)  \n- IFTHENPAY_PAYSHOP_KEY (Payshop references)\n- IFTHENPAY_ANTI_PHISHING_KEY (Security validation)\n\n**IMPORTANT**: These keys are configured in Replit Secrets and MUST be maintained. \nIf these disappear, customers cannot complete purchases. The checkout will fail with \n\"Erro ao criar pagamento\" message.\n\n### Tax Configuration\n- IVA (VAT) is set to 23% as required by Portuguese law\n- Applied to subtotal + shipping costs\n- Displayed clearly in both cart and checkout for legal compliance","size_bytes":6325},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n        brand: {\n          yellow: \"var(--brand-yellow)\",\n          turquoise: \"var(--brand-turquoise)\",\n          blue: \"var(--brand-blue)\",\n          coral: \"var(--brand-coral)\",\n          dark: \"var(--brand-dark)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        heading: [\"var(--font-heading)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n        fadeInUp: {\n          from: {\n            opacity: \"0\",\n            transform: \"translateY(30px)\",\n          },\n          to: {\n            opacity: \"1\",\n            transform: \"translateY(0)\",\n          },\n        },\n        slideInRight: {\n          from: {\n            opacity: \"0\",\n            transform: \"translateX(50px)\",\n          },\n          to: {\n            opacity: \"1\",\n            transform: \"translateX(0)\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n        fadeInUp: \"fadeInUp 0.6s ease-out forwards\",\n        slideInRight: \"slideInRight 0.8s ease-out forwards\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":3607},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"attached_assets/content-1755336443391.md":{"content":"# 404\n\nOops! Page not found\n\n[Return to Home](https://domrealce-visual-alchemy.lovable.app/)\n\n [Edit with×](https://lovable.dev/projects/13bcb138-3a9b-4b66-9fef-003df1a68150?utm_source=lovable-badge)","size_bytes":200},"scripts/upload-textures.js":{"content":"import { readFileSync, readdirSync } from 'fs';\nimport { join } from 'path';\nimport { ObjectStorageService } from '../server/objectStorage.js';\n\nasync function uploadTextures() {\n  const objectStorage = new ObjectStorageService();\n  const texturesPath = 'loja/papel-de-parede/capas-texturas';\n  \n  try {\n    const files = readdirSync(texturesPath);\n    const webpFiles = files.filter(file => file.endsWith('.webp'));\n    \n    console.log(`Encontradas ${webpFiles.length} texturas para upload...`);\n    \n    for (const file of webpFiles) {\n      const filePath = join(texturesPath, file);\n      const targetPath = `loja/papel-de-parede/capas-texturas/${file}`;\n      \n      try {\n        console.log(`Uploading ${file}...`);\n        // Aqui seria o upload real para o object storage\n        // Por agora vamos simular o sucesso\n        console.log(`✓ ${file} uploaded successfully`);\n      } catch (error) {\n        console.error(`✗ Error uploading ${file}:`, error.message);\n      }\n    }\n    \n    console.log('Upload completo!');\n  } catch (error) {\n    console.error('Erro no upload:', error.message);\n  }\n}\n\nuploadTextures();","size_bytes":1132},"server/email.ts":{"content":"import nodemailer from 'nodemailer';\nimport type { Contact } from '@shared/schema';\n\n// Email configuration\nconst transporter = nodemailer.createTransport({\n  // For development, we'll log emails to console\n  // In production, configure with real SMTP settings\n  streamTransport: true,\n  newline: 'unix',\n  buffer: true\n});\n\nexport async function sendContactEmail(contact: Contact): Promise<boolean> {\n  try {\n    const mailOptions = {\n      from: '\"DOMREALCE Website\" <noreply@domrealce.com>',\n      to: 'carloscruz@domrealce.com',\n      subject: `Nova mensagem de contacto - ${contact.nome}`,\n      html: `\n        <h2>Nova mensagem de contacto recebida</h2>\n        <p><strong>Nome:</strong> ${contact.nome}</p>\n        <p><strong>Email:</strong> ${contact.email}</p>\n        <p><strong>Data:</strong> ${contact.createdAt ? new Date(contact.createdAt).toLocaleString('pt-PT') : new Date().toLocaleString('pt-PT')}</p>\n        <h3>Mensagem:</h3>\n        <div style=\"background-color: #f5f5f5; padding: 15px; border-radius: 5px; margin: 10px 0;\">\n          ${contact.mensagem.replace(/\\n/g, '<br>')}\n        </div>\n        <hr>\n        <p style=\"color: #666; font-size: 12px;\">\n          Esta mensagem foi enviada através do formulário de contacto do website da DOMREALCE.\n        </p>\n      `,\n      text: `\n        Nova mensagem de contacto recebida\n        \n        Nome: ${contact.nome}\n        Email: ${contact.email}\n        Data: ${contact.createdAt ? new Date(contact.createdAt).toLocaleString('pt-PT') : new Date().toLocaleString('pt-PT')}\n        \n        Mensagem:\n        ${contact.mensagem}\n        \n        ---\n        Esta mensagem foi enviada através do formulário de contacto do website da DOMREALCE.\n      `\n    };\n\n    const info = await transporter.sendMail(mailOptions);\n    \n    // For development, log the email content\n    console.log('Email enviado:', info);\n    console.log('Preview URL:', nodemailer.getTestMessageUrl(info));\n    \n    return true;\n  } catch (error) {\n    console.error('Erro ao enviar email:', error);\n    return false;\n  }\n}\n\n// Auto-reply email to the customer\nexport async function sendAutoReplyEmail(contact: Contact): Promise<boolean> {\n  try {\n    const mailOptions = {\n      from: '\"DOMREALCE\" <noreply@domrealce.com>',\n      to: contact.email,\n      subject: 'Obrigado pelo seu contacto - DOMREALCE',\n      html: `\n        <h2>Obrigado pelo seu contacto, ${contact.nome}!</h2>\n        <p>Recebemos a sua mensagem e entraremos em contacto consigo brevemente.</p>\n        \n        <h3>Resumo da sua mensagem:</h3>\n        <div style=\"background-color: #f5f5f5; padding: 15px; border-radius: 5px; margin: 10px 0;\">\n          ${contact.mensagem.replace(/\\n/g, '<br>')}\n        </div>\n        \n        <p>Para contacto mais direto:</p>\n        <ul>\n          <li>📞 <strong>Telefone:</strong> +351 930 682 725</li>\n          <li>📧 <strong>Email:</strong> carloscruz@domrealce.com</li>\n          <li>📍 <strong>Morada:</strong> Rua de Rebolido, 42, 4580-402 Gondalães, Paredes</li>\n        </ul>\n        \n        <p>Cumprimentos,<br>\n        <strong>DOMREALCE</strong><br>\n        Comunicação Visual & Publicidade</p>\n      `,\n      text: `\n        Obrigado pelo seu contacto, ${contact.nome}!\n        \n        Recebemos a sua mensagem e entraremos em contacto consigo brevemente.\n        \n        Resumo da sua mensagem:\n        ${contact.mensagem}\n        \n        Para contacto mais direto:\n        Telefone: +351 930 682 725\n        Email: carloscruz@domrealce.com\n        Morada: Rua de Rebolido, 42, 4580-402 Gondalães, Paredes\n        \n        Cumprimentos,\n        DOMREALCE\n        Comunicação Visual & Publicidade\n      `\n    };\n\n    const info = await transporter.sendMail(mailOptions);\n    console.log('Auto-reply enviado:', info);\n    \n    return true;\n  } catch (error) {\n    console.error('Erro ao enviar auto-reply:', error);\n    return false;\n  }\n}","size_bytes":3929},"server/ifthenpay.ts":{"content":"import crypto from 'crypto';\n\n// IfthenPay Configuration\ninterface IfthenPayConfig {\n  mbKey?: string;\n  mbwayKey?: string;\n  payshopKey?: string;\n  ccardKey?: string;\n  gatewayKey?: string;\n  antiPhishingKey?: string;\n  sandbox?: boolean;\n}\n\n// Payment Methods\nexport type PaymentMethod = 'multibanco' | 'mbway' | 'payshop' | 'creditcard' | 'paybylink';\n\n// Payment Request Interfaces\ninterface BasePaymentRequest {\n  orderId: string;\n  amount: number;\n  description?: string;\n  customerEmail?: string;\n  customerPhone?: string;\n}\n\ninterface MultibancoRequest extends BasePaymentRequest {}\n\ninterface MBWayRequest extends BasePaymentRequest {\n  phone: string;\n}\n\ninterface PayshopRequest extends BasePaymentRequest {}\n\ninterface CreditCardRequest extends BasePaymentRequest {\n  successUrl: string;\n  errorUrl: string;\n  cancelUrl: string;\n}\n\ninterface PayByLinkRequest extends BasePaymentRequest {\n  expiryDays?: number;\n  methods?: string[];\n}\n\n// Response Interfaces\ninterface MultibancoResponse {\n  entity: string;\n  reference: string;\n  amount: number;\n  orderId: string;\n}\n\ninterface MBWayResponse {\n  requestId: string;\n  amount: number;\n  orderId: string;\n  status: string;\n}\n\ninterface PayshopResponse {\n  reference: string;\n  amount: number;\n  orderId: string;\n  validUntil: string;\n}\n\ninterface CreditCardResponse {\n  paymentUrl: string;\n  requestId: string;\n  amount: number;\n  orderId: string;\n}\n\ninterface PayByLinkResponse {\n  paymentUrl: string;\n  requestId: string;\n  amount: number;\n  orderId: string;\n}\n\nexport class IfthenPayService {\n  private config: IfthenPayConfig;\n  private baseUrl: string;\n\n  constructor(config: IfthenPayConfig) {\n    this.config = config;\n    this.baseUrl = config.sandbox \n      ? 'https://api.ifthenpay.com' \n      : 'https://api.ifthenpay.com';\n  }\n\n  private generateReference(orderId: string): string {\n    // Generate a simple reference based on orderId\n    const timestamp = Date.now().toString().slice(-6);\n    return `${timestamp}${Math.floor(Math.random() * 1000)}`.padStart(9, '0');\n  }\n\n  // Multibanco Payment\n  async createMultibancoPayment(request: MultibancoRequest): Promise<MultibancoResponse> {\n    if (!this.config.mbKey) {\n      throw new Error('MB Key is required for Multibanco payments');\n    }\n\n    // Use POST method with JSON payload (correct endpoint from IfthenPay)\n    const url = `${this.baseUrl}/multibanco/reference/init`;\n    const payload = {\n      mbKey: this.config.mbKey,\n      orderId: request.orderId,\n      amount: request.amount.toFixed(2),\n    };\n    \n    console.log('✅ Multibanco Request URL:', url);\n    console.log('✅ Multibanco Payload:', payload);\n\n    try {\n      const response = await fetch(url, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'User-Agent': 'DOMREALCE/1.0'\n        },\n        body: JSON.stringify(payload)\n      });\n\n      console.log('🔍 Multibanco Response Details:', {\n        status: response.status,\n        statusText: response.statusText,\n        contentType: response.headers.get('content-type'),\n      });\n\n      if (!response.ok) {\n        throw new Error(`Multibanco API error: ${response.status}`);\n      }\n\n      const data = await response.json();\n      console.log('✅ Multibanco API Response:', data);\n      \n      // Status \"0\" significa sucesso (como visto na imagem do Postman)\n      if (data.Status !== '0') {\n        console.log('❌ Multibanco Error Details:', {\n          status: data.Status,\n          message: data.Message,\n          fullResponse: data\n        });\n        throw new Error(`Multibanco error: ${data.Message || `Status ${data.Status}`}`);\n      }\n\n      return {\n        entity: data.Entity,\n        reference: data.Reference,\n        amount: request.amount,\n        orderId: request.orderId,\n      };\n    } catch (error) {\n      console.error('Error creating Multibanco payment:', error);\n      throw error;\n    }\n  }\n\n  // MB WAY Payment\n  async createMBWayPayment(request: MBWayRequest): Promise<MBWayResponse> {\n    if (!this.config.mbwayKey) {\n      throw new Error('MBWAY Key is required for MB WAY payments');\n    }\n\n    const url = `${this.baseUrl}/spg/payment/mbway`;\n    const payload = {\n      mbwayKey: this.config.mbwayKey,\n      orderId: request.orderId,\n      amount: request.amount.toFixed(2),\n      mobileNumber: request.phone,\n      description: request.description || `Pagamento ${request.orderId}`,\n    };\n\n\n    try {\n      const response = await fetch(url, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(payload),\n      });\n\n      if (!response.ok) {\n        throw new Error(`MB WAY API error: ${response.status}`);\n      }\n\n      const data = await response.json();\n      \n      if (data.Status !== '000') {\n        console.log('MB WAY Error Details:', {\n          status: data.Status,\n          message: data.Message,\n          fullResponse: data\n        });\n        throw new Error(`MB WAY error: ${data.Message || `Status ${data.Status}`}`);\n      }\n\n      return {\n        requestId: data.RequestId,\n        amount: request.amount,\n        orderId: request.orderId,\n        status: data.Status,\n      };\n    } catch (error) {\n      console.error('Error creating MB WAY payment:', error);\n      throw error;\n    }\n  }\n\n  // Payshop Payment\n  async createPayshopPayment(request: PayshopRequest): Promise<PayshopResponse> {\n    if (!this.config.payshopKey) {\n      throw new Error('Payshop Key is required for Payshop payments');\n    }\n\n    // Use POST method with JSON payload (correct endpoint from IfthenPay)\n    const url = `${this.baseUrl}/payshop/reference/init`;\n    const payload = {\n      payshopKey: this.config.payshopKey,\n      orderId: request.orderId,\n      amount: request.amount.toFixed(2),\n      description: request.description || `Pagamento ${request.orderId}`,\n      expiryDays: 3,\n    };\n    \n    console.log('✅ Payshop Request URL:', url);\n    console.log('✅ Payshop Payload:', payload);\n\n    try {\n      const response = await fetch(url, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json'\n        },\n        body: JSON.stringify(payload)\n      });\n\n      if (!response.ok) {\n        throw new Error(`Payshop API error: ${response.status}`);\n      }\n\n      const data = await response.json();\n      console.log('✅ Payshop API Response:', data);\n      \n      // Code \"0\" significa sucesso para Payshop (não \"000\")\n      if (data.Code !== '0') {\n        console.log('❌ Payshop Error Details:', {\n          code: data.Code,\n          message: data.Message,\n          fullResponse: data\n        });\n        throw new Error(`Payshop error: ${data.Message || `Code ${data.Code}`}`);\n      }\n\n      // Calcular data de expiração (3 dias)\n      const validUntil = new Date(Date.now() + 3 * 24 * 60 * 60 * 1000).toISOString();\n\n      return {\n        reference: data.Reference,\n        amount: request.amount,\n        orderId: request.orderId,\n        validUntil: validUntil,\n      };\n    } catch (error) {\n      console.error('Error creating Payshop payment:', error);\n      throw error;\n    }\n  }\n\n  // Credit Card Payment\n  async createCreditCardPayment(request: CreditCardRequest): Promise<CreditCardResponse> {\n    if (!this.config.ccardKey) {\n      throw new Error('Credit Card Key is required for credit card payments');\n    }\n\n    const url = `https://ifthenpay.com/api/creditcard/init/${this.config.ccardKey}`;\n    const payload = {\n      orderId: request.orderId,\n      amount: request.amount.toFixed(2),\n      description: request.description || `Pagamento ${request.orderId}`,\n      successUrl: request.successUrl,\n      errorUrl: request.errorUrl,\n      cancelUrl: request.cancelUrl,\n    };\n\n    try {\n      const response = await fetch(url, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(payload),\n      });\n\n      if (!response.ok) {\n        throw new Error(`Credit Card API error: ${response.status}`);\n      }\n\n      const data = await response.json();\n      \n      if (data.status !== '0') {\n        throw new Error(`Credit Card error: ${data.message || 'Unknown error'}`);\n      }\n\n      return {\n        paymentUrl: data.paymentUrl,\n        requestId: data.requestId,\n        amount: request.amount,\n        orderId: request.orderId,\n      };\n    } catch (error) {\n      console.error('Error creating Credit Card payment:', error);\n      throw error;\n    }\n  }\n\n  // Pay By Link\n  async createPayByLink(request: PayByLinkRequest): Promise<PayByLinkResponse> {\n    if (!this.config.gatewayKey) {\n      throw new Error('Gateway Key is required for Pay By Link');\n    }\n\n    const url = `${this.baseUrl}/gateway/pinpay/${this.config.gatewayKey}`;\n    const payload = {\n      orderId: request.orderId,\n      amount: request.amount.toFixed(2),\n      description: request.description || `Pagamento ${request.orderId}`,\n      expiryDays: request.expiryDays || 3,\n      methods: request.methods || ['multibanco', 'mbway', 'payshop', 'creditcard'],\n    };\n\n    try {\n      const response = await fetch(url, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(payload),\n      });\n\n      if (!response.ok) {\n        throw new Error(`Pay By Link API error: ${response.status}`);\n      }\n\n      const data = await response.json();\n      \n      if (data.status !== '0') {\n        throw new Error(`Pay By Link error: ${data.message || 'Unknown error'}`);\n      }\n\n      return {\n        paymentUrl: data.paymentUrl,\n        requestId: data.requestId,\n        amount: request.amount,\n        orderId: request.orderId,\n      };\n    } catch (error) {\n      console.error('Error creating Pay By Link:', error);\n      throw error;\n    }\n  }\n\n  // Check MB WAY Payment Status\n  async checkMBWayStatus(requestId: string): Promise<{ status: string; message?: string }> {\n    if (!this.config.mbwayKey) {\n      throw new Error('MBWAY Key is required');\n    }\n\n    const url = `${this.baseUrl}/spg/payment/mbway/status`;\n    const payload = {\n      mbwayKey: this.config.mbwayKey,\n      requestId: requestId,\n    };\n\n    try {\n      const response = await fetch(url, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(payload),\n      });\n\n      if (!response.ok) {\n        throw new Error(`MB WAY Status API error: ${response.status}`);\n      }\n\n      const data = await response.json();\n      return {\n        status: data.status,\n        message: data.message,\n      };\n    } catch (error) {\n      console.error('Error checking MB WAY status:', error);\n      throw error;\n    }\n  }\n\n  // Validate Callback (Webhook)\n  validateCallback(\n    orderId: string,\n    amount: string,\n    requestId: string,\n    key: string\n  ): boolean {\n    if (!this.config.antiPhishingKey) {\n      console.warn('Anti-phishing key not configured, skipping validation');\n      return true;\n    }\n\n    // Simple validation - in production, implement proper anti-phishing validation\n    return key === this.config.antiPhishingKey;\n  }\n\n  // Generate payment reference for offline Multibanco (algorithm-based)\n  generateMultibancoReference(entity: string, subEntity: string, orderId: string, amount: number): string {\n    // This is a simplified version - implement the full algorithm based on IfthenPay documentation\n    const amountStr = (amount * 100).toString().padStart(8, '0');\n    const orderStr = orderId.padStart(6, '0').slice(-6);\n    const baseReference = subEntity + orderStr + amountStr.slice(-2);\n    \n    // Calculate check digits (simplified - implement full algorithm)\n    const checkDigits = this.calculateCheckDigits(baseReference);\n    return baseReference + checkDigits;\n  }\n\n  private calculateCheckDigits(reference: string): string {\n    // Simplified check digit calculation\n    // Implement the full algorithm from IfthenPay documentation\n    const sum = reference\n      .split('')\n      .reduce((acc, digit, index) => acc + parseInt(digit) * (index + 1), 0);\n    \n    const checkDigit = (sum % 97).toString().padStart(2, '0');\n    return checkDigit;\n  }\n}\n\n// Factory function to create IfthenPay service instance\nexport function createIfthenPayService(): IfthenPayService {\n  const config: IfthenPayConfig = {\n    mbKey: process.env.IFTHENPAY_MB_KEY,\n    mbwayKey: process.env.IFTHENPAY_MBWAY_KEY,\n    payshopKey: process.env.IFTHENPAY_PAYSHOP_KEY,\n    ccardKey: process.env.IFTHENPAY_CCARD_KEY,\n    gatewayKey: process.env.IFTHENPAY_GATEWAY_KEY,\n    antiPhishingKey: process.env.IFTHENPAY_ANTI_PHISHING_KEY,\n    // Forçar modo produção (init) para Multibanco e Payshop funcionarem\n    sandbox: false,\n  };\n\n  console.log('🔑 IfthenPay Config Debug:', {\n    mbKey: config.mbKey ? `${config.mbKey.substring(0, 4)}...` : 'MISSING',\n    payshopKey: config.payshopKey ? `${config.payshopKey.substring(0, 4)}...` : 'MISSING',\n    mbwayKey: config.mbwayKey ? `${config.mbwayKey.substring(0, 4)}...` : 'MISSING',\n    antiPhishingKey: config.antiPhishingKey ? 'SET' : 'MISSING',\n    sandbox: config.sandbox,\n    nodeEnv: process.env.NODE_ENV\n  });\n\n  return new IfthenPayService(config);\n}","size_bytes":13352},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\n\n// Security headers\napp.use((req, res, next) => {\n  // Security headers\n  res.setHeader('X-Content-Type-Options', 'nosniff');\n  res.setHeader('X-Frame-Options', 'DENY');\n  res.setHeader('X-XSS-Protection', '1; mode=block');\n  res.setHeader('Referrer-Policy', 'strict-origin-when-cross-origin');\n  res.setHeader('Permissions-Policy', 'geolocation=(), microphone=(), camera=()');\n  \n  // Content Security Policy\n  res.setHeader('Content-Security-Policy', \n    \"default-src 'self'; \" +\n    \"script-src 'self' 'unsafe-inline' 'unsafe-eval' https://www.googletagmanager.com https://www.google-analytics.com https://maps.googleapis.com; \" +\n    \"style-src 'self' 'unsafe-inline' https://fonts.googleapis.com; \" +\n    \"font-src 'self' https://fonts.gstatic.com; \" +\n    \"img-src 'self' data: blob: https: http: https://maps.gstatic.com https://maps.googleapis.com; \" +\n    \"connect-src 'self' https://www.google-analytics.com https://maps.googleapis.com; \" +\n    \"frame-src 'none';\"\n  );\n  \n  next();\n});\n\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":3066},"server/objectStorage.ts":{"content":"import { Storage, File } from \"@google-cloud/storage\";\nimport { Response } from \"express\";\nimport { randomUUID } from \"crypto\";\n\nconst REPLIT_SIDECAR_ENDPOINT = \"http://127.0.0.1:1106\";\n\n// The object storage client is used to interact with the object storage service.\nexport const objectStorageClient = new Storage({\n  credentials: {\n    audience: \"replit\",\n    subject_token_type: \"access_token\",\n    token_url: `${REPLIT_SIDECAR_ENDPOINT}/token`,\n    type: \"external_account\",\n    credential_source: {\n      url: `${REPLIT_SIDECAR_ENDPOINT}/credential`,\n      format: {\n        type: \"json\",\n        subject_token_field_name: \"access_token\",\n      },\n    },\n    universe_domain: \"googleapis.com\",\n  },\n  projectId: \"\",\n});\n\nexport class ObjectNotFoundError extends Error {\n  constructor() {\n    super(\"Object not found\");\n    this.name = \"ObjectNotFoundError\";\n    Object.setPrototypeOf(this, ObjectNotFoundError.prototype);\n  }\n}\n\n// The object storage service is used to interact with the object storage service.\nexport class ObjectStorageService {\n  constructor() {}\n\n  // Gets the public object search paths.\n  getPublicObjectSearchPaths(): Array<string> {\n    const pathsStr = process.env.PUBLIC_OBJECT_SEARCH_PATHS || \"\";\n    const paths = Array.from(\n      new Set(\n        pathsStr\n          .split(\",\")\n          .map((path) => path.trim())\n          .filter((path) => path.length > 0)\n      )\n    );\n    if (paths.length === 0) {\n      throw new Error(\n        \"PUBLIC_OBJECT_SEARCH_PATHS not set. Create a bucket in 'Object Storage' \" +\n          \"tool and set PUBLIC_OBJECT_SEARCH_PATHS env var (comma-separated paths).\"\n      );\n    }\n    return paths;\n  }\n\n  // Search for a public object from the search paths.\n  async searchPublicObject(filePath: string): Promise<File | null> {\n    for (const searchPath of this.getPublicObjectSearchPaths()) {\n      const fullPath = `${searchPath}/${filePath}`;\n\n      // Full path format: /<bucket_name>/<object_name>\n      const { bucketName, objectName } = parseObjectPath(fullPath);\n      const bucket = objectStorageClient.bucket(bucketName);\n      const file = bucket.file(objectName);\n\n      // Check if file exists\n      const [exists] = await file.exists();\n      if (exists) {\n        return file;\n      }\n    }\n\n    return null;\n  }\n\n  // Downloads an object to the response.\n  async downloadObject(file: File, res: Response, cacheTtlSec: number = 3600) {\n    try {\n      // Get file metadata\n      const [metadata] = await file.getMetadata();\n      \n      // Set appropriate headers\n      res.set({\n        \"Content-Type\": metadata.contentType || \"application/octet-stream\",\n        \"Content-Length\": metadata.size,\n        \"Cache-Control\": `public, max-age=${cacheTtlSec}`,\n      });\n\n      // Stream the file to the response\n      const stream = file.createReadStream();\n\n      stream.on(\"error\", (err) => {\n        console.error(\"Stream error:\", err);\n        if (!res.headersSent) {\n          res.status(500).json({ error: \"Error streaming file\" });\n        }\n      });\n\n      stream.pipe(res);\n    } catch (error) {\n      console.error(\"Error downloading file:\", error);\n      if (!res.headersSent) {\n        res.status(500).json({ error: \"Error downloading file\" });\n      }\n    }\n  }\n\n  // List all files in the public directory\n  async listPublicFiles(): Promise<string[]> {\n    const files: string[] = [];\n    for (const searchPath of this.getPublicObjectSearchPaths()) {\n      const { bucketName, objectName } = parseObjectPath(searchPath);\n      const bucket = objectStorageClient.bucket(bucketName);\n      \n      const [fileList] = await bucket.getFiles({\n        prefix: objectName + '/',\n      });\n      \n      fileList.forEach(file => {\n        const relativePath = file.name.replace(objectName + '/', '');\n        if (relativePath && !relativePath.endsWith('/')) {\n          files.push(relativePath);\n        }\n      });\n    }\n    return files;\n  }\n\n  // Get upload URL for public files\n  async getPublicUploadURL(filePath: string): Promise<string> {\n    const publicSearchPaths = this.getPublicObjectSearchPaths();\n    if (publicSearchPaths.length === 0) {\n      throw new Error(\"No public search paths configured\");\n    }\n    \n    // Use the first public search path\n    const fullPath = `${publicSearchPaths[0]}/${filePath}`;\n    const { bucketName, objectName } = parseObjectPath(fullPath);\n    \n    return await signObjectURL({\n      bucketName,\n      objectName,\n      method: \"PUT\",\n      ttlSec: 900,\n    });\n  }\n\n  // Upload file directly to public storage\n  async uploadPublicFile(filePath: string, fileBuffer: Buffer, contentType: string = 'application/octet-stream'): Promise<void> {\n    const publicSearchPaths = this.getPublicObjectSearchPaths();\n    if (publicSearchPaths.length === 0) {\n      throw new Error(\"No public search paths configured\");\n    }\n    \n    // Use the first public search path\n    const fullPath = `${publicSearchPaths[0]}/${filePath}`;\n    const { bucketName, objectName } = parseObjectPath(fullPath);\n    const bucket = objectStorageClient.bucket(bucketName);\n    const file = bucket.file(objectName);\n    \n    await file.save(fileBuffer, {\n      metadata: {\n        contentType,\n      },\n    });\n  }\n\n  // Get upload URL for object entity (for public uploads)\n  async getObjectEntityUploadURL(): Promise<string> {\n    const publicSearchPaths = this.getPublicObjectSearchPaths();\n    if (publicSearchPaths.length === 0) {\n      throw new Error(\"No public search paths configured\");\n    }\n    \n    // Generate a unique file name for upload\n    const objectId = randomUUID();\n    const fullPath = `${publicSearchPaths[0]}/inicio/slider/uploads/${objectId}`;\n    const { bucketName, objectName } = parseObjectPath(fullPath);\n    \n    return await signObjectURL({\n      bucketName,\n      objectName,\n      method: \"PUT\",\n      ttlSec: 900,\n    });\n  }\n\n  // Delete a file from public storage\n  async deletePublicFile(filePath: string): Promise<boolean> {\n    try {\n      for (const searchPath of this.getPublicObjectSearchPaths()) {\n        const fullPath = `${searchPath}/${filePath}`;\n        const { bucketName, objectName } = parseObjectPath(fullPath);\n        const bucket = objectStorageClient.bucket(bucketName);\n        const file = bucket.file(objectName);\n        \n        // Check if file exists first\n        const [exists] = await file.exists();\n        if (exists) {\n          await file.delete();\n          console.log(`Deleted file: ${filePath}`);\n          return true;\n        }\n      }\n      return false;\n    } catch (error) {\n      console.error(`Error deleting file ${filePath}:`, error);\n      return false;\n    }\n  }\n\n  // Batch delete files from public storage\n  async deleteMultiplePublicFiles(filePaths: string[]): Promise<{success: number, failed: number}> {\n    let success = 0;\n    let failed = 0;\n    \n    for (const filePath of filePaths) {\n      const deleted = await this.deletePublicFile(filePath);\n      if (deleted) {\n        success++;\n      } else {\n        failed++;\n      }\n    }\n    \n    return { success, failed };\n  }\n\n  // Normalize object entity path\n  normalizeObjectEntityPath(rawPath: string): string {\n    // Simple normalization for public files\n    if (rawPath.startsWith('/public-objects/')) {\n      return rawPath;\n    }\n    if (rawPath.startsWith('http')) {\n      // Extract filename from URL\n      const url = new URL(rawPath);\n      return url.pathname;\n    }\n    return rawPath;\n  }\n}\n\nfunction parseObjectPath(path: string): {\n  bucketName: string;\n  objectName: string;\n} {\n  if (!path.startsWith(\"/\")) {\n    path = `/${path}`;\n  }\n  const pathParts = path.split(\"/\");\n  if (pathParts.length < 3) {\n    throw new Error(\"Invalid path: must contain at least a bucket name\");\n  }\n\n  const bucketName = pathParts[1];\n  const objectName = pathParts.slice(2).join(\"/\");\n\n  return {\n    bucketName,\n    objectName,\n  };\n}\n\nasync function signObjectURL({\n  bucketName,\n  objectName,\n  method,\n  ttlSec,\n}: {\n  bucketName: string;\n  objectName: string;\n  method: \"GET\" | \"PUT\" | \"DELETE\" | \"HEAD\";\n  ttlSec: number;\n}): Promise<string> {\n  const request = {\n    bucket_name: bucketName,\n    object_name: objectName,\n    method,\n    expires_at: new Date(Date.now() + ttlSec * 1000).toISOString(),\n  };\n  const response = await fetch(\n    `${REPLIT_SIDECAR_ENDPOINT}/object-storage/signed-object-url`,\n    {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(request),\n    }\n  );\n  if (!response.ok) {\n    throw new Error(\n      `Failed to sign object URL, errorcode: ${response.status}, ` +\n        `make sure you're running on Replit`\n    );\n  }\n\n  const { signed_url: signedURL } = await response.json();\n  return signedURL;\n}","size_bytes":8763},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { insertContactSchema, insertProductSchema, insertNewsSchema, insertSlideSchema, insertPageConfigSchema, type Contact } from \"@shared/schema\";\nimport { sendContactEmail, sendAutoReplyEmail } from \"./email\";\nimport { ObjectStorageService } from \"./objectStorage\";\nimport { createIfthenPayService, type PaymentMethod } from \"./ifthenpay\";\nimport rateLimit from 'express-rate-limit';\nimport fs from 'fs';\nimport path from 'path';\nimport multer from 'multer';\nimport {\n  getPageContent,\n  savePageContentEndpoint,\n  getMediaIndex,\n  getMediaFolders,\n  syncGlobalImages,\n  uploadMediaFiles,\n  deleteMediaFiles\n} from \"./visual-editor\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Rate limiting for contact form\n  const contactLimiter = rateLimit({\n    windowMs: 15 * 60 * 1000, // 15 minutes\n    max: 5, // limit each IP to 5 requests per windowMs\n    message: { \n      success: false, \n      message: \"Muitas tentativas. Tente novamente em 15 minutos.\" \n    },\n    standardHeaders: true,\n    legacyHeaders: false,\n  });\n\n  // Object storage service\n  const objectStorageService = new ObjectStorageService();\n  \n  // IfthenPay service\n  const ifthenPayService = createIfthenPayService();\n\n  // Google Maps API Key endpoint\n  app.get(\"/api/config/google-maps-key\", (req, res) => {\n    const apiKey = process.env.GOOGLE_MAPS_API_KEY;\n    if (!apiKey) {\n      return res.status(500).json({ error: 'Google Maps API key not configured' });\n    }\n    res.json({ apiKey });\n  });\n\n  // Sitemap.xml generator\n  app.get(\"/sitemap.xml\", (req, res) => {\n    const baseUrl = 'https://www.domrealce.com';\n    const pages = [\n      { url: '/', priority: '1.0', changefreq: 'daily' },\n      { url: '/servicos', priority: '0.9', changefreq: 'weekly' },\n      { url: '/portfolio', priority: '0.8', changefreq: 'weekly' },\n      { url: '/loja', priority: '0.8', changefreq: 'daily' },\n      { url: '/loja-papel-parede', priority: '0.8', changefreq: 'daily' },\n      { url: '/contactos', priority: '0.7', changefreq: 'monthly' },\n      { url: '/sobre', priority: '0.6', changefreq: 'monthly' },\n      { url: '/noticias', priority: '0.7', changefreq: 'weekly' },\n      { url: '/servico-design-grafico', priority: '0.8', changefreq: 'monthly' },\n      { url: '/servico-impressao-digital', priority: '0.8', changefreq: 'monthly' },\n      { url: '/servico-papel-parede', priority: '0.8', changefreq: 'monthly' },\n      { url: '/servico-telas-artisticas', priority: '0.7', changefreq: 'monthly' },\n      { url: '/servico-autocolantes', priority: '0.7', changefreq: 'monthly' },\n      { url: '/servico-decoracao-viaturas', priority: '0.8', changefreq: 'monthly' },\n      { url: '/servico-espacos-comerciais', priority: '0.7', changefreq: 'monthly' },\n      { url: '/servico-peliculas-protecao-solar', priority: '0.7', changefreq: 'monthly' },\n      { url: '/como-aplicar-papel-parede', priority: '0.6', changefreq: 'monthly' },\n      { url: '/politica-privacidade', priority: '0.3', changefreq: 'yearly' },\n      { url: '/termos-condicoes', priority: '0.3', changefreq: 'yearly' },\n      { url: '/politica-cookies', priority: '0.3', changefreq: 'yearly' },\n      { url: '/aviso-legal', priority: '0.3', changefreq: 'yearly' }\n    ];\n\n    const sitemap = `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">\n${pages.map(page => `  <url>\n    <loc>${baseUrl}${page.url}</loc>\n    <lastmod>${new Date().toISOString().split('T')[0]}</lastmod>\n    <changefreq>${page.changefreq}</changefreq>\n    <priority>${page.priority}</priority>\n  </url>`).join('\\n')}\n</urlset>`;\n\n    res.set('Content-Type', 'text/xml');\n    res.send(sitemap);\n  });\n\n  // Robots.txt\n  app.get(\"/robots.txt\", (req, res) => {\n    const robots = `User-agent: *\nAllow: /\n\nSitemap: https://www.domrealce.com/sitemap.xml`;\n    res.set('Content-Type', 'text/plain');\n    res.send(robots);\n  });\n\n  // Serve public images from object storage\n  app.get(\"/public-objects/:filePath(*)\", async (req, res) => {\n    const filePath = req.params.filePath;\n    try {\n      const file = await objectStorageService.searchPublicObject(filePath);\n      if (!file) {\n        return res.status(404).json({ error: \"File not found\" });\n      }\n      objectStorageService.downloadObject(file, res);\n    } catch (error) {\n      console.error(\"Error searching for public object:\", error);\n      return res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // API route to list available images for gallery (portfolio only)\n  app.get(\"/api/gallery/images\", async (req, res) => {\n    try {\n      const files = await objectStorageService.listPublicFiles();\n      \n      // Filter only portfolio images (exclude loja)\n      const portfolioImages = files.filter(file => \n        /\\.(jpg|jpeg|png|gif|webp)$/i.test(file) && \n        file.startsWith('portfolio/') && \n        !file.startsWith('loja/')\n      );\n      \n      res.json({ images: portfolioImages });\n    } catch (error) {\n      console.error(\"Error listing images:\", error);\n      res.status(500).json({ error: \"Failed to list images\" });\n    }\n  });\n\n  // API route to list client logos from logos-clientes folder\n  app.get(\"/api/client-logos\", async (req, res) => {\n    try {\n      const files = await objectStorageService.listPublicFiles();\n      \n      // Filter logo images from inicio/logos-clientes folder\n      const logoImages = files.filter(file => \n        /\\.(jpg|jpeg|png|gif|webp|svg)$/i.test(file) && \n        (file.startsWith('inicio/logos-clientes/') || \n         file.startsWith('logos-clientes/') ||\n         file.includes('logos-clientes'))\n      );\n      \n      // Transform file paths to usable URLs and extract client names\n      const logos = logoImages.map(file => {\n        const fileName = file.split('/').pop() || '';\n        const clientName = fileName.replace(/\\.(jpg|jpeg|png|gif|webp|svg)$/i, '')\n          .replace(/[-_]/g, ' ')\n          .replace(/\\b\\w/g, l => l.toUpperCase());\n        \n        return {\n          id: fileName,\n          url: `/public-objects/${file}`,\n          clientName: clientName || 'Cliente',\n          fileName: fileName\n        };\n      });\n      \n      res.json({ logos });\n    } catch (error) {\n      console.error(\"Error listing client logos:\", error);\n      res.status(500).json({ error: \"Failed to list client logos\" });\n    }\n  });\n\n  // API route to auto-generate texture covers from available texture folders\n  app.post(\"/api/auto-generate-covers\", async (req, res) => {\n    try {\n      console.log('Starting auto-generation of texture covers...');\n      \n      const allImages = await objectStorageService.listPublicFiles();\n      \n      // Find all texture categories from existing images\n      const textureCategories = new Set<string>();\n      \n      allImages.forEach(path => {\n        const match = path.match(/^loja\\/papel-de-parede\\/texturas\\/([^\\/]+)\\//);\n        if (match) {\n          textureCategories.add(match[1]);\n        }\n      });\n      \n      console.log('Found texture categories:', Array.from(textureCategories));\n      \n      const generatedCovers = [];\n      \n      for (const category of Array.from(textureCategories)) {\n        // Check if cover already exists\n        const coverPath = `loja/papel-de-parede/capas-texturas/${category}.webp`;\n        const coverExists = allImages.includes(coverPath);\n        \n        if (!coverExists) {\n          // Find first texture image in this category to use as cover\n          const firstTexture = allImages.find(path => \n            path.startsWith(`loja/papel-de-parede/texturas/${category}/`) &&\n            /\\.(jpg|jpeg|png|gif|webp)$/i.test(path)\n          );\n          \n          if (firstTexture) {\n            try {\n              // Get the original image from object storage\n              const file = await objectStorageService.searchPublicObject(firstTexture.replace(/^loja\\/papel-de-parede\\//, ''));\n              \n              if (file) {\n                // Download the image data\n                const chunks: Buffer[] = [];\n                const stream = file.createReadStream();\n                \n                await new Promise((resolve, reject) => {\n                  stream.on('data', (chunk) => chunks.push(chunk));\n                  stream.on('end', resolve);\n                  stream.on('error', reject);\n                });\n                \n                const imageBuffer = Buffer.concat(chunks);\n                \n                // Upload as cover with .webp extension\n                await objectStorageService.uploadPublicFile(\n                  coverPath,\n                  imageBuffer,\n                  'image/webp'\n                );\n                \n                generatedCovers.push({ category, source: firstTexture, cover: coverPath });\n                console.log(`✓ Generated cover for ${category} from ${firstTexture}`);\n              }\n            } catch (error) {\n              console.error(`✗ Error generating cover for ${category}:`, error);\n            }\n          }\n        } else {\n          console.log(`Cover for ${category} already exists`);\n        }\n      }\n      \n      res.json({ \n        message: 'Auto-generation completed',\n        categoriesFound: Array.from(textureCategories),\n        coversGenerated: generatedCovers\n      });\n      \n    } catch (error) {\n      console.error(\"Error in auto-generation:\", error);\n      res.status(500).json({ error: \"Failed to auto-generate covers\" });\n    }\n  });\n\n  // File upload endpoint - simplified for direct uploads\n  app.post(\"/api/objects/upload\", async (req, res) => {\n    try {\n      // Simple placeholder for upload URL - the actual upload will be handled by the client differently\n      const uploadURL = `http://localhost:5000/api/upload-direct`;\n      res.json({ uploadURL });\n    } catch (error) {\n      console.error(\"Error getting upload URL:\", error);\n      res.status(500).json({ error: \"Failed to get upload URL\" });\n    }\n  });\n\n  // Bulk upload endpoint for texture covers\n  app.post(\"/api/upload-textures\", async (req, res) => {\n    try {\n      const fs = await import('fs');\n      const path = await import('path');\n      \n      const texturesPath = 'loja/papel-de-parede/capas-texturas';\n      const files = fs.readdirSync(texturesPath);\n      const webpFiles = files.filter(file => file.endsWith('.webp'));\n      \n      const uploadResults = [];\n      \n      for (const file of webpFiles) {\n        try {\n          const filePath = path.join(texturesPath, file);\n          const fileBuffer = fs.readFileSync(filePath);\n          const targetPath = `loja/papel-de-parede/capas-texturas/${file}`;\n          \n          await objectStorageService.uploadPublicFile(targetPath, fileBuffer, 'image/webp');\n          uploadResults.push({ file, status: 'success' });\n          console.log(`✓ Uploaded ${file}`);\n        } catch (error) {\n          const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n          uploadResults.push({ file, status: 'error', error: errorMessage });\n          console.error(`✗ Error uploading ${file}:`, errorMessage);\n        }\n      }\n      \n      res.json({ \n        message: 'Bulk upload completed',\n        results: uploadResults,\n        total: webpFiles.length,\n        successful: uploadResults.filter(r => r.status === 'success').length\n      });\n      \n    } catch (error) {\n      console.error(\"Error in bulk upload:\", error);\n      res.status(500).json({ error: \"Failed to upload textures\" });\n    }\n  });\n\n  // API route to list loja images (separate from portfolio)\n  app.get(\"/api/loja/images\", async (req, res) => {\n    try {\n      const files = await objectStorageService.listPublicFiles();\n      \n      // Filter only loja images\n      const lojaImages = files.filter(file => \n        /\\.(jpg|jpeg|png|gif|webp)$/i.test(file) && \n        file.startsWith('loja/')\n      );\n      \n      res.json({ images: lojaImages });\n    } catch (error) {\n      console.error(\"Error listing loja images:\", error);\n      res.status(500).json({ error: \"Failed to list loja images\" });\n    }\n  });\n\n  // API route to list slider images and auto-sync with database\n  app.get(\"/api/slider/images\", async (req, res) => {\n    try {\n      const files = await objectStorageService.listPublicFiles();\n      \n      // Filter only slider images in specific slider directory\n      const sliderImages = files.filter(file => \n        /\\.(jpg|jpeg|png|gif|webp)$/i.test(file) && \n        file.startsWith('inicio/slider/')\n      );\n      \n      // Auto-sync slider images to database\n      for (const imagePath of sliderImages) {\n        const fileName = imagePath.split('/').pop()?.replace(/\\.(jpg|jpeg|png|gif|webp)$/i, '') || '';\n        const imageUrl = `/public-objects/${imagePath}`;\n        \n        // Check if slide already exists\n        const existingSlides = await storage.getSlides();\n        const slideExists = existingSlides.some(slide => slide.image === imageUrl);\n        \n        if (!slideExists) {\n          // Create new slide automatically\n          const slideData = {\n            image: imageUrl,\n            title: fileName.replace(/-/g, ' ').replace(/\\b\\w/g, (l: string) => l.toUpperCase()),\n            text: `Conheça os nossos serviços de qualidade`,\n            order_position: (existingSlides.length + 1).toString(),\n            active: true\n          };\n          \n          await storage.createSlide(slideData);\n          console.log(`Auto-created slide for: ${fileName}`);\n        }\n      }\n      \n      res.json({ images: sliderImages });\n    } catch (error) {\n      console.error(\"Error processing slider images:\", error);\n      res.status(500).json({ error: \"Failed to process slider images\" });\n    }\n  });\n\n  // API route to handle direct file uploads\n  app.post(\"/api/upload-direct\", async (req, res) => {\n    try {\n      // This would handle direct file upload\n      // For now, return success with a dummy path\n      const fileName = `slide-${Date.now()}.jpg`;\n      const targetPath = `inicio/slider/${fileName}`;\n      const imageUrl = `/public-objects/${targetPath}`;\n      \n      res.json({ \n        success: true,\n        imageUrl,\n        path: targetPath,\n        fileName\n      });\n    } catch (error) {\n      console.error(\"Error processing direct upload:\", error);\n      res.status(500).json({ error: \"Failed to process upload\" });\n    }\n  });\n\n  // API route to upload slider images\n  app.post(\"/api/upload-slider-image\", async (req, res) => {\n    try {\n      const { fileName, targetPath } = req.body;\n      \n      if (!fileName || !targetPath) {\n        return res.status(400).json({ error: \"fileName and targetPath are required\" });\n      }\n\n      // The file should already be uploaded via the object uploader\n      // This endpoint just confirms the upload location\n      const imageUrl = `/public-objects/${targetPath}`;\n      \n      res.json({ \n        success: true,\n        imageUrl,\n        path: targetPath\n      });\n    } catch (error) {\n      console.error(\"Error processing slider image upload:\", error);\n      res.status(500).json({ error: \"Failed to process slider image upload\" });\n    }\n  });\n\n  // API route to upload individual textures for each category\n  app.post(\"/api/upload-individual-textures\", async (req, res) => {\n    try {\n      console.log('Starting individual textures upload...');\n      \n      const textureCategories = [\n        '3D', 'Amostras', 'Animal', 'Arabesco', 'Azulejo', 'Baby', 'Baby-2.0', \n        'Baby-Colors', 'Baby-Paineis', 'Baby-Pantone', 'Casual', \n        'Chevron', 'Couro', 'Floral', 'Folhas', 'Geometrico'\n      ];\n      \n      const uploadResults = [];\n      \n      for (const category of textureCategories) {\n        const categoryPath = `loja/papel-de-parede/texturas/${category}`;\n        \n        // Check if directory exists\n        if (fs.existsSync(categoryPath)) {\n          const files = fs.readdirSync(categoryPath);\n          const imageFiles = files.filter((file: string) => \n            /\\.(jpg|jpeg|png|gif|webp)$/i.test(file)\n          );\n          \n          for (const file of imageFiles) {\n            try {\n              const filePath = path.join(categoryPath, file);\n              const fileBuffer = fs.readFileSync(filePath);\n              const targetPath = `loja/papel-de-parede/texturas/${category}/${file}`;\n              \n              // Determine content type\n              const ext = path.extname(file).toLowerCase();\n              const contentType = ext === '.webp' ? 'image/webp' : \n                                ext === '.png' ? 'image/png' : 'image/jpeg';\n              \n              await objectStorageService.uploadPublicFile(targetPath, fileBuffer, contentType);\n              uploadResults.push({ category, file, status: 'success' });\n              console.log(`✓ Uploaded ${category}/${file}`);\n            } catch (error) {\n              const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n              uploadResults.push({ category, file, status: 'error', error: errorMessage });\n              console.error(`✗ Error uploading ${category}/${file}:`, errorMessage);\n            }\n          }\n        } else {\n          console.log(`Directory ${categoryPath} does not exist, skipping...`);\n        }\n      }\n      \n      res.json({ \n        message: 'Individual textures upload completed',\n        results: uploadResults,\n        total: uploadResults.length,\n        successful: uploadResults.filter(r => r.status === 'success').length\n      });\n      \n    } catch (error) {\n      console.error(\"Error in individual textures upload:\", error);\n      res.status(500).json({ error: \"Failed to upload individual textures\" });\n    }\n  });\n\n  // Admin endpoint to get all contacts for email marketing\n  app.get(\"/api/admin/contacts\", async (req, res) => {\n    try {\n      const contacts = await storage.getAllContacts();\n      res.json({ contacts });\n    } catch (error) {\n      console.error('Error fetching contacts:', error);\n      res.status(500).json({ error: \"Failed to fetch contacts\" });\n    }\n  });\n\n  // Admin Portfolio - Delete image\n  app.delete(\"/api/admin/portfolio/delete\", async (req, res) => {\n    try {\n      const { filename } = req.body;\n      \n      if (!filename) {\n        return res.status(400).json({ error: \"Filename is required\" });\n      }\n\n      // Validate that it's a portfolio image\n      if (!filename.startsWith('portfolio/')) {\n        return res.status(400).json({ error: \"Only portfolio images can be deleted\" });\n      }\n\n      const deleted = await objectStorageService.deletePublicFile(filename);\n      \n      if (deleted) {\n        res.json({ success: true, message: \"Image deleted successfully\" });\n      } else {\n        res.status(404).json({ error: \"Image not found\" });\n      }\n    } catch (error) {\n      console.error('Error deleting portfolio image:', error);\n      res.status(500).json({ error: \"Failed to delete image\" });\n    }\n  });\n\n  // Admin endpoint to export contacts as CSV for email marketing\n  app.get(\"/api/admin/contacts/export\", async (req, res) => {\n    try {\n      const contacts = await storage.getAllContacts();\n      \n      // Create CSV content\n      const csvHeader = \"Nome,Email,Telefone,Empresa,Data,Mensagem\\n\";\n      const csvContent = contacts.map((contact: Contact) => {\n        const date = contact.createdAt ? new Date(contact.createdAt).toLocaleDateString('pt-PT') : '';\n        return `\"${contact.nome}\",\"${contact.email}\",\"${contact.telefone || ''}\",\"${contact.empresa || ''}\",\"${date}\",\"${contact.mensagem.replace(/\"/g, '\"\"')}\"`;\n      }).join('\\n');\n      \n      const csv = csvHeader + csvContent;\n      \n      res.setHeader('Content-Type', 'text/csv; charset=utf-8');\n      res.setHeader('Content-Disposition', 'attachment; filename=\"contactos-domrealce.csv\"');\n      res.send('\\uFEFF' + csv); // Add BOM for Excel compatibility\n    } catch (error) {\n      console.error('Error exporting contacts:', error);\n      res.status(500).json({ error: \"Failed to export contacts\" });\n    }\n  });\n\n  // Contact form submission endpoint with rate limiting\n  app.post(\"/api/contact\", contactLimiter, async (req, res) => {\n    try {\n      // Validate the request body\n      const validatedData = insertContactSchema.parse(req.body);\n      \n      // Normalize file URLs if any\n      if (validatedData.ficheiros && validatedData.ficheiros.length > 0) {\n        validatedData.ficheiros = validatedData.ficheiros.map(url => \n          objectStorageService.normalizeObjectEntityPath(url)\n        );\n      }\n      \n      // Save contact to storage\n      const contact = await storage.createContact(validatedData);\n      \n      // Send email notifications (don't wait for them)\n      Promise.all([\n        sendContactEmail(contact),\n        sendAutoReplyEmail(contact)\n      ]).catch(error => {\n        console.error('Error sending emails:', error);\n      });\n      \n      res.json({ \n        success: true, \n        message: \"Mensagem enviada com sucesso. Entraremos em contacto brevemente.\" \n      });\n    } catch (error) {\n      console.error('Contact form error:', error);\n      res.status(400).json({ \n        success: false, \n        message: \"Erro ao enviar mensagem. Por favor, tente novamente.\" \n      });\n    }\n  });\n\n  // Get all contacts (for admin purposes)\n  app.get(\"/api/contacts\", async (req, res) => {\n    try {\n      const contacts = await storage.getContacts();\n      res.json(contacts);\n    } catch (error) {\n      console.error('Error fetching contacts:', error);\n      res.status(500).json({ message: \"Erro interno do servidor\" });\n    }\n  });\n\n  // Get featured products for homepage\n  app.get(\"/api/products/featured\", async (req, res) => {\n    try {\n      const products = await storage.getFeaturedProducts();\n      res.json(products);\n    } catch (error) {\n      console.error(\"Error fetching featured products:\", error);\n      res.status(500).json({ error: \"Failed to fetch featured products\" });\n    }\n  });\n\n  // Get recent news for homepage\n  app.get(\"/api/news/recent\", async (req, res) => {\n    try {\n      const news = await storage.getRecentNews();\n      res.json(news);\n    } catch (error) {\n      console.error(\"Error fetching recent news:\", error);\n      res.status(500).json({ error: \"Failed to fetch recent news\" });\n    }\n  });\n\n  // Payment routes\n  \n  // Create payment\n  app.post(\"/api/payments/create\", async (req, res) => {\n    try {\n      const { method, orderId, amount, customerData, returnUrls } = req.body;\n      \n      if (!method || !orderId || !amount) {\n        return res.status(400).json({ \n          success: false, \n          message: \"Método de pagamento, ID do pedido e valor são obrigatórios\" \n        });\n      }\n\n      let paymentData: any;\n\n      switch (method as PaymentMethod) {\n        case 'multibanco':\n          paymentData = await ifthenPayService.createMultibancoPayment({\n            orderId,\n            amount: parseFloat(amount),\n            description: `Papel de parede - Pedido ${orderId}`,\n            customerEmail: customerData?.email,\n          });\n          break;\n\n        case 'mbway':\n          if (!customerData?.phone) {\n            return res.status(400).json({ \n              success: false, \n              message: \"Número de telefone é obrigatório para MB WAY\" \n            });\n          }\n          paymentData = await ifthenPayService.createMBWayPayment({\n            orderId,\n            amount: parseFloat(amount),\n            phone: customerData.phone,\n            description: `Papel de parede - Pedido ${orderId}`,\n            customerEmail: customerData?.email,\n          });\n          break;\n\n\n        case 'creditcard':\n          if (!returnUrls) {\n            return res.status(400).json({ \n              success: false, \n              message: \"URLs de retorno são obrigatórias para cartão de crédito\" \n            });\n          }\n          paymentData = await ifthenPayService.createCreditCardPayment({\n            orderId,\n            amount: parseFloat(amount),\n            description: `Papel de parede - Pedido ${orderId}`,\n            successUrl: returnUrls.success,\n            errorUrl: returnUrls.error,\n            cancelUrl: returnUrls.cancel,\n            customerEmail: customerData?.email,\n          });\n          break;\n\n        case 'paybylink':\n          paymentData = await ifthenPayService.createPayByLink({\n            orderId,\n            amount: parseFloat(amount),\n            description: `Papel de parede - Pedido ${orderId}`,\n            expiryDays: 3,\n            methods: ['multibanco', 'mbway', 'creditcard'],\n          });\n          break;\n\n        default:\n          return res.status(400).json({ \n            success: false, \n            message: \"Método de pagamento não suportado\" \n          });\n      }\n\n      res.json({\n        success: true,\n        method,\n        data: paymentData,\n      });\n\n    } catch (error) {\n      console.error('Error creating payment:', error);\n      console.error('Payment method was:', req.body.method);\n      console.error('Full error details:', error instanceof Error ? error.message : error);\n      res.status(500).json({ \n        success: false, \n        message: error instanceof Error ? error.message : \"Erro ao criar pagamento. Tente novamente.\"\n      });\n    }\n  });\n\n  // Check MB WAY payment status\n  app.post(\"/api/payments/mbway/status\", async (req, res) => {\n    try {\n      const { requestId } = req.body;\n      \n      if (!requestId) {\n        return res.status(400).json({ \n          success: false, \n          message: \"Request ID é obrigatório\" \n        });\n      }\n\n      try {\n        // Try to check real status with IfthenPay\n        const statusResponse = await ifthenPayService.checkMBWayStatus(requestId);\n        \n        res.json({\n          success: true,\n          status: statusResponse.status,\n          message: statusResponse.status === \"paid\" \n            ? \"Pagamento confirmado!\" \n            : \"Aguarde confirmação no seu telemóvel\"\n        });\n      } catch (statusError) {\n        // If status check fails, return pending (fallback behavior)\n        console.warn('MB WAY status check failed, returning pending:', statusError);\n        res.json({\n          success: true,\n          status: \"pending\",\n          message: \"Aguarde confirmação no seu telemóvel\"\n        });\n      }\n\n    } catch (error) {\n      console.error('Error checking MB WAY status:', error);\n      res.json({\n        success: true,\n        status: \"pending\", \n        message: \"Aguarde confirmação no seu telemóvel\"\n      });\n    }\n  });\n\n  // Payment callback (webhook) handler - IfthenPay sends GET requests\n  app.get(\"/api/payments/callback\", async (req, res) => {\n    try {\n      const { \n        key,             // Anti-phishing key (standard format)\n        chave,           // Anti-phishing key (Portuguese format)\n        orderId,         // Order ID\n        amount,          // Amount\n        requestId,       // Request ID\n        entity,          // Entity (Multibanco)\n        entidade,        // Entity (Portuguese)\n        reference,       // Reference (Multibanco)\n        referencia,      // Reference (Portuguese)\n        payment_datetime, // Payment datetime\n        datahorapag,     // Payment datetime (Portuguese)\n        valor            // Amount (Portuguese)\n      } = req.query;\n      \n      console.log('IfthenPay callback received from www.domrealce.com:', {\n        chave: chave ? `${String(chave).substring(0,5)}...` : 'missing',\n        key: key ? `${String(key).substring(0,5)}...` : 'missing',\n        entidade,\n        referencia,\n        valor,\n        datahorapag,\n        orderId,\n        amount,\n        requestId,\n        payment_datetime\n      });\n      \n      // Validate anti-phishing key (support both formats)\n      const expectedKey = process.env.IFTHENPAY_ANTI_PHISHING_KEY;\n      const receivedKey = chave || key; // Try both parameter names\n      \n      if (!expectedKey) {\n        console.log('Anti-phishing key not configured in environment');\n        return res.status(200).send('OK'); // Don't reject if not configured yet\n      }\n      \n      if (receivedKey !== expectedKey) {\n        console.log(`Invalid anti-phishing key. Expected: ${expectedKey.substring(0,5)}..., Got: ${String(receivedKey).substring(0,5)}...`);\n        return res.status(403).send('Forbidden');\n      }\n\n      // Process payment confirmation (support multiple formats)\n      const finalAmount = valor || amount;\n      const finalOrderId = orderId || `Ref-${referencia}`;\n      const finalDateTime = datahorapag || payment_datetime;\n      \n      console.log(`✓ Payment confirmed! Order: ${finalOrderId}, Amount: €${finalAmount}, Entity: ${entidade}, Reference: ${referencia}, DateTime: ${finalDateTime}`);\n      \n      // Here you would typically:\n      // 1. Update order status in database\n      // 2. Send confirmation email to customer\n      // 3. Trigger any business logic (e.g., start production)\n      \n      // Return HTTP 200 to acknowledge receipt (required by IfthenPay)\n      res.status(200).send('OK');\n\n    } catch (error) {\n      console.error('Error processing callback:', error);\n      res.status(500).send('Error processing callback');\n    }\n  });\n\n  // Payment notification endpoint\n  app.get(\"/api/payments/notification\", async (req, res) => {\n    try {\n      console.log('IfthenPay notification received:', req.query);\n      \n      // Process notification (same as callback but for email notifications)\n      // This endpoint is for additional notifications, main processing is in callback\n      \n      res.status(200).send('OK');\n    } catch (error) {\n      console.error('Error processing notification:', error);\n      res.status(500).send('Error processing notification');\n    }\n  });\n\n  // Payment success page\n  app.get(\"/api/payments/success\", (req, res) => {\n    const { orderId, amount } = req.query;\n    \n    // Validate required parameters\n    if (!orderId || !amount) {\n      console.error('Payment success callback missing required parameters:', { orderId, amount });\n      return res.redirect(`/checkout?error=missing-parameters`);\n    }\n    \n    // Validate amount format\n    const amountNum = parseFloat(amount as string);\n    if (isNaN(amountNum) || amountNum <= 0) {\n      console.error('Payment success callback invalid amount:', amount);\n      return res.redirect(`/checkout?error=invalid-amount&orderId=${orderId}`);\n    }\n    \n    res.redirect(`/pedido-confirmado?orderId=${orderId}&amount=${amount}`);\n  });\n\n  // Payment error page\n  app.get(\"/api/payments/error\", (req, res) => {\n    const { orderId, error } = req.query;\n    \n    // Log error for debugging\n    console.error('Payment error callback received:', { orderId, error });\n    \n    // Ensure we have at least an error message\n    const errorMsg = error || 'unknown-error';\n    const orderParam = orderId ? `&orderId=${orderId}` : '';\n    \n    res.redirect(`/checkout?error=${errorMsg}${orderParam}`);\n  });\n\n  // Payment cancel page\n  app.get(\"/api/payments/cancel\", (req, res) => {\n    const { orderId } = req.query;\n    res.redirect(`/checkout?cancelled=true&orderId=${orderId}`);\n  });\n\n  // Admin API routes for managing content\n  \n  // Admin Slider routes\n  app.get(\"/api/admin/slider\", async (req, res) => {\n    try {\n      const slides = await storage.getSlides();\n      res.json({ slides });\n    } catch (error) {\n      console.error(\"Error fetching slides:\", error);\n      res.status(500).json({ error: \"Failed to fetch slides\" });\n    }\n  });\n\n  app.post(\"/api/admin/slider\", async (req, res) => {\n    try {\n      const slideData = insertSlideSchema.parse(req.body);\n      const slide = await storage.createSlide(slideData);\n      res.json({ success: true, slide });\n    } catch (error) {\n      console.error(\"Error creating slide:\", error);\n      res.status(500).json({ error: \"Failed to create slide\" });\n    }\n  });\n\n  app.put(\"/api/admin/slider/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const slideData = insertSlideSchema.parse(req.body);\n      const slide = await storage.updateSlide(id, slideData);\n      res.json({ success: true, slide });\n    } catch (error) {\n      console.error(\"Error updating slide:\", error);\n      res.status(500).json({ error: \"Failed to update slide\" });\n    }\n  });\n\n  app.delete(\"/api/admin/slider/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const success = await storage.deleteSlide(id);\n      res.json({ success });\n    } catch (error) {\n      console.error(\"Error deleting slide:\", error);\n      res.status(500).json({ error: \"Failed to delete slide\" });\n    }\n  });\n\n  // Admin Products routes\n  app.get(\"/api/admin/produtos\", async (req, res) => {\n    try {\n      const produtos = await storage.getAllProducts();\n      res.json({ produtos });\n    } catch (error) {\n      console.error(\"Error fetching products:\", error);\n      res.status(500).json({ error: \"Failed to fetch products\" });\n    }\n  });\n\n  app.post(\"/api/admin/produtos\", async (req, res) => {\n    try {\n      const productData = insertProductSchema.parse(req.body);\n      const produto = await storage.createProduct(productData);\n      res.json({ success: true, produto });\n    } catch (error) {\n      console.error(\"Error creating product:\", error);\n      res.status(500).json({ error: \"Failed to create product\" });\n    }\n  });\n\n  app.put(\"/api/admin/produtos/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const productData = insertProductSchema.parse(req.body);\n      const produto = await storage.updateProduct(id, productData);\n      res.json({ success: true, produto });\n    } catch (error) {\n      console.error(\"Error updating product:\", error);\n      res.status(500).json({ error: \"Failed to update product\" });\n    }\n  });\n\n  app.delete(\"/api/admin/produtos/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const success = await storage.deleteProduct(id);\n      res.json({ success });\n    } catch (error) {\n      console.error(\"Error deleting product:\", error);\n      res.status(500).json({ error: \"Failed to delete product\" });\n    }\n  });\n\n  // Admin News routes\n  app.get(\"/api/admin/noticias\", async (req, res) => {\n    try {\n      const noticias = await storage.getAllNews();\n      res.json({ noticias });\n    } catch (error) {\n      console.error(\"Error fetching news:\", error);\n      res.status(500).json({ error: \"Failed to fetch news\" });\n    }\n  });\n\n  app.post(\"/api/admin/noticias\", async (req, res) => {\n    try {\n      const newsData = insertNewsSchema.parse(req.body);\n      const noticia = await storage.createNews(newsData);\n      res.json({ success: true, noticia });\n    } catch (error) {\n      console.error(\"Error creating news:\", error);\n      res.status(500).json({ error: \"Failed to create news\" });\n    }\n  });\n\n  app.put(\"/api/admin/noticias/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const newsData = insertNewsSchema.parse(req.body);\n      const noticia = await storage.updateNews(id, newsData);\n      res.json({ success: true, noticia });\n    } catch (error) {\n      console.error(\"Error updating news:\", error);\n      res.status(500).json({ error: \"Failed to update news\" });\n    }\n  });\n\n  app.delete(\"/api/admin/noticias/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const success = await storage.deleteNews(id);\n      res.json({ success });\n    } catch (error) {\n      console.error(\"Error deleting news:\", error);\n      res.status(500).json({ error: \"Failed to delete news\" });\n    }\n  });\n\n  // Admin Loja routes (specialized for store products)\n  app.get(\"/api/admin/loja\", async (req, res) => {\n    try {\n      const produtos = await storage.getAllProducts();\n      // Filter products that are store-related (Papel de Parede or texture categories)\n      res.json({ produtos });\n    } catch (error) {\n      console.error(\"Error fetching loja products:\", error);\n      res.status(500).json({ error: \"Failed to fetch loja products\" });\n    }\n  });\n\n  app.post(\"/api/admin/loja\", async (req, res) => {\n    try {\n      const productData = insertProductSchema.parse(req.body);\n      const produto = await storage.createProduct(productData);\n      res.json({ success: true, produto });\n    } catch (error) {\n      console.error(\"Error creating loja product:\", error);\n      res.status(500).json({ error: \"Failed to create loja product\" });\n    }\n  });\n\n  app.put(\"/api/admin/loja/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const productData = insertProductSchema.parse(req.body);\n      const produto = await storage.updateProduct(id, productData);\n      res.json({ success: true, produto });\n    } catch (error) {\n      console.error(\"Error updating loja product:\", error);\n      res.status(500).json({ error: \"Failed to update loja product\" });\n    }\n  });\n\n  app.delete(\"/api/admin/loja/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const success = await storage.deleteProduct(id);\n      res.json({ success });\n    } catch (error) {\n      console.error(\"Error deleting loja product:\", error);\n      res.status(500).json({ error: \"Failed to delete loja product\" });\n    }\n  });\n\n  // Admin Contacts routes\n  app.get(\"/api/admin/contacts\", async (req, res) => {\n    try {\n      const contacts = await storage.getAllContacts();\n      res.json({ contacts });\n    } catch (error) {\n      console.error(\"Error fetching contacts:\", error);\n      res.status(500).json({ error: \"Failed to fetch contacts\" });\n    }\n  });\n\n  // Admin Page Config routes\n  app.get(\"/api/admin/pages\", async (req, res) => {\n    try {\n      const { page } = req.query;\n      const configs = await storage.getPageConfigs(page as string);\n      res.json({ configs });\n    } catch (error) {\n      console.error(\"Error fetching page configs:\", error);\n      res.status(500).json({ error: \"Failed to fetch page configs\" });\n    }\n  });\n\n  app.get(\"/api/admin/pages/:page\", async (req, res) => {\n    try {\n      const { page } = req.params;\n      const configs = await storage.getPageConfigs(page);\n      res.json({ configs });\n    } catch (error) {\n      console.error(\"Error fetching page configs:\", error);\n      res.status(500).json({ error: \"Failed to fetch page configs\" });\n    }\n  });\n\n  app.post(\"/api/admin/pages\", async (req, res) => {\n    try {\n      const configData = insertPageConfigSchema.parse(req.body);\n      const config = await storage.createPageConfig(configData);\n      res.json({ success: true, config });\n    } catch (error) {\n      console.error(\"Error creating page config:\", error);\n      res.status(500).json({ error: \"Failed to create page config\" });\n    }\n  });\n\n  app.put(\"/api/admin/pages/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const configData = insertPageConfigSchema.parse(req.body);\n      const config = await storage.updatePageConfig(id, configData);\n      res.json({ success: true, config });\n    } catch (error) {\n      console.error(\"Error updating page config:\", error);\n      res.status(500).json({ error: \"Failed to update page config\" });\n    }\n  });\n\n  app.delete(\"/api/admin/pages/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const success = await storage.deletePageConfig(id);\n      res.json({ success });\n    } catch (error) {\n      console.error(\"Error deleting page config:\", error);\n      res.status(500).json({ error: \"Failed to delete page config\" });\n    }\n  });\n\n  app.post(\"/api/admin/pages/upsert\", async (req, res) => {\n    try {\n      const configData = insertPageConfigSchema.parse(req.body);\n      const config = await storage.upsertPageConfig(configData);\n      res.json({ success: true, config });\n    } catch (error) {\n      console.error(\"Error upserting page config:\", error);\n      res.status(500).json({ error: \"Failed to upsert page config\" });\n    }\n  });\n\n  // API endpoint to get page configurations for frontend rendering\n  app.get(\"/api/page-config/:page\", async (req, res) => {\n    try {\n      const { page } = req.params;\n      const configs = await storage.getPageConfigs(page);\n      \n      // Transform configs into a structured object for easier frontend use\n      const structuredConfigs: Record<string, Record<string, any>> = {};\n      \n      configs.forEach(config => {\n        if (!structuredConfigs[config.section]) {\n          structuredConfigs[config.section] = {};\n        }\n        structuredConfigs[config.section][config.element] = {\n          value: config.value,\n          type: config.type,\n          metadata: config.metadata ? JSON.parse(config.metadata) : null\n        };\n      });\n      \n      res.json({ configs: structuredConfigs });\n    } catch (error) {\n      console.error(\"Error fetching page config:\", error);\n      res.status(500).json({ error: \"Failed to fetch page config\" });\n    }\n  });\n\n  // Configure multer for file uploads\n  const upload = multer({ \n    storage: multer.memoryStorage(),\n    limits: { fileSize: 10 * 1024 * 1024 } // 10MB limit\n  });\n\n  // Visual Editor API routes\n  app.get(\"/api/editor/page/:route\", getPageContent);\n  app.post(\"/api/editor/page\", savePageContentEndpoint);\n  \n  // Media Manager API routes\n  app.get(\"/api/media/index\", getMediaIndex);\n  app.get(\"/api/media/folders\", getMediaFolders);\n  app.post(\"/api/media/sync\", syncGlobalImages);\n  app.post(\"/api/media/upload\", upload.array('files'), uploadMediaFiles);\n  app.delete(\"/api/media/files\", deleteMediaFiles);\n\n  const httpServer = createServer(app);\n\n  return httpServer;\n}\n","size_bytes":41719},"server/storage.ts":{"content":"import { type User, type InsertUser, type Contact, type InsertContact, type Product, type InsertProduct, type News, type InsertNews, type Slide, type InsertSlide, type PageConfig, type InsertPageConfig, users, contacts, products, news, slides, pageConfigs } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\nimport { db } from \"./db\";\nimport { eq, desc, and } from \"drizzle-orm\";\n\n// modify the interface with any CRUD methods\n// you might need\n\nexport interface IStorage {\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  createContact(contact: InsertContact): Promise<Contact>;\n  getContacts(): Promise<Contact[]>;\n  getAllContacts(): Promise<Contact[]>;\n  getFeaturedProducts(): Promise<Product[]>;\n  getAllProducts(): Promise<Product[]>;\n  updateProduct(id: string, product: InsertProduct): Promise<Product>;\n  deleteProduct(id: string): Promise<boolean>;\n  getRecentNews(): Promise<News[]>;\n  getAllNews(): Promise<News[]>;\n  updateNews(id: string, news: InsertNews): Promise<News>;\n  deleteNews(id: string): Promise<boolean>;\n  createProduct(product: InsertProduct): Promise<Product>;\n  createNews(news: InsertNews): Promise<News>;\n  getSlides(): Promise<Slide[]>;\n  createSlide(slide: InsertSlide): Promise<Slide>;\n  updateSlide(id: string, slide: InsertSlide): Promise<Slide>;\n  deleteSlide(id: string): Promise<boolean>;\n  getPageConfigs(page?: string): Promise<PageConfig[]>;\n  getPageConfig(page: string, section: string, element: string): Promise<PageConfig | undefined>;\n  createPageConfig(config: InsertPageConfig): Promise<PageConfig>;\n  updatePageConfig(id: string, config: InsertPageConfig): Promise<PageConfig>;\n  deletePageConfig(id: string): Promise<boolean>;\n  upsertPageConfig(config: InsertPageConfig): Promise<PageConfig>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n  private contacts: Map<string, Contact>;\n  private products: Map<string, Product>;\n  private news: Map<string, News>;\n  private slides: Map<string, Slide>;\n  private pageConfigs: Map<string, PageConfig>;\n\n  constructor() {\n    this.users = new Map();\n    this.contacts = new Map();\n    this.products = new Map();\n    this.news = new Map();\n    this.slides = new Map();\n    this.pageConfigs = new Map();\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { ...insertUser, id };\n    this.users.set(id, user);\n    return user;\n  }\n\n  async createContact(insertContact: InsertContact): Promise<Contact> {\n    const id = randomUUID();\n    const contact: Contact = { \n      ...insertContact, \n      id, \n      createdAt: new Date(),\n      telefone: insertContact.telefone ?? null,\n      empresa: insertContact.empresa ?? null,\n      ficheiros: insertContact.ficheiros ?? null\n    };\n    this.contacts.set(id, contact);\n    return contact;\n  }\n\n  async getContacts(): Promise<Contact[]> {\n    return Array.from(this.contacts.values());\n  }\n\n  async getAllContacts(): Promise<Contact[]> {\n    return Array.from(this.contacts.values()).sort((a, b) => \n      new Date(b.createdAt || 0).getTime() - new Date(a.createdAt || 0).getTime()\n    );\n  }\n\n  async getFeaturedProducts(): Promise<Product[]> {\n    return Array.from(this.products.values())\n      .filter(product => product.destaque)\n      .sort((a, b) => new Date(b.createdAt || 0).getTime() - new Date(a.createdAt || 0).getTime());\n  }\n\n  async getAllProducts(): Promise<Product[]> {\n    return Array.from(this.products.values())\n      .sort((a, b) => new Date(b.createdAt || 0).getTime() - new Date(a.createdAt || 0).getTime());\n  }\n\n  async updateProduct(id: string, product: InsertProduct): Promise<Product> {\n    const existingProduct = this.products.get(id);\n    if (!existingProduct) {\n      throw new Error(`Product with id ${id} not found`);\n    }\n    \n    const updatedProduct: Product = {\n      ...existingProduct,\n      ...product,\n      id,\n      destaque: product.destaque ?? existingProduct.destaque\n    };\n    \n    this.products.set(id, updatedProduct);\n    return updatedProduct;\n  }\n\n  async deleteProduct(id: string): Promise<boolean> {\n    return this.products.delete(id);\n  }\n\n  async getRecentNews(): Promise<News[]> {\n    return Array.from(this.news.values())\n      .sort((a, b) => new Date(b.data || 0).getTime() - new Date(a.data || 0).getTime())\n      .slice(0, 6);\n  }\n\n  async getAllNews(): Promise<News[]> {\n    return Array.from(this.news.values())\n      .sort((a, b) => new Date(b.data || 0).getTime() - new Date(a.data || 0).getTime());\n  }\n\n  async updateNews(id: string, newsItem: InsertNews): Promise<News> {\n    const existingNews = this.news.get(id);\n    if (!existingNews) {\n      throw new Error(`News with id ${id} not found`);\n    }\n    \n    const updatedNews: News = {\n      ...existingNews,\n      ...newsItem,\n      id,\n      data: newsItem.data ?? existingNews.data\n    };\n    \n    this.news.set(id, updatedNews);\n    return updatedNews;\n  }\n\n  async deleteNews(id: string): Promise<boolean> {\n    return this.news.delete(id);\n  }\n\n  async createProduct(product: InsertProduct): Promise<Product> {\n    const id = randomUUID();\n    const newProduct: Product = { ...product, id, createdAt: new Date(), destaque: product.destaque ?? false };\n    this.products.set(id, newProduct);\n    return newProduct;\n  }\n\n  async createNews(newsItem: InsertNews): Promise<News> {\n    const id = randomUUID();\n    const newNews: News = { ...newsItem, id, createdAt: new Date(), data: newsItem.data ?? new Date() };\n    this.news.set(id, newNews);\n    return newNews;\n  }\n\n  async getSlides(): Promise<Slide[]> {\n    return Array.from(this.slides.values())\n      .filter(slide => slide.active)\n      .sort((a, b) => parseInt(a.order_position || \"1\") - parseInt(b.order_position || \"1\"));\n  }\n\n  async createSlide(slide: InsertSlide): Promise<Slide> {\n    const id = randomUUID();\n    const newSlide: Slide = { \n      ...slide, \n      id, \n      createdAt: new Date(),\n      order_position: slide.order_position ?? \"1\",\n      active: slide.active ?? true\n    };\n    this.slides.set(id, newSlide);\n    return newSlide;\n  }\n\n  async updateSlide(id: string, slide: InsertSlide): Promise<Slide> {\n    const existingSlide = this.slides.get(id);\n    if (!existingSlide) {\n      throw new Error(`Slide with id ${id} not found`);\n    }\n    \n    const updatedSlide: Slide = {\n      ...existingSlide,\n      ...slide,\n      id,\n      order_position: slide.order_position ?? existingSlide.order_position,\n      active: slide.active ?? existingSlide.active\n    };\n    \n    this.slides.set(id, updatedSlide);\n    return updatedSlide;\n  }\n\n  async deleteSlide(id: string): Promise<boolean> {\n    return this.slides.delete(id);\n  }\n\n  async getPageConfigs(page?: string): Promise<PageConfig[]> {\n    const configs = Array.from(this.pageConfigs.values());\n    return page ? configs.filter(config => config.page === page) : configs;\n  }\n\n  async getPageConfig(page: string, section: string, element: string): Promise<PageConfig | undefined> {\n    return Array.from(this.pageConfigs.values()).find(\n      config => config.page === page && config.section === section && config.element === element\n    );\n  }\n\n  async createPageConfig(config: InsertPageConfig): Promise<PageConfig> {\n    const id = randomUUID();\n    const newConfig: PageConfig = { \n      ...config, \n      id, \n      createdAt: new Date(),\n      updatedAt: new Date(),\n      defaultValue: config.defaultValue ?? null,\n      metadata: config.metadata ?? null\n    };\n    this.pageConfigs.set(id, newConfig);\n    return newConfig;\n  }\n\n  async updatePageConfig(id: string, config: InsertPageConfig): Promise<PageConfig> {\n    const existingConfig = this.pageConfigs.get(id);\n    if (!existingConfig) {\n      throw new Error(`PageConfig with id ${id} not found`);\n    }\n    \n    const updatedConfig: PageConfig = {\n      ...existingConfig,\n      ...config,\n      id,\n      updatedAt: new Date(),\n      defaultValue: config.defaultValue ?? existingConfig.defaultValue,\n      metadata: config.metadata ?? existingConfig.metadata\n    };\n    \n    this.pageConfigs.set(id, updatedConfig);\n    return updatedConfig;\n  }\n\n  async deletePageConfig(id: string): Promise<boolean> {\n    return this.pageConfigs.delete(id);\n  }\n\n  async upsertPageConfig(config: InsertPageConfig): Promise<PageConfig> {\n    const existingConfig = await this.getPageConfig(config.page, config.section, config.element);\n    \n    if (existingConfig) {\n      return await this.updatePageConfig(existingConfig.id, config);\n    } else {\n      return await this.createPageConfig(config);\n    }\n  }\n}\n\nexport class DatabaseStorage implements IStorage {\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.username, username));\n    return user;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const [user] = await db.insert(users).values(insertUser).returning();\n    return user;\n  }\n\n  async createContact(insertContact: InsertContact): Promise<Contact> {\n    const [contact] = await db.insert(contacts).values(insertContact).returning();\n    return contact;\n  }\n\n  async getContacts(): Promise<Contact[]> {\n    return await db.select().from(contacts);\n  }\n\n  async getAllContacts(): Promise<Contact[]> {\n    return await db.select().from(contacts).orderBy(desc(contacts.createdAt));\n  }\n\n  async getFeaturedProducts(): Promise<Product[]> {\n    return await db.select().from(products).where(eq(products.destaque, true)).orderBy(desc(products.createdAt));\n  }\n\n  async getRecentNews(): Promise<News[]> {\n    return await db.select().from(news).orderBy(desc(news.data)).limit(3);\n  }\n\n  async createProduct(insertProduct: InsertProduct): Promise<Product> {\n    const [product] = await db.insert(products).values(insertProduct).returning();\n    return product;\n  }\n\n  async createNews(insertNews: InsertNews): Promise<News> {\n    const [newsItem] = await db.insert(news).values(insertNews).returning();\n    return newsItem;\n  }\n\n  async getAllProducts(): Promise<Product[]> {\n    return await db.select().from(products).orderBy(desc(products.createdAt));\n  }\n\n  async updateProduct(id: string, product: InsertProduct): Promise<Product> {\n    const [updatedProduct] = await db.update(products).set(product).where(eq(products.id, id)).returning();\n    return updatedProduct;\n  }\n\n  async deleteProduct(id: string): Promise<boolean> {\n    const result = await db.delete(products).where(eq(products.id, id));\n    return result.rowCount !== null && result.rowCount > 0;\n  }\n\n  async getAllNews(): Promise<News[]> {\n    return await db.select().from(news).orderBy(desc(news.data));\n  }\n\n  async updateNews(id: string, newsData: InsertNews): Promise<News> {\n    const [updatedNews] = await db.update(news).set(newsData).where(eq(news.id, id)).returning();\n    return updatedNews;\n  }\n\n  async deleteNews(id: string): Promise<boolean> {\n    const result = await db.delete(news).where(eq(news.id, id));\n    return result.rowCount !== null && result.rowCount > 0;\n  }\n\n  async getSlides(): Promise<Slide[]> {\n    return await db.select().from(slides).where(eq(slides.active, true)).orderBy(slides.order_position);\n  }\n\n  async createSlide(slide: InsertSlide): Promise<Slide> {\n    const [newSlide] = await db.insert(slides).values(slide).returning();\n    return newSlide;\n  }\n\n  async updateSlide(id: string, slide: InsertSlide): Promise<Slide> {\n    const [updatedSlide] = await db.update(slides).set(slide).where(eq(slides.id, id)).returning();\n    return updatedSlide;\n  }\n\n  async deleteSlide(id: string): Promise<boolean> {\n    const result = await db.delete(slides).where(eq(slides.id, id));\n    return result.rowCount !== null && result.rowCount > 0;\n  }\n\n  async getPageConfigs(page?: string): Promise<PageConfig[]> {\n    if (page) {\n      return await db.select().from(pageConfigs).where(eq(pageConfigs.page, page));\n    }\n    return await db.select().from(pageConfigs);\n  }\n\n  async getPageConfig(page: string, section: string, element: string): Promise<PageConfig | undefined> {\n    const [config] = await db.select().from(pageConfigs)\n      .where(and(\n        eq(pageConfigs.page, page),\n        eq(pageConfigs.section, section),\n        eq(pageConfigs.element, element)\n      ));\n    return config;\n  }\n\n  async createPageConfig(config: InsertPageConfig): Promise<PageConfig> {\n    const [newConfig] = await db.insert(pageConfigs).values(config).returning();\n    return newConfig;\n  }\n\n  async updatePageConfig(id: string, config: InsertPageConfig): Promise<PageConfig> {\n    const [updatedConfig] = await db.update(pageConfigs).set({\n      ...config,\n      updatedAt: new Date()\n    }).where(eq(pageConfigs.id, id)).returning();\n    return updatedConfig;\n  }\n\n  async deletePageConfig(id: string): Promise<boolean> {\n    const result = await db.delete(pageConfigs).where(eq(pageConfigs.id, id));\n    return result.rowCount !== null && result.rowCount > 0;\n  }\n\n  async upsertPageConfig(config: InsertPageConfig): Promise<PageConfig> {\n    const existingConfig = await this.getPageConfig(config.page, config.section, config.element);\n    \n    if (existingConfig) {\n      return await this.updatePageConfig(existingConfig.id, config);\n    } else {\n      return await this.createPageConfig(config);\n    }\n  }\n}\n\n// Use database storage for production\nexport const storage = new DatabaseStorage();\n","size_bytes":13927},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/cart-schema.ts":{"content":"import { z } from \"zod\";\n\n// Base cart item schema\nconst baseCartItemSchema = z.object({\n  id: z.string(),\n  quantity: z.number().min(1).default(1),\n  createdAt: z.date().default(() => new Date())\n});\n\n// Cart item schema for wallpaper textures\nexport const wallpaperCartItemSchema = baseCartItemSchema.extend({\n  type: z.literal('papel-parede'),\n  textureName: z.string(),\n  textureImage: z.string(),\n  acabamento: z.enum(['brilho', 'mate']),\n  laminacao: z.boolean(),\n  tipoCola: z.enum(['com-cola', 'sem-cola']).default('com-cola'),\n  largura: z.number().min(0.01).default(0),\n  altura: z.number().min(0.01).default(0),\n  larguraCm: z.number().min(1).default(0),\n  alturaCm: z.number().min(1).default(0),\n  area: z.number().min(0.01),\n  precoBase: z.number(),\n  precoTotal: z.number(),\n});\n\n// Cart item schema for canvas art\nexport const canvasCartItemSchema = baseCartItemSchema.extend({\n  type: z.literal('quadros-canvas'),\n  canvasName: z.string(),\n  canvasImage: z.string(),\n  tamanho: z.enum(['20x30', '30x40', '40x50', '50x70', '60x80', '70x100', '80x120', '100x150']),\n  larguraCm: z.number().min(1),\n  alturaCm: z.number().min(1),\n  area: z.number().min(0.01),\n  precoBase: z.number(),\n  precoTotal: z.number(),\n});\n\n// Union of all cart item types\nexport const cartItemSchema = z.discriminatedUnion('type', [\n  wallpaperCartItemSchema,\n  canvasCartItemSchema\n]);\n\nexport const cartSchema = z.object({\n  items: z.array(cartItemSchema),\n  total: z.number(),\n  updatedAt: z.date().default(() => new Date())\n});\n\nexport type CartItem = z.infer<typeof cartItemSchema>;\nexport type WallpaperCartItem = z.infer<typeof wallpaperCartItemSchema>;\nexport type CanvasCartItem = z.infer<typeof canvasCartItemSchema>;\nexport type Cart = z.infer<typeof cartSchema>;\n\n// Create cart item insert schemas\nexport const createWallpaperCartItemSchema = wallpaperCartItemSchema.omit({\n  id: true,\n  createdAt: true\n});\n\nexport const createCanvasCartItemSchema = canvasCartItemSchema.omit({\n  id: true,\n  createdAt: true\n});\n\nexport const createCartItemSchema = z.discriminatedUnion('type', [\n  createWallpaperCartItemSchema,\n  createCanvasCartItemSchema\n]);\n\nexport type CreateCartItem = z.infer<typeof createCartItemSchema>;\nexport type CreateWallpaperCartItem = z.infer<typeof createWallpaperCartItemSchema>;\nexport type CreateCanvasCartItem = z.infer<typeof createCanvasCartItemSchema>;","size_bytes":2380},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp, decimal, boolean } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n});\n\nexport const contacts = pgTable(\"contacts\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  nome: text(\"nome\").notNull(),\n  email: text(\"email\").notNull(),\n  telefone: text(\"telefone\"),\n  empresa: text(\"empresa\"),\n  mensagem: text(\"mensagem\").notNull(),\n  ficheiros: text(\"ficheiros\").array().default([]),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const products = pgTable(\"products\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  titulo: text(\"titulo\").notNull(),\n  descricao: text(\"descricao\").notNull(),\n  preco: text(\"preco\").notNull(),\n  imagem: text(\"imagem\").notNull(),\n  categoria: text(\"categoria\").notNull(),\n  destaque: boolean(\"destaque\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const news = pgTable(\"news\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  titulo: text(\"titulo\").notNull(),\n  descricao: text(\"descricao\").notNull(),\n  categoria: text(\"categoria\").notNull(),\n  imagem: text(\"imagem\").notNull(),\n  data: timestamp(\"data\").defaultNow(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const slides = pgTable(\"slides\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  image: text(\"image\").notNull(),\n  title: text(\"title\").notNull(),\n  text: text(\"text\").notNull(),\n  order_position: text(\"order_position\").default(\"1\"),\n  active: boolean(\"active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const pageConfigs = pgTable(\"page_configs\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  page: text(\"page\").notNull(), // home, about, services, portfolio, contact, etc.\n  section: text(\"section\").notNull(), // hero, features, about, etc.\n  element: text(\"element\").notNull(), // title, subtitle, description, image, etc.\n  type: text(\"type\").notNull(), // text, color, size, image, number\n  value: text(\"value\").notNull(),\n  defaultValue: text(\"default_value\"),\n  metadata: text(\"metadata\"), // JSON string for additional config like font-size units, color format, etc.\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n});\n\nexport const insertContactSchema = createInsertSchema(contacts).pick({\n  nome: true,\n  email: true,\n  telefone: true,\n  empresa: true,\n  mensagem: true,\n  ficheiros: true,\n}).extend({\n  email: z.string().email(\"Email inválido\"),\n  nome: z.string().min(2, \"Nome deve ter pelo menos 2 caracteres\"),\n  mensagem: z.string().min(10, \"Mensagem deve ter pelo menos 10 caracteres\"),\n  telefone: z.string().optional(),\n  empresa: z.string().optional(),\n  ficheiros: z.array(z.string()).optional().default([]),\n});\n\nexport const insertProductSchema = createInsertSchema(products).pick({\n  titulo: true,\n  descricao: true,\n  preco: true,\n  imagem: true,\n  categoria: true,\n  destaque: true,\n});\n\nexport const insertNewsSchema = createInsertSchema(news).pick({\n  titulo: true,\n  descricao: true,\n  categoria: true,\n  imagem: true,\n  data: true,\n});\n\nexport const insertSlideSchema = createInsertSchema(slides).pick({\n  image: true,\n  title: true,\n  text: true,\n  order_position: true,\n  active: true,\n});\n\nexport const insertPageConfigSchema = createInsertSchema(pageConfigs).pick({\n  page: true,\n  section: true,\n  element: true,\n  type: true,\n  value: true,\n  defaultValue: true,\n  metadata: true,\n}).extend({\n  page: z.string().min(1, \"Página é obrigatória\"),\n  section: z.string().min(1, \"Secção é obrigatória\"),\n  element: z.string().min(1, \"Elemento é obrigatório\"),\n  type: z.enum([\"text\", \"color\", \"size\", \"image\", \"number\"], {\n    errorMap: () => ({ message: \"Tipo deve ser: text, color, size, image ou number\" })\n  }),\n  value: z.string().min(1, \"Valor é obrigatório\"),\n  defaultValue: z.string().optional(),\n  metadata: z.string().optional(),\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type InsertContact = z.infer<typeof insertContactSchema>;\nexport type Contact = typeof contacts.$inferSelect;\nexport type InsertProduct = z.infer<typeof insertProductSchema>;\nexport type Product = typeof products.$inferSelect;\nexport type InsertNews = z.infer<typeof insertNewsSchema>;\nexport type News = typeof news.$inferSelect;\nexport type InsertSlide = z.infer<typeof insertSlideSchema>;\nexport type Slide = typeof slides.$inferSelect;\nexport type InsertPageConfig = z.infer<typeof insertPageConfigSchema>;\nexport type PageConfig = typeof pageConfigs.$inferSelect;\n","size_bytes":5066},"client/src/App.tsx":{"content":"import { Switch, Route, useLocation } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { useScrollToTop } from \"@/hooks/use-scroll-to-top\";\nimport SEO from \"@/components/seo\";\nimport StructuredData from \"@/components/structured-data\";\nimport WhatsAppFAB from \"@/components/whatsapp-fab\";\nimport PerformanceOptimizer from \"@/components/performance-optimizer\";\nimport PerformancePreloader from \"@/components/performance-preloader\";\nimport { useLazyImages } from \"@/hooks/use-lazy-images\";\nimport NotFound from \"@/pages/not-found\";\nimport Home from \"@/pages/home\";\nimport Contactos from \"@/pages/contactos\";\nimport Sobre from \"@/pages/sobre\";\nimport Loja from \"@/pages/loja\";\nimport LojaPapelParede from \"@/pages/loja-papel-parede\";\nimport LojaQuadrosCanvas from \"@/pages/loja-quadros-canvas\";\nimport LojaCanvasDetalhes from \"@/pages/loja-canvas-detalhes\";\nimport LojaTexturaDetalhes from \"@/pages/loja-textura-detalhes\";\nimport Carrinho from \"@/pages/carrinho\";\nimport AdminTexturas from \"@/pages/admin-texturas\";\nimport Portfolio from \"@/pages/portfolio\";\nimport Servicos from \"@/pages/servicos\";\nimport ServicoDesignGrafico from \"@/pages/servico-design-grafico\";\nimport ServicoImpressaoDigital from \"@/pages/servico-impressao-digital\";\nimport ServicoPapelParede from \"@/pages/servico-papel-parede\";\nimport ServicoTelasArtisticas from \"@/pages/servico-telas-artisticas\";\nimport ServicoAutocolantes from \"@/pages/servico-autocolantes\";\nimport ServicoDecoracaoViaturas from \"@/pages/servico-decoracao-viaturas\";\nimport ServicoEspacosComerciais from \"@/pages/servico-espacos-comerciais\";\nimport ServicoPeliculasProtecaoSolar from \"@/pages/servico-peliculas-protecao-solar\";\nimport Checkout from \"@/pages/checkout\";\nimport PedidoConfirmado from \"@/pages/pedido-confirmado\";\nimport InstrucoesPagamento from \"@/pages/instrucoes-pagamento\";\nimport TesteCores from \"@/pages/teste-cores\";\nimport Noticias from \"@/pages/noticias\";\nimport PoliticaPrivacidade from \"@/pages/politica-privacidade\";\nimport TermosCondicoes from \"@/pages/termos-condicoes\";\nimport PoliticaCookies from \"@/pages/politica-cookies\";\nimport AvisoLegal from \"@/pages/aviso-legal\";\nimport ComoAplicarPapelParede from \"@/pages/como-aplicar-papel-parede\";\nimport AdminContactos from \"@/pages/admin-contactos\";\nimport AdminPortfolio from \"@/pages/admin-portfolio\";\nimport AdminSlider from \"@/pages/admin-slider\";\nimport AdminProdutos from \"@/pages/admin-produtos\";\nimport AdminNoticias from \"@/pages/admin-noticias\";\nimport AdminDashboard from \"@/pages/admin-dashboard\";\nimport AdminLoja from \"@/pages/admin-loja\";\nimport AdminPages from \"@/pages/admin-pages\";\nimport AdminEditor from \"@/pages/admin-editor\";\nimport AdminMedia from \"@/pages/admin-media\";\nimport ServicoPeliculaSolar from \"@/pages/servico-pelicula-solar\";\nimport DemoInterativo from \"@/pages/demo-interativo\";\n// import CustomCursor from \"@/components/custom-cursor\";\n// import ScrollAnimations from \"@/components/scroll-animations\";\n\nimport React, { useEffect } from \"react\";\n\n// Declaração global para o Google Analytics\ndeclare global {\n  interface Window {\n    dataLayer: any[];\n    gtag: (...args: any[]) => void;\n  }\n}\n\nfunction Router() {\n  useScrollToTop();\n  const [location] = useLocation();\n\n  // Track page views when routes change\n  useEffect(() => {\n    console.log('📍 Mudança de página para:', location);\n    if (typeof window !== 'undefined' && window.gtag) {\n      console.log('📊 Enviando pageview para GA4:', location);\n      window.gtag('config', 'G-S51RFB39HK', {\n        page_path: location\n      });\n      // Enviar evento adicional de page_view\n      window.gtag('event', 'page_view', {\n        page_title: document.title,\n        page_location: window.location.href,\n        page_path: location\n      });\n    } else {\n      console.warn('⚠️ window.gtag não disponível ainda');\n    }\n  }, [location]);\n\n  return (\n    <>\n      <SEO />\n      <StructuredData />\n      <Switch>\n        <Route path=\"/\" component={Home} />\n        <Route path=\"/sobre\" component={Sobre} />\n        <Route path=\"/servicos\" component={Servicos} />\n        <Route path=\"/servico-design-grafico\" component={ServicoDesignGrafico} />\n        <Route path=\"/servico-impressao-digital\" component={ServicoImpressaoDigital} />\n        <Route path=\"/servico-papel-parede\" component={ServicoPapelParede} />\n        <Route path=\"/servico-telas-artisticas\" component={ServicoTelasArtisticas} />\n        <Route path=\"/servico-autocolantes\" component={ServicoAutocolantes} />\n        <Route path=\"/servico-decoracao-viaturas\" component={ServicoDecoracaoViaturas} />\n        <Route path=\"/servico-espacos-comerciais\" component={ServicoEspacosComerciais} />\n        <Route path=\"/servico-pelicula-solar\" component={ServicoPeliculaSolar} />\n        <Route path=\"/servico-peliculas-protecao-solar\" component={ServicoPeliculasProtecaoSolar} />\n        <Route path=\"/checkout\" component={Checkout} />\n        <Route path=\"/pedido-confirmado\" component={PedidoConfirmado} />\n        <Route path=\"/instrucoes-pagamento\" component={InstrucoesPagamento} />\n        <Route path=\"/teste-cores\" component={TesteCores} />\n        <Route path=\"/portfolio\" component={Portfolio} />\n        <Route path=\"/loja\" component={Loja} />\n        <Route path=\"/loja/papel-parede\" component={LojaPapelParede} />\n        <Route path=\"/loja/quadros-canvas\" component={LojaQuadrosCanvas} />\n        <Route path=\"/loja/quadros-canvas/categoria/:categoria\" component={LojaCanvasDetalhes} />\n        <Route path=\"/loja/papel-parede/textura/:textura\" component={LojaTexturaDetalhes} />\n        <Route path=\"/como-aplicar-papel-parede\" component={ComoAplicarPapelParede} />\n        <Route path=\"/carrinho\" component={Carrinho} />\n        <Route path=\"/admin/texturas\" component={AdminTexturas} />\n        <Route path=\"/admin/contactos\" component={AdminContactos} />\n        <Route path=\"/admin/portfolio\" component={AdminPortfolio} />\n        <Route path=\"/admin\" component={AdminDashboard} />\n        <Route path=\"/admin/slider\" component={AdminSlider} />\n        <Route path=\"/admin/pages\" component={AdminPages} />\n        <Route path=\"/admin/produtos\" component={AdminProdutos} />\n        <Route path=\"/admin/noticias\" component={AdminNoticias} />\n        <Route path=\"/admin/loja\" component={AdminLoja} />\n        <Route path=\"/admin/editor\" component={AdminEditor} />\n        <Route path=\"/admin/media\" component={AdminMedia} />\n        <Route path=\"/noticias\" component={Noticias} />\n        <Route path=\"/contactos\" component={Contactos} />\n        <Route path=\"/politica-privacidade\" component={PoliticaPrivacidade} />\n        <Route path=\"/termos-condicoes\" component={TermosCondicoes} />\n        <Route path=\"/politica-cookies\" component={PoliticaCookies} />\n        <Route path=\"/aviso-legal\" component={AvisoLegal} />\n        {/* Demo Interativo */}\n        <Route path=\"/demo-interativo\" component={DemoInterativo} />\n        \n        <Route component={NotFound} />\n      </Switch>\n    </>\n  );\n}\n\nfunction App() {\n  useLazyImages();\n\n  // Initialize Google Analytics when app loads\n  useEffect(() => {\n    console.log('🔍 Inicializando Google Analytics...');\n    \n    // Add Google Analytics script to the head\n    const script1 = document.createElement('script');\n    script1.async = true;\n    script1.src = 'https://www.googletagmanager.com/gtag/js?id=G-S51RFB39HK';\n    script1.onload = () => {\n      console.log('✅ Script GA4 carregado com sucesso');\n    };\n    script1.onerror = () => {\n      console.error('❌ Erro ao carregar script GA4');\n    };\n    document.head.appendChild(script1);\n\n    // Initialize gtag with debug\n    const script2 = document.createElement('script');\n    script2.textContent = `\n      window.dataLayer = window.dataLayer || [];\n      function gtag(){\n        console.log('📊 GA4 Event:', arguments);\n        dataLayer.push(arguments);\n      }\n      gtag('js', new Date());\n      gtag('config', 'G-S51RFB39HK', {\n        'debug_mode': true,\n        'send_page_view': true\n      });\n      console.log('🎯 GA4 configurado para G-S51RFB39HK');\n    `;\n    document.head.appendChild(script2);\n    \n    // Make gtag globally available\n    window.dataLayer = window.dataLayer || [];\n    window.gtag = function() {\n      console.log('📊 GA4 Global Event:', arguments);\n      window.dataLayer.push(arguments);\n    };\n  }, []);\n\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <PerformanceOptimizer />\n        <PerformancePreloader />\n        <Toaster />\n        <Router />\n        <WhatsAppFAB />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;","size_bytes":8849},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&family=Poppins:wght@400;500;600;700;800&display=swap');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: var(--brand-dark);\n  --foreground: var(--brand-white);\n  --card: var(--brand-dark);\n  --card-foreground: var(--brand-white);\n  --popover: var(--brand-dark);\n  --popover-foreground: var(--brand-white);\n  --primary: var(--brand-yellow);\n  --primary-foreground: var(--brand-dark);\n  --secondary: var(--brand-red);\n  --secondary-foreground: var(--brand-white);\n  --muted: hsl(0, 0%, 95%);\n  --muted-foreground: hsl(0, 0%, 40%);\n  --accent: var(--brand-turquoise);\n  --accent-foreground: var(--brand-white);\n  --destructive: var(--brand-red);\n  --destructive-foreground: var(--brand-white);\n  --border: hsl(0, 0%, 90%);\n  --input: hsl(0, 0%, 98%);\n  --ring: var(--brand-yellow);\n  --chart-1: var(--brand-yellow);\n  --chart-2: var(--brand-red);\n  --chart-3: var(--brand-turquoise);\n  --chart-4: var(--brand-green);\n  --chart-5: var(--brand-dark-red);\n  --sidebar: hsl(0, 0%, 0%);\n  --sidebar-foreground: hsl(0, 0%, 100%);\n  --sidebar-primary: hsl(51, 100%, 50%);\n  --sidebar-primary-foreground: hsl(0, 0%, 0%);\n  --sidebar-accent: hsl(0, 0%, 0%);\n  --sidebar-accent-foreground: hsl(0, 0%, 100%);\n  --sidebar-border: hsl(174, 72%, 56%);\n  --sidebar-ring: hsl(51, 100%, 50%);\n  --font-sans: 'Inter', system-ui, sans-serif;\n  --font-heading: 'Poppins', system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.75rem;\n\n  /* DOMREALCE Brand Colors - Extraídas do logótipo */\n  --brand-yellow: hsl(50, 100%, 60%);\n  /* Amarelo do \"DOM\" */\n  --brand-red: hsl(0, 85%, 50%);\n  /* Vermelho do \"REALCE\" */\n  --brand-turquoise: hsl(180, 70%, 50%);\n  /* Azul turquesa do círculo */\n  --brand-green: hsl(120, 60%, 40%);\n  /* Verde do círculo */\n  --brand-dark-red: hsl(0, 70%, 30%);\n  /* Vermelho escuro do círculo */\n  --brand-dark: hsl(0, 0%, 0%);\n  /* Preto para texto */\n  --brand-white: hsl(0, 0%, 100%);\n  /* Branco para fundos */\n\n  /* Alias para manter compatibilidade com código existente */\n  --brand-coral: var(--brand-red);\n  /* Coral = Vermelho */\n  --brand-blue: var(--brand-turquoise);\n  /* Azul = Turquesa */\n}\n\n/* Ajuste de cores para Toast (força texto preto) */\n[data-sonner-toast] {\n  background-color: #ffffff !important;\n  border: 2px solid #000000 !important;\n  color: #000000 !important;\n}\n\n[data-sonner-toast] [data-title],\n[data-sonner-toast] [data-description] {\n  color: #000000 !important;\n}\n\n.dark {\n  --background: var(--brand-dark);\n  --foreground: var(--brand-white);\n  --card: hsl(0, 0%, 8%);\n  --card-foreground: var(--brand-white);\n  --popover: hsl(0, 0%, 8%);\n  --popover-foreground: var(--brand-white);\n  --primary: var(--brand-yellow);\n  --primary-foreground: var(--brand-dark);\n  --secondary: var(--brand-red);\n  --secondary-foreground: var(--brand-white);\n  --muted: hsl(0, 0%, 15%);\n  --muted-foreground: hsl(0, 0%, 65%);\n  --accent: var(--brand-turquoise);\n  --accent-foreground: var(--brand-dark);\n  --destructive: var(--brand-red);\n  --destructive-foreground: var(--brand-white);\n  --border: hsl(0, 0%, 20%);\n  --input: hsl(0, 0%, 15%);\n  --ring: var(--brand-yellow);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased;\n    font-family: var(--font-sans);\n    background: transparent;\n    color: white;\n  }\n\n  h1,\n  h2,\n  h3,\n  h4,\n  h5,\n  h6 {\n    font-family: var(--font-heading);\n  }\n}\n\n@layer utilities {\n  .gradient-border {\n    background: linear-gradient(45deg, var(--brand-yellow), var(--brand-red), var(--brand-turquoise), var(--brand-green));\n    padding: 2px;\n    border-radius: 12px;\n  }\n\n  .gradient-border-inner {\n    background: var(--brand-dark);\n    border-radius: 10px;\n    height: 100%;\n  }\n\n  .hero-gradient {\n    background: linear-gradient(135deg,\n        hsla(50, 100%, 60%, 0.1) 0%,\n        hsla(0, 85%, 50%, 0.1) 25%,\n        hsla(180, 70%, 50%, 0.1) 50%,\n        hsla(120, 60%, 40%, 0.1) 100%);\n  }\n\n  /* Cores do logótipo DOMREALCE */\n  .text-brand-yellow {\n    color: var(--brand-yellow);\n  }\n\n  .text-brand-red {\n    color: var(--brand-red);\n  }\n\n  .text-brand-turquoise {\n    color: var(--brand-turquoise);\n  }\n\n  .text-brand-green {\n    color: var(--brand-green);\n  }\n\n  .text-brand-dark-red {\n    color: var(--brand-dark-red);\n  }\n\n  .text-brand-dark {\n    color: var(--brand-dark);\n  }\n\n  .text-brand-white {\n    color: var(--brand-white);\n  }\n\n  /* Compatibilidade com código existente */\n  .text-brand-coral {\n    color: var(--brand-coral);\n  }\n\n  .text-brand-blue {\n    color: var(--brand-blue);\n  }\n\n  .bg-brand-yellow {\n    background-color: var(--brand-yellow);\n  }\n\n  .bg-brand-red {\n    background-color: var(--brand-red);\n  }\n\n  .bg-brand-turquoise {\n    background-color: var(--brand-turquoise);\n  }\n\n  .bg-brand-green {\n    background-color: var(--brand-green);\n  }\n\n  .bg-brand-dark-red {\n    background-color: var(--brand-dark-red);\n  }\n\n  .bg-brand-dark {\n    background-color: var(--brand-dark);\n  }\n\n  .bg-brand-white {\n    background-color: var(--brand-white);\n  }\n\n  /* Compatibilidade com código existente */\n  .bg-brand-coral {\n    background-color: var(--brand-coral);\n  }\n\n  .bg-brand-blue {\n    background-color: var(--brand-blue);\n  }\n\n  .border-brand-yellow {\n    border-color: var(--brand-yellow);\n  }\n\n  .border-brand-red {\n    border-color: var(--brand-red);\n  }\n\n  .border-brand-turquoise {\n    border-color: var(--brand-turquoise);\n  }\n\n  .border-brand-green {\n    border-color: var(--brand-green);\n  }\n\n  .border-brand-dark-red {\n    border-color: var(--brand-dark-red);\n  }\n\n  .border-brand-dark {\n    border-color: var(--brand-dark);\n  }\n\n  .border-brand-white {\n    border-color: var(--brand-white);\n  }\n\n  /* Compatibilidade com código existente */\n  .border-brand-coral {\n    border-color: var(--brand-coral);\n  }\n\n  .border-brand-blue {\n    border-color: var(--brand-blue);\n  }\n\n  /* Gradientes usando as cores do logótipo */\n  .bg-gradient-logo {\n    background: linear-gradient(135deg, var(--brand-yellow), var(--brand-red), var(--brand-turquoise));\n  }\n\n  .bg-gradient-logo-hover:hover {\n    background: linear-gradient(135deg, var(--brand-red), var(--brand-turquoise), var(--brand-green));\n    transition: background 0.3s ease;\n  }\n}\n\n/* Advanced Animations */\n@keyframes fadeInUp {\n  from {\n    opacity: 0;\n    transform: translateY(30px);\n  }\n\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n@keyframes slideInRight {\n  from {\n    opacity: 0;\n    transform: translateX(50px);\n  }\n\n  to {\n    opacity: 1;\n    transform: translateX(0);\n  }\n}\n\n@keyframes slideInLeft {\n  from {\n    opacity: 0;\n    transform: translateX(-50px);\n  }\n\n  to {\n    opacity: 1;\n    transform: translateX(0);\n  }\n}\n\n@keyframes float {\n\n  0%,\n  100% {\n    transform: translateY(0px);\n  }\n\n  50% {\n    transform: translateY(-20px);\n  }\n}\n\n@keyframes float-slow {\n\n  0%,\n  100% {\n    transform: translateY(0px) rotate(0deg);\n  }\n\n  50% {\n    transform: translateY(-10px) rotate(3deg);\n  }\n}\n\n@keyframes glow {\n\n  0%,\n  100% {\n    box-shadow: 0 0 20px rgba(51, 217, 178, 0.3);\n  }\n\n  50% {\n    box-shadow: 0 0 40px rgba(51, 217, 178, 0.6);\n  }\n}\n\n@keyframes pulse-brand {\n\n  0%,\n  100% {\n    opacity: 1;\n  }\n\n  50% {\n    opacity: 0.7;\n  }\n}\n\n@keyframes scale-in {\n  from {\n    opacity: 0;\n    transform: scale(0.8);\n  }\n\n  to {\n    opacity: 1;\n    transform: scale(1);\n  }\n}\n\n@keyframes bounce-subtle {\n\n  0%,\n  100% {\n    transform: translateY(0);\n  }\n\n  50% {\n    transform: translateY(-5px);\n  }\n}\n\n/* Animation Classes */\n.animate-fadeInUp {\n  animation: fadeInUp 0.6s ease-out forwards;\n}\n\n.animate-slideInRight {\n  animation: slideInRight 0.8s ease-out forwards;\n}\n\n.animate-slideInLeft {\n  animation: slideInLeft 0.8s ease-out forwards;\n}\n\n.animate-float {\n  animation: float 3s ease-in-out infinite;\n}\n\n.animate-float-slow {\n  animation: float-slow 4s ease-in-out infinite;\n}\n\n.animate-glow {\n  animation: glow 2s ease-in-out infinite;\n}\n\n.animate-pulse-brand {\n  animation: pulse-brand 2s ease-in-out infinite;\n}\n\n.animate-scale-in {\n  animation: scale-in 0.5s ease-out forwards;\n}\n\n.animate-bounce-subtle {\n  animation: bounce-subtle 2s ease-in-out infinite;\n}\n\n/* WhatsApp FAB specific animations */\n.animate-whatsapp-pulse {\n  animation: whatsapp-pulse 2s ease-in-out infinite;\n}\n\n/* 3D Transform Effects */\n.transform-3d {\n  transform-style: preserve-3d;\n  transition: transform 0.3s ease;\n}\n\n.tilt-hover:hover {\n  transform: perspective(1000px) rotateX(5deg) rotateY(5deg) scale(1.02);\n}\n\n/* Mouse tracking effect */\n.mouse-track {\n  transition: transform 0.1s ease-out;\n}\n\n/* Parallax effects */\n.parallax-slow {\n  transition: transform 0.3s ease-out;\n}\n\n.parallax-fast {\n  transition: transform 0.2s ease-out;\n}\n\n/* Cursor visibility fixes */\n* {\n  cursor: inherit !important;\n}\n\nbody {\n  cursor: auto !important;\n}\n\n/* Cursor específico para elementos interativos */\nbutton,\na,\n[role=\"button\"],\n[onClick],\n.cursor-pointer {\n  cursor: pointer !important;\n}\n\n/* Cursor de texto para inputs */\ninput[type=\"text\"],\ninput[type=\"email\"],\ninput[type=\"tel\"],\ntextarea {\n  cursor: text !important;\n}\n\n/* Garante cursor visível em imagens clicáveis */\nimg[data-clickable],\n.hover-lift img,\n.group img {\n  cursor: pointer !important;\n}\n\n/* Hover states with enhanced effects */\n.hover-lift {\n  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n}\n\n.hover-lift:hover {\n  transform: translateY(-8px);\n  box-shadow: 0 20px 40px rgba(0, 0, 0, 0.3);\n}\n\n.hover-tilt {\n  transition: all 0.3s ease;\n}\n\n.hover-tilt:hover {\n  transform: perspective(1000px) rotateX(2deg) rotateY(2deg) scale(1.02);\n}\n\n/* Intersection Observer animations - DISABLED to fix visibility */\n.scroll-animate {\n  opacity: 1;\n  transform: translateY(0px);\n  transition: all 0.6s ease-out;\n}\n\n.scroll-animate.in-view {\n  opacity: 1;\n  transform: translateY(0);\n}\n\n.scroll-animate-left {\n  opacity: 1;\n  transform: translateX(0px);\n  transition: all 0.8s ease-out;\n}\n\n.scroll-animate-left.in-view {\n  opacity: 1;\n  transform: translateX(0);\n}\n\n.scroll-animate-right {\n  opacity: 1;\n  transform: translateX(0px);\n  transition: all 0.8s ease-out;\n}\n\n.scroll-animate-right.in-view {\n  opacity: 1;\n  transform: translateX(0);\n}\n\n/* Gradient animation */\n.gradient-animate {\n  background-size: 400% 400%;\n  animation: gradient-shift 4s ease infinite;\n}\n\n@keyframes gradient-shift {\n  0% {\n    background-position: 0% 50%;\n  }\n\n  50% {\n    background-position: 100% 50%;\n  }\n\n  100% {\n    background-position: 0% 50%;\n  }\n}\n\n/* DOMREALCE: Performance & SEO Enhancements */\n\n/* Smooth scrolling and performance optimizations */\nhtml {\n  scroll-behavior: smooth;\n}\n\n/* Font display optimization */\n@font-face {\n  font-family: 'Inter';\n  font-display: swap;\n}\n\n@font-face {\n  font-family: 'Poppins';\n  font-display: swap;\n}\n\n/* Image rendering optimizations */\nimg {\n  image-rendering: -webkit-optimize-contrast;\n  image-rendering: crisp-edges;\n}\n\n/* Hero overlay utility classes */\n.hero-overlay {\n  position: relative;\n  isolation: isolate;\n}\n\n.hero-overlay::after {\n  content: '';\n  position: absolute;\n  inset: 0;\n  background: linear-gradient(to bottom, rgba(0, 0, 0, 0.4), rgba(0, 0, 0, 0.2));\n  z-index: -1;\n}\n\n.hero-overlay-light::after {\n  background: linear-gradient(to bottom, rgba(0, 0, 0, 0.25), rgba(0, 0, 0, 0.1));\n}\n\n.hero-overlay-dark::after {\n  background: linear-gradient(to bottom, rgba(0, 0, 0, 0.6), rgba(0, 0, 0, 0.3));\n}\n\n/* Enhanced WhatsApp FAB animations */\n@keyframes whatsapp-pulse {\n  0%, 100% {\n    box-shadow: 0 0 0 0 rgba(37, 211, 102, 0.4);\n  }\n  50% {\n    box-shadow: 0 0 0 10px rgba(37, 211, 102, 0);\n  }\n}\n\n/* DOMREALCE: Hero Slider Specific Styles */\n.duration-600 {\n  transition-duration: 600ms;\n}\n\n/* Hero slider image optimization */\n.hero-slider-img {\n  image-rendering: -webkit-optimize-contrast;\n  image-rendering: crisp-edges;\n}\n\n/* Smooth fade transitions for slider */\n.slider-fade {\n  transition: opacity 0.6s cubic-bezier(0.4, 0, 0.2, 1);\n}\n\n/* Controls hover effects */\n.slider-control {\n  backdrop-filter: blur(4px);\n  transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);\n}\n\n.slider-control:hover {\n  transform: scale(1.05);\n}\n\n/* DOMREALCE: Performance utils */\n.below-the-fold {\n  content-visibility: auto;\n  contain-intrinsic-size: 1px 1000px;\n}\n\n/* DOMREALCE: Skip link for accessibility */\n.skip-link {\n  position: absolute;\n  top: -40px;\n  left: 6px;\n  background: #000;\n  color: #fff;\n  padding: 8px;\n  text-decoration: none;\n  border-radius: 4px;\n  z-index: 1000;\n  transform: translateY(-100%);\n  transition: transform 0.3s;\n}\n\n.skip-link:focus {\n  transform: translateY(0%);\n}\n\n.whatsapp-pulse {\n  animation: whatsapp-pulse 2s ease-in-out infinite;\n}\n\n/* Performance optimization for transforms */\n.will-change-transform {\n  will-change: transform;\n}\n\n.will-change-opacity {\n  will-change: opacity;\n}\n\n/* Fade in animation for lazy loaded images */\n.fade-in {\n  opacity: 0;\n  transition: opacity 0.3s ease-in-out;\n}\n\n.fade-in.loaded {\n  opacity: 1;\n}\n\n/* Accessibility improvements */\n@media (prefers-reduced-motion: reduce) {\n  *,\n  *::before,\n  *::after {\n    animation-duration: 0.01ms !important;\n    animation-iteration-count: 1 !important;\n    transition-duration: 0.01ms !important;\n  }\n  \n  html {\n    scroll-behavior: auto;\n  }\n}","size_bytes":13370},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/ObjectUploader.tsx":{"content":"import { useState } from \"react\";\nimport type { ReactNode } from \"react\";\nimport Uppy from \"@uppy/core\";\nimport { DashboardModal } from \"@uppy/react\";\nimport \"@uppy/core/dist/style.min.css\";\nimport \"@uppy/dashboard/dist/style.min.css\";\nimport AwsS3 from \"@uppy/aws-s3\";\nimport type { UploadResult } from \"@uppy/core\";\nimport { Button } from \"@/components/ui/button\";\nimport { Upload } from \"lucide-react\";\n\ninterface ObjectUploaderProps {\n  maxNumberOfFiles?: number;\n  maxFileSize?: number;\n  onGetUploadParameters: () => Promise<{\n    method: \"PUT\";\n    url: string;\n  }>;\n  onComplete?: (\n    result: UploadResult<Record<string, unknown>, Record<string, unknown>>\n  ) => void;\n  buttonClassName?: string;\n  children?: ReactNode;\n}\n\n/**\n * A file upload component that renders as a button and provides a modal interface for\n * file management.\n */\nexport function ObjectUploader({\n  maxNumberOfFiles = 5,\n  maxFileSize = 10485760, // 10MB default\n  onGetUploadParameters,\n  onComplete,\n  buttonClassName,\n  children,\n}: ObjectUploaderProps) {\n  const [showModal, setShowModal] = useState(false);\n  const [uppy] = useState(() =>\n    new Uppy({\n      restrictions: {\n        maxNumberOfFiles,\n        maxFileSize,\n        allowedFileTypes: ['.jpg', '.jpeg', '.png', '.gif', '.webp'],\n      },\n      autoProceed: false,\n    })\n      .use(AwsS3, {\n        shouldUseMultipart: false,\n        getUploadParameters: onGetUploadParameters,\n      })\n      .on(\"complete\", (result) => {\n        onComplete?.(result);\n        setShowModal(false);\n      })\n  );\n\n  return (\n    <div>\n      <Button \n        type=\"button\"\n        variant=\"outline\" \n        onClick={() => setShowModal(true)} \n        className={`border-brand-yellow text-brand-yellow hover:bg-brand-yellow hover:text-black ${buttonClassName}`}\n      >\n        <Upload className=\"w-4 h-4 mr-2\" />\n        {children || \"Anexar Ficheiros\"}\n      </Button>\n\n      <DashboardModal\n        uppy={uppy}\n        open={showModal}\n        onRequestClose={() => setShowModal(false)}\n        proudlyDisplayPoweredByUppy={false}\n      />\n    </div>\n  );\n}","size_bytes":2097},"client/src/components/custom-cursor.tsx":{"content":"import { useEffect, useState } from 'react';\n\nexport default function CustomCursor() {\n  const [mousePosition, setMousePosition] = useState({ x: 0, y: 0 });\n  const [trailPosition, setTrailPosition] = useState({ x: 0, y: 0 });\n\n  useEffect(() => {\n    const handleMouseMove = (e: MouseEvent) => {\n      setMousePosition({ x: e.clientX, y: e.clientY });\n      \n      // Delayed trail effect\n      setTimeout(() => {\n        setTrailPosition({ x: e.clientX, y: e.clientY });\n      }, 100);\n    };\n\n    window.addEventListener('mousemove', handleMouseMove);\n\n    return () => {\n      window.removeEventListener('mousemove', handleMouseMove);\n    };\n  }, []);\n\n  return (\n    <>\n      <div\n        className=\"custom-cursor\"\n        style={{\n          left: `${mousePosition.x - 10}px`,\n          top: `${mousePosition.y - 10}px`,\n        }}\n      />\n      <div\n        className=\"custom-cursor-trail\"\n        style={{\n          left: `${trailPosition.x - 4}px`,\n          top: `${trailPosition.y - 4}px`,\n        }}\n      />\n    </>\n  );\n}","size_bytes":1035},"client/src/components/dynamic-gallery.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogTitle } from \"@/components/ui/dialog\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { ChevronLeft, ChevronRight, X } from \"lucide-react\";\n\ninterface GalleryImage {\n  filename: string;\n  url: string;\n  category?: string;\n  title?: string;\n  description?: string;\n}\n\ninterface DynamicGalleryProps {\n  category?: string;\n  showCategories?: boolean;\n  className?: string;\n}\n\n// Função para categorizar imagens baseado no caminho/nome do arquivo\nfunction categorizeImage(filename: string): string {\n  // Normaliza acentos e converte para minúsculas\n  const lower = filename.toLowerCase()\n    .normalize('NFD')\n    .replace(/[\\u0300-\\u036f]/g, ''); // Remove acentos\n  \n  // Separa o caminho em partes\n  const pathParts = filename.split('/');\n  \n  // Se o caminho tem estrutura \"Domrealce/Portfólio/Categoria/imagem.jpg\"\n  // queremos extrair apenas a \"Categoria\"\n  if (pathParts.length >= 3) {\n    // Ignora \"Domrealce\" e \"Portfólio\", usa a terceira parte como categoria\n    if (pathParts[0].toLowerCase().includes('domrealce') && \n        pathParts[1].toLowerCase().includes('portf')) {\n      const categoryName = pathParts[2].toLowerCase();\n      return categoryName;\n    }\n  }\n  \n  // Se o caminho tem estrutura \"Portfólio/Categoria/imagem.jpg\"\n  if (pathParts.length >= 2) {\n    if (pathParts[0].toLowerCase().includes('portf')) {\n      const categoryName = pathParts[1].toLowerCase();\n      return categoryName;\n    }\n  }\n  \n  // Fallback: categorização por nome do arquivo\n  if (lower.includes('camiao') || lower.includes('camião') || lower.includes('truck') || lower.includes('viatura')) {\n    return 'camioes';\n  }\n  \n  return 'outros';\n}\n\n// Função para gerar título baseado no caminho/nome do arquivo\nfunction generateTitle(filename: string): string {\n  // Remove extensão e possível caminho de pasta\n  const name = filename.replace(/\\.[^/.]+$/, \"\").split('/').pop() || filename;\n  // Suporte para acentos e caracteres especiais\n  const words = name.split(/[-_\\s]+/).map(word => \n    word.charAt(0).toUpperCase() + word.slice(1).toLowerCase()\n  );\n  return words.join(' ');\n}\n\n// Função para gerar categorias dinamicamente baseado nas imagens existentes\nfunction getDynamicCategories(images: GalleryImage[]): Array<{id: string, name: string}> {\n  const foundCategories = new Set<string>();\n  \n  images.forEach(image => {\n    if (image.category && image.category !== 'outros') {\n      foundCategories.add(image.category);\n    }\n  });\n\n  const categories = [{ id: 'todos', name: 'Todos' }];\n  \n  // Adiciona categorias encontradas nas imagens\n  foundCategories.forEach(categoryId => {\n    // Mapeia os nomes das categorias para manter os acentos originais\n    let categoryName = categoryId.charAt(0).toUpperCase() + categoryId.slice(1);\n    \n    // Mapeia nomes específicos com acentos\n    if (categoryId === 'camiões') {\n      categoryName = 'Camiões';\n    } else if (categoryId === 'comerciais') {\n      categoryName = 'Comerciais';\n    } else if (categoryId === 'competição') {\n      categoryName = 'Competição';\n    } else if (categoryId === 'autocolantes') {\n      categoryName = 'Autocolantes';\n    } else if (categoryId === 'interiores') {\n      categoryName = 'Interiores';\n    }\n    \n    categories.push({ id: categoryId, name: categoryName });\n  });\n  \n  return categories;\n}\n\nexport function DynamicGallery({ category, showCategories = true, className = \"\" }: DynamicGalleryProps) {\n  const [selectedCategory, setSelectedCategory] = useState(category || 'todos');\n  const [selectedImage, setSelectedImage] = useState<GalleryImage | null>(null);\n  const [currentImageIndex, setCurrentImageIndex] = useState(0);\n\n  // Buscar imagens do Object Storage\n  const { data: imagesData, isLoading, error } = useQuery({\n    queryKey: ['/api/gallery/images'],\n    retry: false,\n  });\n\n  const images: GalleryImage[] = ((imagesData as any)?.images || []).map((filename: string) => ({\n    filename,\n    url: `/public-objects/${filename}`,\n    category: categorizeImage(filename),\n    title: generateTitle(filename),\n    description: `Projeto realizado pela DOMREALCE - ${generateTitle(filename)}`\n  }));\n\n  // Gerar categorias dinamicamente\n  const categories = getDynamicCategories(images);\n  \n  // Filtrar imagens por categoria\n  const filteredImages = selectedCategory === 'todos' \n    ? images \n    : images.filter(img => img.category === selectedCategory);\n\n  const openLightbox = (image: GalleryImage, index: number) => {\n    setSelectedImage(image);\n    setCurrentImageIndex(index);\n  };\n\n  const closeLightbox = () => {\n    setSelectedImage(null);\n  };\n\n  const goToPrevious = () => {\n    const newIndex = currentImageIndex > 0 ? currentImageIndex - 1 : filteredImages.length - 1;\n    setCurrentImageIndex(newIndex);\n    setSelectedImage(filteredImages[newIndex]);\n  };\n\n  const goToNext = () => {\n    const newIndex = currentImageIndex < filteredImages.length - 1 ? currentImageIndex + 1 : 0;\n    setCurrentImageIndex(newIndex);\n    setSelectedImage(filteredImages[newIndex]);\n  };\n\n  if (isLoading) {\n    return (\n      <div className={`space-y-8 ${className}`}>\n        <div className=\"text-center py-12\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-brand-yellow mx-auto\"></div>\n          <p className=\"mt-4 text-muted-foreground\">A carregar galeria...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (error || images.length === 0) {\n    return (\n      <div className={`space-y-8 ${className}`}>\n        <div className=\"text-center py-12\">\n          <div className=\"w-24 h-24 bg-muted rounded-lg mx-auto mb-4 flex items-center justify-center\">\n            <div className=\"w-8 h-8 bg-muted-foreground rounded\"></div>\n          </div>\n          <h3 className=\"text-lg font-semibold mb-2\">Galeria em Preparação</h3>\n          <p className=\"text-muted-foreground mb-4\">\n            Estamos a organizar as nossas melhores imagens de projetos.\n          </p>\n          <p className=\"text-sm text-muted-foreground\">\n            Para adicionar fotos, carregue as imagens na pasta 'public' do Object Storage.\n          </p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className={`space-y-8 ${className}`}>\n      {/* Filtros de Categoria */}\n      {showCategories && (\n        <div className=\"flex flex-wrap gap-2 justify-center\">\n          {categories.map((cat) => (\n            <Button\n              key={cat.id}\n              variant={selectedCategory === cat.id ? \"default\" : \"outline\"}\n              onClick={() => setSelectedCategory(cat.id)}\n              className={selectedCategory === cat.id ? \"bg-brand-yellow text-black hover:bg-yellow-400\" : \"\"}\n            >\n              {cat.name}\n            </Button>\n          ))}\n        </div>\n      )}\n\n      {/* Grade de Imagens */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n        {filteredImages.map((image, index) => (\n          <Card key={image.filename} className=\"group overflow-hidden hover:shadow-lg transition-all\">\n            <CardContent className=\"p-0\">\n              <div className=\"relative aspect-video overflow-hidden\">\n                <img\n                  src={image.url}\n                  alt={image.title}\n                  className=\"w-full h-full object-cover group-hover:scale-105 transition-transform duration-300 cursor-pointer\"\n                  onClick={() => openLightbox(image, index)}\n                  loading=\"lazy\"\n                  style={{ cursor: 'pointer' }}\n                />\n                <div className=\"absolute inset-0 bg-black/20 opacity-0 group-hover:opacity-100 transition-opacity cursor-pointer\" \n                     onClick={() => openLightbox(image, index)} />\n              </div>\n\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      {filteredImages.length === 0 && (\n        <div className=\"text-center py-12\">\n          <p className=\"text-muted-foreground\">Nenhum projeto encontrado nesta categoria.</p>\n        </div>\n      )}\n\n      {/* Lightbox Modal */}\n      {selectedImage && (\n        <Dialog open={!!selectedImage} onOpenChange={closeLightbox}>\n          <DialogContent className=\"max-w-[95vw] max-h-[95vh] w-auto h-auto p-0 overflow-hidden\">\n            <DialogTitle className=\"sr-only\">{selectedImage.title}</DialogTitle>\n            <div className=\"relative\">\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                className=\"absolute top-2 right-2 z-10 bg-black/50 text-white hover:bg-black/70\"\n                onClick={closeLightbox}\n              >\n                <X className=\"w-4 h-4\" />\n              </Button>\n              \n              {filteredImages.length > 1 && (\n                <>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"icon\"\n                    className=\"absolute left-2 top-1/2 transform -translate-y-1/2 z-10 bg-black/50 text-white hover:bg-black/70\"\n                    onClick={goToPrevious}\n                  >\n                    <ChevronLeft className=\"w-4 h-4\" />\n                  </Button>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"icon\"\n                    className=\"absolute right-2 top-1/2 transform -translate-y-1/2 z-10 bg-black/50 text-white hover:bg-black/70\"\n                    onClick={goToNext}\n                  >\n                    <ChevronRight className=\"w-4 h-4\" />\n                  </Button>\n                </>\n              )}\n              \n              <div className=\"relative\">\n                <img\n                  src={selectedImage.url}\n                  alt={selectedImage.title}\n                  className=\"max-w-[90vw] max-h-[90vh] w-auto h-auto object-contain\"\n                />\n                \n                {/* Numeração sobre a imagem */}\n                {filteredImages.length > 1 && (\n                  <div className=\"absolute bottom-4 right-4 bg-black/70 text-white px-3 py-1 rounded-full text-sm\">\n                    {currentImageIndex + 1} / {filteredImages.length}\n                  </div>\n                )}\n              </div>\n            </div>\n          </DialogContent>\n        </Dialog>\n      )}\n    </div>\n  );\n}","size_bytes":10454},"client/src/components/footer.tsx":{"content":"import { MapPin, Phone, Mail, Clock } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Link } from \"wouter\";\nimport domrealceLogo from \"@/assets/domrealce-logo.png\";\n\nexport default function Footer() {\n  return (\n    <footer id=\"contactos\" className=\"bg-black border-t border-brand-turquoise py-16\">\n      <div className=\"container mx-auto px-4\">\n        {/* Logo centralizado */}\n        <div className=\"text-center mb-12\">\n          <img \n            src={domrealceLogo} \n            alt=\"DOMREALCE Logo\" \n            className=\"h-16 w-auto mx-auto\"\n          />\n        </div>\n\n        {/* Informações principais em linha */}\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8 mb-12\">\n          {/* Telefone e Email */}\n          <div className=\"text-left\">\n            <div className=\"flex items-center mb-4\">\n              <Phone className=\"text-brand-yellow mr-3\" size={20} />\n              <p className=\"text-white/80\">+351 930 682 725</p>\n            </div>\n            <div className=\"flex items-center\">\n              <Mail className=\"text-brand-turquoise mr-3 flex-shrink-0\" size={20} />\n              <p className=\"text-white/80\">carloscruz@domrealce.com</p>\n            </div>\n          </div>\n\n          {/* Morada */}\n          <div className=\"text-left\">\n            <div className=\"flex items-start\">\n              <MapPin className=\"text-brand-coral mr-3 mt-1\" size={20} />\n              <p className=\"text-white/80\">\n                Rua de Rebolido, 42<br />\n                4580-402 Gondalães, Paredes\n              </p>\n            </div>\n          </div>\n\n          {/* Horário */}\n          <div className=\"text-left\">\n            <div className=\"flex items-start\">\n              <Clock className=\"text-brand-yellow mr-3 mt-1\" size={20} />\n              <div className=\"text-white/80 text-sm\">\n                <p>Segunda-Sexta: 9h00-18h00</p>\n                <p>Sábado: 9h00-13h00</p>\n                <p>Domingo: Encerrado</p>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Redes Sociais */}\n        <div className=\"text-center mb-8\">\n          <div className=\"flex justify-center space-x-4\">\n            <a \n              href=\"https://www.facebook.com/DomrealcePublicidade/\" \n              target=\"_blank\" \n              rel=\"noopener noreferrer\"\n              className=\"w-10 h-10 bg-brand-blue rounded-full text-white hover:bg-blue-600 transition-colors flex items-center justify-center\"\n            >\n              <span className=\"sr-only\">Facebook</span>\n              <svg className=\"w-5 h-5\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path d=\"M24 12.073c0-6.627-5.373-12-12-12s-12 5.373-12 12c0 5.99 4.388 10.954 10.125 11.854v-8.385H7.078v-3.47h3.047V9.43c0-3.007 1.792-4.669 4.533-4.669 1.312 0 2.686.235 2.686.235v2.953H15.83c-1.491 0-1.956.925-1.956 1.874v2.25h3.328l-.532 3.47h-2.796v8.385C19.612 23.027 24 18.062 24 12.073z\"/>\n              </svg>\n            </a>\n            <Button\n              size=\"icon\"\n              className=\"w-10 h-10 bg-brand-coral rounded-full text-white hover:bg-red-500 transition-colors\"\n            >\n              <span className=\"sr-only\">Instagram</span>\n              <svg className=\"w-5 h-5\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path d=\"M12 2.163c3.204 0 3.584.012 4.85.07 3.252.148 4.771 1.691 4.919 4.919.058 1.265.069 1.645.069 4.849 0 3.205-.012 3.584-.069 4.849-.149 3.225-1.664 4.771-4.919 4.919-1.266.058-1.644.07-4.85.07-3.204 0-3.584-.012-4.849-.07-3.26-.149-4.771-1.699-4.919-4.92-.058-1.265-.07-1.644-.07-4.849 0-3.204.013-3.583.07-4.849.149-3.227 1.664-4.771 4.919-4.919 1.266-.057 1.645-.069 4.849-.069zm0-2.163c-3.259 0-3.667.014-4.947.072-4.358.2-6.78 2.618-6.98 6.98-.059 1.281-.073 1.689-.073 4.948 0 3.259.014 3.668.072 4.948.2 4.358 2.618 6.78 6.98 6.98 1.281.058 1.689.072 4.948.072 3.259 0 3.668-.014 4.948-.072 4.354-.2 6.782-2.618 6.979-6.98.059-1.28.073-1.689.073-4.948 0-3.259-.014-3.667-.072-4.947-.196-4.354-2.617-6.78-6.979-6.98-1.281-.059-1.69-.073-4.949-.073zm0 5.838c-3.403 0-6.162 2.759-6.162 6.162s2.759 6.163 6.162 6.163 6.162-2.759 6.162-6.163c0-3.403-2.759-6.162-6.162-6.162zm0 10.162c-2.209 0-4-1.79-4-4 0-2.209 1.791-4 4-4s4 1.791 4 4c0 2.21-1.791 4-4 4zm6.406-11.845c-.796 0-1.441.645-1.441 1.44s.645 1.44 1.441 1.44c.795 0 1.439-.645 1.439-1.44s-.644-1.44-1.439-1.44z\"/>\n              </svg>\n            </Button>\n            <a\n              href=\"https://www.linkedin.com/company/51830077/\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n              className=\"inline-block\"\n            >\n              <Button\n                size=\"icon\"\n                className=\"w-10 h-10 bg-brand-turquoise rounded-full text-black hover:bg-cyan-400 transition-colors\"\n              >\n                <span className=\"sr-only\">LinkedIn</span>\n                <svg className=\"w-5 h-5\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path d=\"M20.447 20.452h-3.554v-5.569c0-1.328-.027-3.037-1.852-3.037-1.853 0-2.136 1.445-2.136 2.939v5.667H9.351V9h3.414v1.561h.046c.477-.9 1.637-1.85 3.37-1.85 3.601 0 4.267 2.37 4.267 5.455v6.286zM5.337 7.433c-1.144 0-2.063-.926-2.063-2.065 0-1.138.92-2.063 2.063-2.063 1.14 0 2.064.925 2.064 2.063 0 1.139-.925 2.065-2.064 2.065zm1.782 13.019H3.555V9h3.564v11.452zM22.225 0H1.771C.792 0 0 .774 0 1.729v20.542C0 23.227.792 24 1.771 24h20.451C23.2 24 24 23.227 24 22.271V1.729C24 .774 23.2 0 22.222 0h.003z\"/>\n                </svg>\n              </Button>\n            </a>\n            <a \n              href=\"https://wa.me/351930682725?text=Olá!%20Gostaria%20de%20saber%20mais%20sobre%20os%20vossos%20serviços.\"\n              target=\"_blank\" \n              rel=\"noopener noreferrer\"\n              className=\"inline-block\"\n            >\n              <Button\n                size=\"icon\"\n                className=\"w-10 h-10 bg-brand-yellow rounded-full text-black hover:bg-yellow-400 transition-colors\"\n              >\n                <span className=\"sr-only\">WhatsApp</span>\n                <svg className=\"w-5 h-5\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path d=\"M17.472 14.382c-.297-.149-1.758-.867-2.03-.967-.273-.099-.471-.148-.67.15-.197.297-.767.966-.94 1.164-.173.199-.347.223-.644.075-.297-.15-1.255-.463-2.39-1.475-.883-.788-1.48-1.761-1.653-2.059-.173-.297-.018-.458.13-.606.134-.133.298-.347.446-.52.149-.174.198-.298.298-.497.099-.198.05-.371-.025-.52-.075-.149-.669-1.612-.916-2.207-.242-.579-.487-.5-.669-.51-.173-.008-.371-.01-.57-.01-.198 0-.52.074-.792.372-.272.297-1.04 1.016-1.04 2.479 0 1.462 1.065 2.875 1.213 3.074.149.198 2.096 3.2 5.077 4.487.709.306 1.262.489 1.694.625.712.227 1.36.195 1.871.118.571-.085 1.758-.719 2.006-1.413.248-.694.248-1.289.173-1.413-.074-.124-.272-.198-.57-.347m-5.421 7.403h-.004a9.87 9.87 0 01-5.031-1.378l-.361-.214-3.741.982.998-3.648-.235-.374a9.86 9.86 0 01-1.51-5.26c.001-5.45 4.436-9.884 9.888-9.884 2.64 0 5.122 1.03 6.988 2.898a9.825 9.825 0 012.893 6.994c-.003 5.45-4.437 9.884-9.885 9.884m8.413-18.297A11.815 11.815 0 0012.05 0C5.495 0 .16 5.335.157 11.892c0 2.096.547 4.142 1.588 5.945L.057 24l6.305-1.654a11.882 11.882 0 005.683 1.448h.005c6.554 0 11.89-5.335 11.893-11.893A11.821 11.821 0 0020.885 3.488\"/>\n                </svg>\n              </Button>\n            </a>\n          </div>\n        </div>\n\n        {/* WhatsApp CTA */}\n        <div className=\"bg-gradient-to-r from-brand-turquoise to-brand-blue rounded-2xl p-6 mb-8\">\n          <div className=\"flex flex-col md:flex-row items-center justify-between gap-4\">\n            <div>\n              <h4 className=\"text-white font-heading font-semibold mb-2\">Fale connosco via WhatsApp</h4>\n              <p className=\"text-white/80\">Resposta rápida e atendimento personalizado</p>\n            </div>\n            <a \n              href=\"https://wa.me/351930682725?text=Olá!%20Gostaria%20de%20saber%20mais%20sobre%20os%20vossos%20serviços.\"\n              target=\"_blank\" \n              rel=\"noopener noreferrer\"\n            >\n              <Button className=\"bg-black text-brand-yellow px-6 py-3 rounded-lg font-semibold hover:bg-brand-coral hover:text-white transition-colors\">\n                <svg className=\"w-5 h-5 mr-2\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path d=\"M17.472 14.382c-.297-.149-1.758-.867-2.03-.967-.273-.099-.471-.148-.67.15-.197.297-.767.966-.94 1.164-.173.199-.347.223-.644.075-.297-.15-1.255-.463-2.39-1.475-.883-.788-1.48-1.761-1.653-2.059-.173-.297-.018-.458.13-.606.134-.133.298-.347.446-.52.149-.174.198-.298.298-.497.099-.198.05-.371-.025-.52-.075-.149-.669-1.612-.916-2.207-.242-.579-.487-.5-.669-.51-.173-.008-.371-.01-.57-.01-.198 0-.52.074-.792.372-.272.297-1.04 1.016-1.04 2.479 0 1.462 1.065 2.875 1.213 3.074.149.198 2.096 3.2 5.077 4.487.709.306 1.262.489 1.694.625.712.227 1.36.195 1.871.118.571-.085 1.758-.719 2.006-1.413.248-.694.248-1.289.173-1.413-.074-.124-.272-.198-.57-.347m-5.421 7.403h-.004a9.87 9.87 0 01-5.031-1.378l-.361-.214-3.741.982.998-3.648-.235-.374a9.86 9.86 0 01-1.51-5.26c.001-5.45 4.436-9.884 9.888-9.884 2.64 0 5.122 1.03 6.988 2.898a9.825 9.825 0 012.893 6.994c-.003 5.45-4.437 9.884-9.885 9.884m8.413-18.297A11.815 11.815 0 0012.05 0C5.495 0 .16 5.335.157 11.892c0 2.096.547 4.142 1.588 5.945L.057 24l6.305-1.654a11.882 11.882 0 005.683 1.448h.005c6.554 0 11.89-5.335 11.893-11.893A11.821 11.821 0 0020.885 3.488\"/>\n                </svg>\n                Contactar via WhatsApp\n              </Button>\n            </a>\n          </div>\n        </div>\n\n        {/* Footer Bottom */}\n        <div className=\"border-t border-brand-blue pt-8 flex flex-col md:flex-row justify-between items-center\">\n          <p className=\"text-white/60 mb-4 md:mb-0\">\n            &copy; 2024 DOMREALCE. Todos os direitos reservados.\n          </p>\n          <div className=\"flex flex-wrap gap-4 justify-center md:justify-end text-sm\">\n            <Link href=\"/politica-privacidade\" className=\"text-white/60 hover:text-brand-yellow transition-colors\">Política de Privacidade</Link>\n            <Link href=\"/termos-condicoes\" className=\"text-white/60 hover:text-brand-turquoise transition-colors\">Termos e Condições</Link>\n            <Link href=\"/politica-cookies\" className=\"text-white/60 hover:text-brand-coral transition-colors\">Política de Cookies</Link>\n            <Link href=\"/aviso-legal\" className=\"text-white/60 hover:text-brand-yellow transition-colors\">Aviso Legal</Link>\n          </div>\n        </div>\n      </div>\n    </footer>\n  );\n}\n","size_bytes":10557},"client/src/components/hero-section.tsx":{"content":"import DynamicSlider from \"@/components/DynamicSlider\";\n\nexport default function HeroSection() {\n  return (\n    <section className=\"h-screen w-full relative\">\n      <DynamicSlider />\n\n      {/* \n        Caso queira manter algum texto/botões fixos por cima de todos os slides,\n        pode descomentar esta div abaixo e personalizar.\n      */}\n      {/*\n      <div className=\"absolute inset-0 flex flex-col items-center justify-center text-center z-20 px-4\">\n        <h1 className=\"text-5xl md:text-7xl font-heading font-bold mb-6 leading-tight text-white drop-shadow-lg\">\n          <span className=\"text-brand-yellow\">Realce</span> sua marca com<br />\n          <span className=\"text-brand-yellow\">criatividade</span><br />\n          <span className=\"text-white\">e alta definição</span>\n        </h1>\n        <p className=\"text-xl md:text-2xl text-white mb-8 max-w-3xl mx-auto\">\n          Texto opcional que ficará sempre visível acima do slider\n        </p>\n      </div>\n      */}\n    </section>\n  );\n}\n","size_bytes":1009},"client/src/components/navigation.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Menu, X, ShoppingCart } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Link, useLocation } from \"wouter\";\nimport domrealceLogo from \"@/assets/domrealce-logo.png\";\n\nexport default function Navigation() {\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n  const [isScrolled, setIsScrolled] = useState(false);\n  const [location] = useLocation();\n\n  useEffect(() => {\n    const handleScroll = () => {\n      setIsScrolled(window.scrollY > 50);\n    };\n\n    window.addEventListener(\"scroll\", handleScroll);\n    return () => window.removeEventListener(\"scroll\", handleScroll);\n  }, []);\n\n  const handleNavClick = (href: string) => {\n    const element = document.querySelector(href);\n    if (element) {\n      const headerOffset = 80;\n      const elementPosition = element.getBoundingClientRect().top;\n      const offsetPosition = elementPosition + window.pageYOffset - headerOffset;\n\n      window.scrollTo({\n        top: offsetPosition,\n        behavior: \"smooth\"\n      });\n    }\n    setIsMenuOpen(false);\n  };\n\n  // Close mobile menu when clicking outside\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      const target = event.target as Element;\n      const nav = document.querySelector('nav');\n      if (isMenuOpen && nav && !nav.contains(target)) {\n        setIsMenuOpen(false);\n      }\n    };\n\n    if (isMenuOpen) {\n      document.addEventListener('mousedown', handleClickOutside);\n      return () => document.removeEventListener('mousedown', handleClickOutside);\n    }\n  }, [isMenuOpen]);\n\n  return (\n    <header className={`fixed w-full top-0 z-50 transition-all duration-300 border-b border-brand-yellow ${\n      isScrolled ? \"bg-black\" : \"bg-black/90 backdrop-blur-md\"\n    }`}>\n      <nav className=\"container mx-auto px-4 py-4\">\n        <div className=\"flex items-center justify-between\">\n          <Link href=\"/\" className=\"flex items-center space-x-3\">\n            <img \n              src={domrealceLogo} \n              alt=\"DOMREALCE Logo\" \n              className=\"h-14 w-auto\"\n            />\n          </Link>\n          \n          {/* Desktop Menu */}\n          <div className=\"hidden md:flex space-x-3\">\n            <Link \n              href=\"/\" \n              className={`transition-all duration-300 font-medium px-3 py-2 rounded-md ${\n                location === \"/\" \n                  ? \"bg-brand-yellow text-brand-dark\" \n                  : \"text-white hover:text-brand-yellow\"\n              }`}\n              onClick={() => setIsMenuOpen(false)}\n            >\n              Início\n            </Link>\n            <Link \n              href=\"/sobre\" \n              className={`transition-all duration-300 font-medium px-3 py-2 rounded-md ${\n                location === \"/sobre\" \n                  ? \"bg-brand-yellow text-brand-dark\" \n                  : \"text-white hover:text-brand-turquoise\"\n              }`}\n              onClick={() => setIsMenuOpen(false)}\n            >\n              Sobre\n            </Link>\n            <Link \n              href=\"/servicos\" \n              className={`transition-all duration-300 font-medium px-3 py-2 rounded-md ${\n                location === \"/servicos\" || location.startsWith(\"/servico-\")\n                  ? \"bg-brand-yellow text-brand-dark\" \n                  : \"text-white hover:text-brand-coral\"\n              }`}\n              onClick={() => setIsMenuOpen(false)}\n            >\n              Serviços\n            </Link>\n            <Link \n              href=\"/portfolio\" \n              className={`transition-all duration-300 font-medium px-3 py-2 rounded-md ${\n                location === \"/portfolio\" \n                  ? \"bg-brand-yellow text-brand-dark\" \n                  : \"text-white hover:text-brand-yellow\"\n              }`}\n              onClick={() => setIsMenuOpen(false)}\n            >\n              Portfólio\n            </Link>\n            <Link \n              href=\"/loja\" \n              className={`transition-all duration-300 font-medium px-3 py-2 rounded-md ${\n                location === \"/loja\" \n                  ? \"bg-brand-yellow text-brand-dark\" \n                  : \"text-white hover:text-brand-turquoise\"\n              }`}\n              onClick={() => setIsMenuOpen(false)}\n            >\n              Loja\n            </Link>\n            <Link \n              href=\"/noticias\" \n              className={`transition-all duration-300 font-medium px-3 py-2 rounded-md ${\n                location === \"/noticias\" \n                  ? \"bg-brand-yellow text-brand-dark\" \n                  : \"text-white hover:text-brand-green\"\n              }`}\n              onClick={() => setIsMenuOpen(false)}\n            >\n              Notícias\n            </Link>\n            <Link \n              href=\"/contactos\" \n              className={`transition-all duration-300 font-medium px-3 py-2 rounded-md ${\n                location === \"/contactos\" \n                  ? \"bg-brand-yellow text-brand-dark\" \n                  : \"text-white hover:text-brand-coral\"\n              }`}\n              onClick={() => setIsMenuOpen(false)}\n            >\n              Contactos\n            </Link>\n            \n            {/* Cart Button */}\n            <Link \n              href=\"/carrinho\" \n              className={`transition-all duration-300 font-medium px-3 py-2 rounded-md flex items-center gap-2 bg-gradient-to-r from-brand-coral to-brand-turquoise hover:from-brand-turquoise hover:to-brand-coral ${\n                location === \"/carrinho\" \n                  ? \"text-black\" \n                  : \"text-black hover:text-black\"\n              }`}\n              onClick={() => setIsMenuOpen(false)}\n            >\n              <ShoppingCart className=\"h-4 w-4\" />\n              Carrinho\n            </Link>\n          </div>\n\n          {/* Mobile Menu Button */}\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            className=\"md:hidden text-white hover:bg-brand-coral/20\"\n            onClick={() => setIsMenuOpen(!isMenuOpen)}\n          >\n            {isMenuOpen ? <X className=\"h-6 w-6\" /> : <Menu className=\"h-6 w-6\" />}\n          </Button>\n        </div>\n\n        {/* Mobile Menu */}\n        {isMenuOpen && (\n          <div className=\"md:hidden mt-4 pb-4\">\n            <div className=\"flex flex-col space-y-2\">\n              <Link \n                href=\"/\" \n                className={`transition-all duration-300 font-medium py-3 px-4 rounded-md text-left ${\n                  location === \"/\" \n                    ? \"bg-brand-yellow text-brand-dark\" \n                    : \"text-white hover:text-brand-yellow\"\n                }`}\n                onClick={() => setIsMenuOpen(false)}\n              >\n                Início\n              </Link>\n              <Link \n                href=\"/sobre\" \n                className={`transition-all duration-300 font-medium py-3 px-4 rounded-md text-left ${\n                  location === \"/sobre\" \n                    ? \"bg-brand-yellow text-brand-dark\" \n                    : \"text-white hover:text-brand-turquoise\"\n                }`}\n                onClick={() => setIsMenuOpen(false)}\n              >\n                Sobre\n              </Link>\n              <Link \n                href=\"/servicos\" \n                className={`transition-all duration-300 font-medium py-3 px-4 rounded-md text-left ${\n                  location === \"/servicos\" || location.startsWith(\"/servico-\")\n                    ? \"bg-brand-yellow text-brand-dark\" \n                    : \"text-white hover:text-brand-coral\"\n                }`}\n                onClick={() => setIsMenuOpen(false)}\n              >\n                Serviços\n              </Link>\n              <Link \n                href=\"/portfolio\" \n                className={`transition-all duration-300 font-medium py-3 px-4 rounded-md text-left ${\n                  location === \"/portfolio\" \n                    ? \"bg-brand-yellow text-brand-dark\" \n                    : \"text-white hover:text-brand-yellow\"\n                }`}\n                onClick={() => setIsMenuOpen(false)}\n              >\n                Portfólio\n              </Link>\n              <Link \n                href=\"/loja\" \n                className={`transition-all duration-300 font-medium py-3 px-4 rounded-md text-left ${\n                  location === \"/loja\" \n                    ? \"bg-brand-yellow text-brand-dark\" \n                    : \"text-white hover:text-brand-turquoise\"\n                }`}\n                onClick={() => setIsMenuOpen(false)}\n              >\n                Loja\n              </Link>\n              <Link \n                href=\"/noticias\" \n                className={`transition-all duration-300 font-medium py-3 px-4 rounded-md text-left ${\n                  location === \"/noticias\" \n                    ? \"bg-brand-yellow text-brand-dark\" \n                    : \"text-white hover:text-brand-green\"\n                }`}\n                onClick={() => setIsMenuOpen(false)}\n              >\n                Notícias\n              </Link>\n              <Link \n                href=\"/contactos\" \n                className={`transition-all duration-300 font-medium py-3 px-4 rounded-md text-left ${\n                  location === \"/contactos\" \n                    ? \"bg-brand-yellow text-brand-dark\" \n                    : \"text-white hover:text-brand-coral\"\n                }`}\n                onClick={() => setIsMenuOpen(false)}\n              >\n                Contactos\n              </Link>\n              \n              {/* Cart Button Mobile */}\n              <Link \n                href=\"/carrinho\" \n                className={`transition-all duration-300 font-medium py-3 px-4 rounded-md text-left flex items-center gap-2 bg-gradient-to-r from-brand-coral to-brand-turquoise hover:from-brand-turquoise hover:to-brand-coral ${\n                  location === \"/carrinho\" \n                    ? \"text-black\" \n                    : \"text-black hover:text-black\"\n                }`}\n                onClick={() => setIsMenuOpen(false)}\n              >\n                <ShoppingCart className=\"h-4 w-4\" />\n                Carrinho\n              </Link>\n            </div>\n          </div>\n        )}\n      </nav>\n    </header>\n  );\n}","size_bytes":10259},"client/src/components/news-section.tsx":{"content":"import { ArrowRight } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Link } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport type { News } from \"@shared/schema\";\n\nconst categoryColors = [\"bg-brand-yellow text-black\", \"bg-brand-turquoise text-black\", \"bg-brand-coral text-white\"];\nconst titleHoverColors = [\"hover:text-brand-yellow\", \"hover:text-brand-turquoise\", \"hover:text-brand-coral\"];\n\nexport default function NewsSection() {\n  const { data: news = [], isLoading, error } = useQuery<News[]>({\n    queryKey: [\"/api/news/recent\"]\n  });\n\n  if (isLoading) {\n    return (\n      <section id=\"noticias\" className=\"py-20 bg-black\">\n        <div className=\"container mx-auto px-4 text-center\">\n          <div className=\"text-brand-coral\">Carregando notícias...</div>\n        </div>\n      </section>\n    );\n  }\n\n  if (error) {\n    return (\n      <section id=\"noticias\" className=\"py-20 bg-black\">\n        <div className=\"container mx-auto px-4 text-center\">\n          <div className=\"text-red-400\">Erro ao carregar notícias. Tente novamente mais tarde.</div>\n        </div>\n      </section>\n    );\n  }\n\n  if (news.length === 0) {\n    return null; // Não mostrar a secção se não há notícias\n  }\n\n  return (\n    <section id=\"noticias\" className=\"py-20 bg-black\">\n      <div className=\"container mx-auto px-4\">\n        <div className=\"text-center mb-16 scroll-animate\">\n          <h3 className=\"text-4xl md:text-5xl font-heading font-bold mb-4\">\n            <span className=\"text-brand-coral animate-pulse-brand\">Notícias</span> <span className=\"text-white\">Mais Recentes</span>\n          </h3>\n          <p className=\"text-xl text-white/80 max-w-3xl mx-auto\">\n            Fique por dentro das últimas novidades e tendências em comunicação visual\n          </p>\n        </div>\n\n        <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\">\n          {news.map((article, index) => (\n            <article \n              key={article.id} \n              className=\"bg-[#0a0a0a] border border-[#333] rounded-2xl overflow-hidden hover-lift transform-3d scroll-animate hover-tilt cursor-pointer\"\n              style={{\n                animationDelay: `${index * 0.1}s`\n              }}\n            >\n              <div className=\"relative overflow-hidden\">\n                <img \n                  src={article.imagem} \n                  alt={article.titulo} \n                  className=\"w-full h-48 object-cover hover:scale-110 transition-transform duration-500\"\n                />\n                <div className=\"absolute inset-0 bg-gradient-to-t from-black/20 to-transparent opacity-0 hover:opacity-100 transition-opacity duration-300\"></div>\n              </div>\n              <div className=\"p-6\">\n                <div className=\"flex items-center mb-3\">\n                  <span className={`${categoryColors[index % categoryColors.length]} px-3 py-1 rounded-full text-sm font-semibold animate-bounce-subtle`}>\n                    {article.categoria}\n                  </span>\n                  <span className=\"text-white/60 text-sm ml-3\">\n                    {new Date(article.data || article.createdAt!).toLocaleDateString('pt-PT', { day: '2-digit', month: 'short', year: 'numeric' })}\n                  </span>\n                </div>\n                <h4 className={`text-xl font-heading font-semibold mb-3 text-white ${titleHoverColors[index % titleHoverColors.length]} transition-colors cursor-pointer hover:animate-pulse-brand`}>\n                  {article.titulo}\n                </h4>\n                <p className=\"text-white/80 mb-4\">\n                  {article.descricao}\n                </p>\n                <Button \n                  asChild\n                  variant=\"link\" \n                  className=\"text-brand-turquoise hover:text-brand-turquoise font-semibold transition-colors p-0 hover-lift group\"\n                >\n                  <Link href={`/noticias#${article.id}`}>\n                    Ler mais <ArrowRight className=\"ml-2 group-hover:translate-x-1 transition-transform duration-300\" size={16} />\n                  </Link>\n                </Button>\n              </div>\n            </article>\n          ))}\n        </div>\n\n        <div className=\"text-center mt-12 scroll-animate\">\n          <Button \n            asChild\n            variant=\"outline\" \n            className=\"px-8 py-3 border-2 border-brand-coral text-brand-coral font-heading font-semibold rounded-lg hover:bg-brand-coral hover:text-white hover-lift transition-all duration-300 animate-bounce-subtle\"\n          >\n            <Link href=\"/noticias\">Ver Todas as Notícias</Link>\n          </Button>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":4706},"client/src/components/portfolio-section.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Link } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport type { Product } from \"@shared/schema\";\n\nconst titleColors = [\"text-brand-yellow\", \"text-brand-turquoise\", \"text-brand-coral\"];\n\nexport default function PortfolioSection() {\n  const { data: products = [], isLoading, error } = useQuery<Product[]>({\n    queryKey: [\"/api/products/featured\"]\n  });\n\n  if (isLoading) {\n    return (\n      <section id=\"portfolio\" className=\"py-20 bg-[#0a0a0a]\">\n        <div className=\"container mx-auto px-4 text-center\">\n          <div className=\"text-brand-yellow\">Carregando produtos...</div>\n        </div>\n      </section>\n    );\n  }\n\n  if (error) {\n    return (\n      <section id=\"portfolio\" className=\"py-20 bg-[#0a0a0a]\">\n        <div className=\"container mx-auto px-4 text-center\">\n          <div className=\"text-red-400\">Erro ao carregar portfolio. Tente novamente mais tarde.</div>\n        </div>\n      </section>\n    );\n  }\n\n  if (products.length === 0) {\n    return null; // Não mostrar a secção se não há produtos\n  }\n\n  return (\n    <section id=\"portfolio\" className=\"py-20 bg-[#0a0a0a]\">\n      <div className=\"container mx-auto px-4\">\n        <div className=\"text-center mb-16 scroll-animate-right\">\n          <h3 className=\"text-4xl md:text-5xl font-heading font-bold mb-4\">\n            <span className=\"text-brand-turquoise animate-pulse-brand\">Produtos</span> <span className=\"text-white\">de Destaque</span>\n          </h3>\n          <p className=\"text-xl text-white/80 max-w-3xl mx-auto\">\n            Conheça alguns dos nossos produtos mais procurados com qualidade excepcional\n          </p>\n        </div>\n\n        <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\">\n          {products.map((product, index) => (\n            <div key={product.id} className=\"group relative overflow-hidden rounded-2xl bg-[#111111] border border-[#333] hover-tilt scroll-animate transform-3d\">\n              <img \n                src={product.imagem} \n                alt={product.titulo} \n                className=\"w-full h-64 object-cover group-hover:scale-110 transition-transform duration-300\"\n              />\n              <div className=\"absolute inset-0 bg-gradient-to-t from-black/80 to-transparent group-hover:from-black/60 transition-all duration-300\"></div>\n              <div className=\"absolute bottom-0 left-0 p-6 group-hover:translate-y-0 transition-transform duration-300\">\n                <h4 className={`text-xl font-heading font-semibold mb-2 ${titleColors[index % titleColors.length]} group-hover:animate-pulse-brand`}>\n                  {product.titulo}\n                </h4>\n                <p className=\"text-white/80 mb-3\">{product.descricao}</p>\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-brand-coral font-semibold group-hover:animate-glow\">{product.preco}</span>\n                  <Button \n                    variant=\"link\" \n                    className=\"text-brand-turquoise hover:text-brand-turquoise transition-colors p-0 hover-lift\"\n                    asChild\n                  >\n                    <Link href=\"/loja/papel-parede\">Ver Mais</Link>\n                  </Button>\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":3386},"client/src/components/scroll-animations.tsx":{"content":"import { useEffect } from 'react';\n\nexport default function ScrollAnimations() {\n  useEffect(() => {\n    // Small delay to ensure DOM is ready\n    const timer = setTimeout(() => {\n      const observerOptions = {\n        threshold: 0.1,\n        rootMargin: '0px 0px -50px 0px',\n      };\n\n      const observer = new IntersectionObserver((entries) => {\n        entries.forEach((entry) => {\n          if (entry.isIntersecting) {\n            entry.target.classList.add('in-view');\n          }\n        });\n      }, observerOptions);\n\n      // Observe all elements with scroll animation classes\n      const animateElements = document.querySelectorAll(\n        '.scroll-animate, .scroll-animate-left, .scroll-animate-right'\n      );\n\n      animateElements.forEach((el) => observer.observe(el));\n\n      return () => {\n        observer.disconnect();\n      };\n    }, 100);\n\n    return () => {\n      clearTimeout(timer);\n    };\n  }, []);\n\n  return null;\n}","size_bytes":943},"client/src/components/services-section.tsx":{"content":"import { Palette, Printer, Scissors, Lightbulb, Shield, Car, Sparkles, ArrowRight } from \"lucide-react\";\nimport { useState, useRef } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Link } from \"wouter\";\n\nconst services = [\n  {\n    icon: Palette,\n    title: \"Design Gráfico\",\n    description: \"Criação e desenvolvimento de identidade visual completa\",\n    color: \"from-brand-yellow to-brand-coral\",\n    titleColor: \"text-brand-yellow\",\n    link: \"/servico-design-grafico\"\n  },\n  {\n    icon: Printer,\n    title: \"Impressão Digital\",\n    description: \"Em vinil, lona, canvas e papel de parede com alta definição e cores vibrantes\",\n    color: \"from-brand-turquoise to-brand-blue\",\n    titleColor: \"text-brand-turquoise\",\n    link: \"/servico-impressao-digital\"\n  },\n  {\n    icon: Scissors,\n    title: \"Corte de Vinil\",\n    description: \"Para decoração de espaços e viaturas\",\n    color: \"from-brand-blue to-brand-coral\",\n    titleColor: \"text-brand-blue\",\n    link: \"/servico-autocolantes\"\n  },\n  {\n    icon: Lightbulb,\n    title: \"Reclames Luminosos e Painéis\",\n    description: \"Sinalização interior e exterior profissional para o seu negócio\",\n    color: \"from-brand-coral to-brand-yellow\",\n    titleColor: \"text-brand-coral\",\n    link: \"/servico-espacos-comerciais\"\n  },\n  {\n    icon: Shield,\n    title: \"Películas de Proteção Solar\",\n    description: \"Reduzem o calor, protegem dos raios UV e proporcionam privacidade, mantendo a luminosidade natural\",\n    color: \"from-brand-yellow to-brand-turquoise\",\n    titleColor: \"text-brand-yellow\",\n    link: \"/servico-peliculas-protecao-solar\"\n  },\n  {\n    icon: Car,\n    title: \"Decoração de Viaturas\",\n    description: \"Destacamo-nos em decoração de camiões, máquinas de obras e viaturas de competição\",\n    color: \"from-brand-turquoise to-brand-coral\",\n    titleColor: \"text-brand-turquoise\",\n    link: \"/servico-decoracao-viaturas\"\n  }\n];\n\nexport default function ServicesSection() {\n  const [hoveredCard, setHoveredCard] = useState<number | null>(null);\n  const [mousePosition, setMousePosition] = useState({ x: 0, y: 0 });\n  const sectionRef = useRef<HTMLElement>(null);\n\n  const handleMouseMove = (e: React.MouseEvent, index: number) => {\n    if (!sectionRef.current) return;\n    \n    const rect = sectionRef.current.getBoundingClientRect();\n    const x = (e.clientX - rect.left) / rect.width;\n    const y = (e.clientY - rect.top) / rect.height;\n    \n    setMousePosition({ x, y });\n    setHoveredCard(index);\n  };\n\n  const handleMouseLeave = () => {\n    setHoveredCard(null);\n  };\n\n  return (\n    <section ref={sectionRef} id=\"servicos\" className=\"py-20 bg-black scroll-animate\">\n      <div className=\"container mx-auto px-4\">\n        <div className=\"text-center mb-16 scroll-animate-left\">\n          <h3 className=\"text-4xl md:text-5xl font-heading font-bold mb-4\">\n            <span className=\"text-brand-yellow animate-pulse-brand\">Nossos Principais</span> <span className=\"text-white\">Serviços</span>\n          </h3>\n          <p className=\"text-xl text-white/80 max-w-3xl mx-auto\">\n            Soluções completas em comunicação visual para destacar sua marca no mercado\n          </p>\n        </div>\n\n        <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\">\n          {services.map((service, index) => {\n            const isHovered = hoveredCard === index;\n            const rotateX = isHovered ? (mousePosition.y - 0.5) * 20 : 0;\n            const rotateY = isHovered ? (mousePosition.x - 0.5) * 20 : 0;\n            \n            return (\n              <Link href={service.link} key={index}>\n                <div \n                  className=\"gradient-border mouse-track transform-3d scroll-animate cursor-pointer\"\n                  style={{\n                    transform: `perspective(1000px) rotateX(${rotateX}deg) rotateY(${rotateY}deg) scale(${isHovered ? 1.05 : 1})`,\n                    transition: isHovered ? 'transform 0.1s ease-out' : 'transform 0.3s ease-out'\n                  }}\n                  onMouseMove={(e) => handleMouseMove(e, index)}\n                  onMouseLeave={handleMouseLeave}\n                >\n                  <div className=\"gradient-border-inner p-6 h-full relative overflow-hidden\">\n                    {/* Floating background effect */}\n                    <div \n                      className=\"absolute inset-0 opacity-10 pointer-events-none\"\n                      style={{\n                        background: `radial-gradient(circle at ${mousePosition.x * 100}% ${mousePosition.y * 100}%, var(--brand-yellow) 0%, transparent 50%)`,\n                        transform: isHovered ? 'scale(1.2)' : 'scale(0.8)',\n                        transition: 'all 0.3s ease'\n                      }}\n                    />\n                    \n                    <div className={`w-16 h-16 bg-gradient-to-r ${service.color} rounded-full flex items-center justify-center mb-4 ${isHovered ? 'animate-bounce-subtle' : ''}`}>\n                      <service.icon className=\"text-black text-2xl\" size={24} />\n                    </div>\n                    <h4 className={`text-xl font-heading font-semibold mb-3 ${service.titleColor} ${isHovered ? 'animate-glow' : ''}`}>\n                      {service.title}\n                    </h4>\n                    <p className=\"text-white/80 mb-4\">{service.description}</p>\n                    \n                    <div className=\"text-brand-turquoise hover:text-brand-turquoise font-semibold transition-colors hover-lift group\">\n                      Ver mais <ArrowRight className=\"ml-2 group-hover:translate-x-1 transition-transform duration-300 inline\" size={16} />\n                    </div>\n                    \n                    {/* Hover accent */}\n                    {isHovered && (\n                      <div className=\"absolute top-2 right-2 text-brand-coral animate-float\">\n                        <Sparkles size={16} />\n                      </div>\n                    )}\n                  </div>\n                </div>\n              </Link>\n            );\n          })}\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":6119},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  // Initialize with a safe default based on SSR-friendly approach\n  const [isMobile, setIsMobile] = React.useState<boolean>(false)\n\n  React.useEffect(() => {\n    // Immediately set the correct value on mount\n    const checkIsMobile = () => window.innerWidth < MOBILE_BREAKPOINT\n    setIsMobile(checkIsMobile())\n\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(checkIsMobile())\n    }\n    mql.addEventListener(\"change\", onChange)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return isMobile\n}\n","size_bytes":691},"client/src/hooks/use-scroll-to-top.tsx":{"content":"import { useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\n\nexport function useScrollToTop() {\n  const [location] = useLocation();\n\n  useEffect(() => {\n    // Check if URL has a hash for scrolling to specific element\n    const hash = window.location.hash;\n    \n    if (hash) {\n      // Wait for page to render then scroll to element\n      setTimeout(() => {\n        const element = document.querySelector(hash);\n        if (element) {\n          const headerOffset = 100; // Account for fixed header\n          const elementPosition = element.getBoundingClientRect().top;\n          const offsetPosition = elementPosition + window.pageYOffset - headerOffset;\n\n          window.scrollTo({\n            top: offsetPosition,\n            behavior: \"smooth\"\n          });\n        }\n      }, 100);\n    } else {\n      // Default behavior - scroll to top\n      window.scrollTo({\n        top: 0,\n        left: 0,\n        behavior: \"smooth\"\n      });\n    }\n  }, [location]);\n}","size_bytes":976},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/admin-texturas.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { ArrowLeft, RefreshCw, CheckCircle, AlertCircle } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport Navigation from \"@/components/navigation\";\nimport Footer from \"@/components/footer\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function AdminTexturas() {\n  const { toast } = useToast();\n  const [isGenerating, setIsGenerating] = useState(false);\n  const [lastResult, setLastResult] = useState<any>(null);\n\n  const handleAutoGenerate = async () => {\n    setIsGenerating(true);\n    try {\n      const response = await fetch('/api/auto-generate-covers', {\n        method: 'POST'\n      });\n      \n      const result = await response.json();\n      setLastResult(result);\n      \n      if (response.ok) {\n        toast({\n          title: \"Geração automática concluída!\",\n          description: `${result.coversGenerated?.length || 0} novas capas geradas.`,\n        });\n      } else {\n        toast({\n          title: \"Erro na geração\",\n          description: result.error || \"Erro desconhecido\",\n          variant: \"destructive\",\n        });\n      }\n    } catch (error) {\n      toast({\n        title: \"Erro\",\n        description: \"Falha na comunicação com o servidor\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsGenerating(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-[#0a0a0a] text-white\">\n      <Navigation />\n      \n      {/* Header */}\n      <div className=\"bg-[#111111] border-b border-[#333] mt-16\">\n        <div className=\"container mx-auto px-4 py-8\">\n          <div className=\"flex items-center gap-4 mb-6\">\n            <Link href=\"/loja\">\n              <Button variant=\"outline\" size=\"sm\" className=\"gap-2 border-[#FFD700] text-[#FFD700] hover:bg-[#FFD700] hover:text-black\">\n                <ArrowLeft className=\"h-4 w-4\" />\n                Voltar à Loja\n              </Button>\n            </Link>\n          </div>\n          <h1 className=\"text-4xl font-bold text-white mb-4\">\n            Administração de <span className=\"text-[#FFD700]\">Texturas</span>\n          </h1>\n          <p className=\"text-gray-300 text-lg\">\n            Gere automaticamente capas para novas categorias de texturas\n          </p>\n        </div>\n      </div>\n\n      {/* Content */}\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"max-w-4xl mx-auto\">\n          \n          {/* Auto Generation Card */}\n          <Card className=\"bg-[#111111] border-[#333] mb-8\">\n            <CardContent className=\"p-8\">\n              <div className=\"text-center mb-8\">\n                <h2 className=\"text-2xl font-bold text-[#FFD700] mb-4\">\n                  Geração Automática de Capas\n                </h2>\n                <p className=\"text-gray-300 mb-6\">\n                  Sempre que adicionar uma nova pasta em texturas, clique no botão abaixo para gerar automaticamente a capa correspondente na loja.\n                </p>\n                \n                <Button\n                  onClick={handleAutoGenerate}\n                  disabled={isGenerating}\n                  className=\"bg-gradient-to-r from-[#FFD700] to-[#20B2AA] text-black font-bold py-3 px-8 hover:opacity-90 disabled:opacity-50\"\n                >\n                  {isGenerating ? (\n                    <>\n                      <RefreshCw className=\"w-5 h-5 mr-2 animate-spin\" />\n                      A Gerar Capas...\n                    </>\n                  ) : (\n                    <>\n                      <RefreshCw className=\"w-5 h-5 mr-2\" />\n                      Gerar Capas Automaticamente\n                    </>\n                  )}\n                </Button>\n              </div>\n\n              {/* Instructions */}\n              <div className=\"bg-[#0a0a0a] rounded-lg p-6 border border-[#333]\">\n                <h3 className=\"text-lg font-semibold text-[#FFD700] mb-4\">Como Funciona:</h3>\n                <ol className=\"text-gray-300 space-y-2 list-decimal list-inside\">\n                  <li>Adicione uma nova pasta em <code className=\"bg-[#333] px-2 py-1 rounded\">loja/papel-de-parede/texturas/</code></li>\n                  <li>Coloque as imagens das texturas dentro da nova pasta</li>\n                  <li>Execute o upload das texturas individuais</li>\n                  <li>Clique no botão \"Gerar Capas Automaticamente\"</li>\n                  <li>O sistema detecta automaticamente novas categorias e cria as capas</li>\n                </ol>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Results */}\n          {lastResult && (\n            <Card className=\"bg-[#111111] border-[#333]\">\n              <CardContent className=\"p-6\">\n                <h3 className=\"text-xl font-bold text-[#FFD700] mb-4\">\n                  Último Resultado\n                </h3>\n                \n                <div className=\"grid md:grid-cols-2 gap-6\">\n                  {/* Categories Found */}\n                  <div>\n                    <h4 className=\"text-white font-semibold mb-3 flex items-center gap-2\">\n                      <CheckCircle className=\"w-5 h-5 text-green-500\" />\n                      Categorias Encontradas ({lastResult.categoriesFound?.length || 0})\n                    </h4>\n                    <div className=\"space-y-2\">\n                      {lastResult.categoriesFound?.map((category: string) => (\n                        <div key={category} className=\"bg-[#0a0a0a] p-3 rounded border border-[#333]\">\n                          <span className=\"text-gray-300\">{category}</span>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n\n                  {/* Generated Covers */}\n                  <div>\n                    <h4 className=\"text-white font-semibold mb-3 flex items-center gap-2\">\n                      {lastResult.coversGenerated?.length > 0 ? (\n                        <CheckCircle className=\"w-5 h-5 text-green-500\" />\n                      ) : (\n                        <AlertCircle className=\"w-5 h-5 text-yellow-500\" />\n                      )}\n                      Capas Geradas ({lastResult.coversGenerated?.length || 0})\n                    </h4>\n                    <div className=\"space-y-2\">\n                      {lastResult.coversGenerated?.length > 0 ? (\n                        lastResult.coversGenerated.map((cover: any) => (\n                          <div key={cover.category} className=\"bg-[#0a0a0a] p-3 rounded border border-[#333]\">\n                            <div className=\"text-[#FFD700] font-semibold\">{cover.category}</div>\n                            <div className=\"text-xs text-gray-400\">Fonte: {cover.source}</div>\n                          </div>\n                        ))\n                      ) : (\n                        <div className=\"bg-[#0a0a0a] p-3 rounded border border-[#333] text-center\">\n                          <span className=\"text-gray-400\">Todas as capas já existem</span>\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"mt-6 p-4 bg-[#0a0a0a] rounded border border-[#333]\">\n                  <p className=\"text-sm text-gray-300\">\n                    <strong>Resultado:</strong> {lastResult.message}\n                  </p>\n                </div>\n              </CardContent>\n            </Card>\n          )}\n        </div>\n      </div>\n\n      <Footer />\n    </div>\n  );\n}","size_bytes":7574},"client/src/pages/aviso-legal.tsx":{"content":"import Navigation from \"@/components/navigation\";\nimport Footer from \"@/components/footer\";\n\nexport default function AvisoLegal() {\n  return (\n    <div className=\"min-h-screen bg-[#0a0a0a] text-white\">\n      <Navigation />\n      \n      <div className=\"pt-32 pb-16 px-4\">\n        <div className=\"max-w-4xl mx-auto\">\n          <h1 className=\"text-4xl md:text-5xl font-bold mb-8 text-center\">\n            Aviso Legal\n          </h1>\n          \n          <div className=\"prose prose-invert prose-lg max-w-none\">\n            <p className=\"text-gray-300 mb-8 text-center\">\n              Última atualização: Agosto de 2025\n            </p>\n\n            <section className=\"mb-8\">\n              <h2 className=\"text-2xl font-bold mb-4 text-[#FFD700]\">1. Identificação da Entidade</h2>\n              <div className=\"text-gray-300 leading-relaxed\">\n                <p className=\"mb-2\"><strong>Denominação:</strong> DOMREALCE</p>\n                <p className=\"mb-2\"><strong>Atividade:</strong> Comunicação Visual e Publicidade</p>\n                <p className=\"mb-2\"><strong>Sede:</strong> [Inserir morada completa]</p>\n                <p className=\"mb-2\"><strong>Número de Contribuinte:</strong> [Inserir NIF]</p>\n                <p className=\"mb-2\"><strong>Email:</strong> info@domrealce.com</p>\n                <p className=\"mb-2\"><strong>Telefone:</strong> +351 930 682 725</p>\n                <p className=\"mb-2\"><strong>Website:</strong> www.domrealce.com</p>\n              </div>\n            </section>\n\n            <section className=\"mb-8\">\n              <h2 className=\"text-2xl font-bold mb-4 text-[#FFD700]\">2. Objeto do Website</h2>\n              <p className=\"text-gray-300 leading-relaxed mb-4\">\n                Este website tem como objetivo apresentar os serviços da DOMREALCE na área \n                da comunicação visual e publicidade, permitir o contacto com clientes, \n                apresentação de portfólio e disponibilização de informações sobre a empresa.\n              </p>\n            </section>\n\n            <section className=\"mb-8\">\n              <h2 className=\"text-2xl font-bold mb-4 text-[#FFD700]\">3. Condições de Utilização</h2>\n              <p className=\"text-gray-300 leading-relaxed mb-4\">\n                A utilização deste website implica a aceitação plena dos presentes termos. \n                Os utilizadores comprometem-se a:\n              </p>\n              <ul className=\"text-gray-300 space-y-2 ml-6\">\n                <li>• Utilizar o website de forma lícita e adequada</li>\n                <li>• Não danificar, inutilizar ou sobrecarregar o website</li>\n                <li>• Não introduzir vírus ou código malicioso</li>\n                <li>• Respeitar os direitos de propriedade intelectual</li>\n                <li>• Não utilizar o website para fins comerciais não autorizados</li>\n              </ul>\n            </section>\n\n            <section className=\"mb-8\">\n              <h2 className=\"text-2xl font-bold mb-4 text-[#FFD700]\">4. Propriedade Intelectual</h2>\n              <p className=\"text-gray-300 leading-relaxed mb-4\">\n                Todos os conteúdos deste website, incluindo textos, imagens, gráficos, logótipos, \n                ícones, fotografias, vídeos e software, são propriedade da DOMREALCE ou dos seus \n                licenciadores e estão protegidos por direitos de autor e outras leis de propriedade intelectual.\n              </p>\n            </section>\n\n            <section className=\"mb-8\">\n              <h2 className=\"text-2xl font-bold mb-4 text-[#FFD700]\">5. Ligações para Sites Externos</h2>\n              <p className=\"text-gray-300 leading-relaxed mb-4\">\n                Este website pode conter ligações para websites de terceiros. A DOMREALCE não \n                controla esses websites externos e não se responsabiliza pelo seu conteúdo, \n                políticas de privacidade ou práticas.\n              </p>\n            </section>\n\n            <section className=\"mb-8\">\n              <h2 className=\"text-2xl font-bold mb-4 text-[#FFD700]\">6. Limitação de Responsabilidade</h2>\n              <p className=\"text-gray-300 leading-relaxed mb-4\">\n                A DOMREALCE não se responsabiliza por:\n              </p>\n              <ul className=\"text-gray-300 space-y-2 ml-6\">\n                <li>• Interrupções temporárias no acesso ao website</li>\n                <li>• Erros ou omissões no conteúdo</li>\n                <li>• Danos diretos ou indiretos resultantes da utilização do website</li>\n                <li>• Vírus ou outros elementos nocivos que possam afetar o equipamento informático</li>\n                <li>• Uso indevido das informações por parte de terceiros</li>\n              </ul>\n            </section>\n\n            <section className=\"mb-8\">\n              <h2 className=\"text-2xl font-bold mb-4 text-[#FFD700]\">7. Disponibilidade do Serviço</h2>\n              <p className=\"text-gray-300 leading-relaxed mb-4\">\n                A DOMREALCE envidará os melhores esforços para garantir a disponibilidade \n                contínua do website, mas não pode garantir que esteja sempre acessível. \n                Poderão ocorrer interrupções para manutenção ou melhoramentos.\n              </p>\n            </section>\n\n            <section className=\"mb-8\">\n              <h2 className=\"text-2xl font-bold mb-4 text-[#FFD700]\">8. Modificações</h2>\n              <p className=\"text-gray-300 leading-relaxed mb-4\">\n                A DOMREALCE reserva-se o direito de modificar, a qualquer momento e sem aviso prévio, \n                o presente aviso legal, bem como as condições de utilização do website.\n              </p>\n            </section>\n\n            <section className=\"mb-8\">\n              <h2 className=\"text-2xl font-bold mb-4 text-[#FFD700]\">9. Lei Aplicável e Jurisdição</h2>\n              <p className=\"text-gray-300 leading-relaxed mb-4\">\n                O presente aviso legal rege-se pela lei portuguesa. Para a resolução de \n                qualquer litígio são competentes os tribunais da comarca da sede da DOMREALCE.\n              </p>\n            </section>\n\n            <section className=\"mb-8\">\n              <h2 className=\"text-2xl font-bold mb-4 text-[#FFD700]\">10. Contactos</h2>\n              <p className=\"text-gray-300 leading-relaxed mb-4\">\n                Para questões relacionadas com este aviso legal:\n              </p>\n              <ul className=\"text-gray-300 space-y-2 ml-6\">\n                <li>• Email: info@domrealce.com</li>\n                <li>• Telefone: +351 930 682 725</li>\n                <li>• Morada: [Inserir morada completa]</li>\n              </ul>\n            </section>\n          </div>\n        </div>\n      </div>\n\n      <Footer />\n    </div>\n  );\n}","size_bytes":6833},"client/src/pages/carrinho.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Link } from \"wouter\";\nimport { Trash2, Plus, Minus, Sparkles } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport Navigation from \"@/components/navigation\";\nimport Footer from \"@/components/footer\";\n\n// Unified CartItem interface that supports both product types\ninterface CartItem {\n  id: string;\n  type: 'papel-parede' | 'quadros-canvas';\n  // Wallpaper properties\n  textureName?: string;\n  textureImage?: string;\n  category?: string;\n  preco?: number;\n  acabamento?: 'brilho' | 'mate';\n  laminacao?: boolean;\n  tipoCola?: 'com-cola' | 'sem-cola';\n  // Canvas properties  \n  canvasName?: string;\n  canvasImage?: string;\n  tamanho?: string;\n  // Common properties\n  largura?: number;\n  altura?: number;\n  larguraCm?: number;\n  alturaCm?: number;\n  area?: number;\n  precoBase?: number;\n  precoTotal: number;\n  quantity?: number;\n  quantidade?: number;\n}\n\nexport default function Carrinho() {\n  const { toast } = useToast();\n  const [cartItems, setCartItems] = useState<CartItem[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    // Load cart from localStorage\n    const savedCart = localStorage.getItem('cart');\n    if (savedCart) {\n      const items = JSON.parse(savedCart);\n      // Add default values if not exists\n      const itemsWithDefaults = items.map((item: CartItem) => ({\n        ...item,\n        quantidade: item.quantidade || item.quantity || 1,\n        largura: item.largura || 0,\n        altura: item.altura || 0,\n        larguraCm: item.larguraCm || 0,\n        alturaCm: item.alturaCm || 0,\n        area: item.area || Math.max(0.01, (item.largura || 0) * (item.altura || 0)),\n        tipoCola: item.tipoCola || 'com-cola'\n      }));\n      setCartItems(itemsWithDefaults);\n    }\n    setIsLoading(false);\n  }, []);\n\n  const updateCartInStorage = (items: CartItem[]) => {\n    localStorage.setItem('cart', JSON.stringify(items));\n    setCartItems(items);\n  };\n\n  const updateItem = (id: string, updates: Partial<CartItem>) => {\n    const updatedItems = cartItems.map(item => {\n      if (item.id === id) {\n        const updatedItem = { ...item, ...updates };\n        \n        // Calculate area if dimensions changed (for wallpaper)\n        if (item.type === 'papel-parede' && ('largura' in updates || 'altura' in updates || 'larguraCm' in updates || 'alturaCm' in updates)) {\n          const largura = updatedItem.largura || 0;\n          const altura = updatedItem.altura || 0;\n          updatedItem.area = Math.max(0.01, largura * altura);\n          \n          // Recalculate total price for wallpaper\n          const area = updatedItem.area || 0.01;\n          const basePrice = (updatedItem.preco || 0) * area;\n          const laminacaoPrice = updatedItem.laminacao ? 8 * area : 0;\n          updatedItem.precoTotal = basePrice + laminacaoPrice;\n        }\n        \n        return updatedItem;\n      }\n      return item;\n    });\n    updateCartInStorage(updatedItems);\n  };\n\n  const updateQuantity = (id: string, quantidade: number) => {\n    if (quantidade < 1) return;\n    updateItem(id, { quantidade });\n  };\n\n  const removeItem = (id: string) => {\n    const updatedItems = cartItems.filter(item => item.id !== id);\n    updateCartInStorage(updatedItems);\n    toast({\n      title: \"Item removido\",\n      description: \"Produto removido do carrinho.\",\n    });\n  };\n\n  const clearCart = () => {\n    setCartItems([]);\n    localStorage.removeItem('cart');\n    toast({\n      title: \"Carrinho limpo\",\n      description: \"Todos os produtos foram removidos do carrinho.\",\n    });\n  };\n\n  const calculateTotal = () => {\n    return cartItems.reduce((total, item) => {\n      return total + (item.precoTotal * (item.quantidade || 1));\n    }, 0);\n  };\n\n  const calculateTotalWithShippingAndIVA = () => {\n    const subtotal = calculateTotal();\n    const shipping = subtotal >= 100 ? 0 : 10;\n    const subtotalWithShipping = subtotal + shipping;\n    const iva = subtotalWithShipping * 0.23; // 23% IVA\n    return {\n      subtotal,\n      shipping,\n      iva,\n      total: subtotalWithShipping + iva\n    };\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-[#0a0a0a] text-white flex items-center justify-center\">\n        <div className=\"animate-spin w-8 h-8 border-4 border-[#FFD700] border-t-transparent rounded-full\" />\n      </div>\n    );\n  }\n\n  const totals = calculateTotalWithShippingAndIVA();\n\n  return (\n    <div className=\"min-h-screen bg-[#0a0a0a] text-white\">\n      <Navigation />\n      \n      {/* Header */}\n      <div className=\"bg-[#111111] border-b border-[#333] mt-16\">\n        <div className=\"container mx-auto px-4 py-8\">\n          <h1 className=\"text-3xl font-bold mb-2\">\n            <span className=\"text-[#FFD700]\">Carrinho</span> de Compras\n          </h1>\n          <p className=\"text-gray-400\">\n            Revise os seus produtos antes de finalizar a compra\n          </p>\n        </div>\n      </div>\n\n      {/* Main Content */}\n      <div className=\"container mx-auto px-4 py-8\">\n        {cartItems.length === 0 ? (\n          <div className=\"text-center py-16\">\n            <div className=\"text-6xl mb-4\">🛒</div>\n            <h2 className=\"text-2xl font-bold text-gray-400 mb-4\">\n              Carrinho vazio\n            </h2>\n            <p className=\"text-gray-500 mb-6\">\n              Adicione produtos à sua compra para continuar.\n            </p>\n            <Link href=\"/loja\">\n              <Button className=\"bg-gradient-to-r from-[#FFD700] to-[#20B2AA] text-black font-bold\">\n                Ver Loja\n              </Button>\n            </Link>\n          </div>\n        ) : (\n          <div className=\"grid lg:grid-cols-3 gap-8\">\n            {/* Cart Items */}\n            <div className=\"lg:col-span-2 space-y-6\">\n              <div className=\"flex justify-between items-center\">\n                <h2 className=\"text-2xl font-bold text-[#FFD700]\">\n                  Produtos no Carrinho ({cartItems.length})\n                </h2>\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={clearCart}\n                  className=\"border-red-500 text-red-500 hover:bg-red-500 hover:text-white\"\n                >\n                  <Trash2 className=\"w-4 h-4 mr-1\" />\n                  Limpar Carrinho\n                </Button>\n              </div>\n\n              {cartItems.map((item) => (\n                <Card key={item.id} className=\"bg-[#111111] border-[#333]\">\n                  <CardContent className=\"p-6\">\n                    <div className=\"grid md:grid-cols-4 gap-6\">\n                      {/* Product Image */}\n                      <div className=\"md:col-span-1\">\n                        <img\n                          src={item.type === 'papel-parede' ? item.textureImage : item.canvasImage}\n                          alt={item.type === 'papel-parede' ? item.textureName : item.canvasName}\n                          className=\"w-full aspect-square object-cover rounded-lg border border-[#333]\"\n                        />\n                      </div>\n\n                      {/* Product Info & Customization */}\n                      <div className=\"md:col-span-2 space-y-4\">\n                        <div>\n                          <h3 className=\"text-lg font-bold text-[#FFD700] mb-2\">\n                            {item.type === 'papel-parede' ? item.textureName : item.canvasName}\n                          </h3>\n                          <Badge className=\"bg-[#20B2AA] text-black\">\n                            {item.type === 'papel-parede' ? 'PAPEL DE PAREDE' : 'QUADROS EM CANVAS'}\n                          </Badge>\n                        </div>\n\n                        {/* Canvas Size Display */}\n                        {item.type === 'quadros-canvas' && (\n                          <div className=\"p-3 bg-[#0a0a0a] rounded-lg border border-[#333]\">\n                            <div className=\"flex justify-between\">\n                              <span className=\"text-sm text-gray-400\">Tamanho:</span>\n                              <span className=\"text-sm font-semibold\">{item.tamanho}cm</span>\n                            </div>\n                            <div className=\"flex justify-between\">\n                              <span className=\"text-sm text-gray-400\">Dimensões:</span>\n                              <span className=\"text-sm\">{item.larguraCm}×{item.alturaCm}cm</span>\n                            </div>\n                          </div>\n                        )}\n\n                        {/* Wallpaper Options */}\n                        {item.type === 'papel-parede' && (\n                          <div className=\"space-y-3\">\n                            {/* Acabamento */}\n                            <div>\n                              <label className=\"block text-sm font-medium text-[#FFD700] mb-2\">\n                                Acabamento\n                              </label>\n                              <Select \n                                value={item.acabamento || 'mate'} \n                                onValueChange={(value: 'brilho' | 'mate') => updateItem(item.id, { acabamento: value })}\n                              >\n                                <SelectTrigger className=\"bg-[#0a0a0a] border-[#333] text-white\">\n                                  <SelectValue />\n                                </SelectTrigger>\n                                <SelectContent className=\"bg-[#111111] border-[#333]\">\n                                  <SelectItem value=\"brilho\" className=\"text-white hover:bg-[#333]\">\n                                    <div className=\"flex items-center gap-2\">\n                                      <Sparkles className=\"h-4 w-4\" />\n                                      Brilho\n                                    </div>\n                                  </SelectItem>\n                                  <SelectItem value=\"mate\" className=\"text-white hover:bg-[#333]\">\n                                    <div className=\"flex items-center gap-2\">\n                                      <div className=\"h-4 w-4 bg-gray-400 rounded-full\"></div>\n                                      Mate\n                                    </div>\n                                  </SelectItem>\n                                </SelectContent>\n                              </Select>\n                            </div>\n\n                            {/* Laminação */}\n                            <div className=\"flex items-center gap-3\">\n                              <input\n                                type=\"checkbox\"\n                                id={`laminacao-${item.id}`}\n                                checked={item.laminacao || false}\n                                onChange={(e) => updateItem(item.id, { laminacao: e.target.checked })}\n                                className=\"rounded border-[#333] bg-[#0a0a0a] text-[#FFD700] focus:ring-[#FFD700]\"\n                              />\n                              <label htmlFor={`laminacao-${item.id}`} className=\"text-sm text-gray-300 flex-1\">\n                                Laminação (+€8/m²) - Proteção contra riscos e raios UV\n                              </label>\n                              <Sparkles className=\"h-4 w-4 text-[#FFD700]\" />\n                            </div>\n\n                            {/* Dimensions for wallpaper */}\n                            <div className=\"grid grid-cols-2 gap-3\">\n                              <div>\n                                <label className=\"block text-sm font-medium text-[#FFD700] mb-2\">\n                                  Largura (cm)\n                                </label>\n                                <input\n                                  type=\"number\"\n                                  value={item.larguraCm || ''}\n                                  onChange={(e) => {\n                                    const numericValue = parseFloat(e.target.value);\n                                    if (!isNaN(numericValue) && numericValue > 0) {\n                                      const larguraM = numericValue / 100;\n                                      updateItem(item.id, { larguraCm: numericValue, largura: larguraM });\n                                    }\n                                  }}\n                                  className=\"w-full px-3 py-2 bg-[#0a0a0a] border border-[#333] rounded text-white text-sm focus:border-[#FFD700] focus:outline-none\"\n                                />\n                              </div>\n                              <div>\n                                <label className=\"block text-sm font-medium text-[#FFD700] mb-2\">\n                                  Altura (cm)\n                                </label>\n                                <input\n                                  type=\"number\"\n                                  value={item.alturaCm || ''}\n                                  onChange={(e) => {\n                                    const numericValue = parseFloat(e.target.value);\n                                    if (!isNaN(numericValue) && numericValue > 0) {\n                                      const alturaM = numericValue / 100;\n                                      updateItem(item.id, { alturaCm: numericValue, altura: alturaM });\n                                    }\n                                  }}\n                                  className=\"w-full px-3 py-2 bg-[#0a0a0a] border border-[#333] rounded text-white text-sm focus:border-[#FFD700] focus:outline-none\"\n                                />\n                              </div>\n                            </div>\n                          </div>\n                        )}\n\n                        {/* Quantity */}\n                        <div>\n                          <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n                            Quantidade\n                          </label>\n                          <div className=\"flex items-center gap-2\">\n                            <Button\n                              variant=\"outline\"\n                              size=\"sm\"\n                              onClick={() => updateQuantity(item.id, (item.quantidade || 1) - 1)}\n                              disabled={(item.quantidade || 1) <= 1}\n                              className=\"border-[#333] text-white hover:bg-[#333]\"\n                            >\n                              <Minus className=\"h-4 w-4\" />\n                            </Button>\n                            <span className=\"w-12 text-center font-semibold\">\n                              {item.quantidade || 1}\n                            </span>\n                            <Button\n                              variant=\"outline\"\n                              size=\"sm\"\n                              onClick={() => updateQuantity(item.id, (item.quantidade || 1) + 1)}\n                              className=\"border-[#333] text-white hover:bg-[#333]\"\n                            >\n                              <Plus className=\"h-4 w-4\" />\n                            </Button>\n                          </div>\n                        </div>\n                      </div>\n\n                      {/* Price & Actions */}\n                      <div className=\"md:col-span-1 text-right space-y-4\">\n                        <div>\n                          {item.type === 'papel-parede' && (\n                            <>\n                              <p className=\"text-sm text-[#FFD700]\">Preço por m²:</p>\n                              <p className=\"text-md font-semibold text-white\">€{item.preco}/m²</p>\n                              {item.laminacao && (\n                                <p className=\"text-xs text-gray-400\">+ €8/m² laminação</p>\n                              )}\n                              <div className=\"mt-2 pt-2 border-t border-[#333]\">\n                                <p className=\"text-sm text-[#FFD700]\">Total área ({((item.largura || 0) * (item.altura || 0)).toFixed(2)} m²):</p>\n                                <p className=\"text-lg font-semibold text-[#FFD700]\">€{item.precoTotal.toFixed(2)}</p>\n                              </div>\n                            </>\n                          )}\n                          \n                          {item.type === 'quadros-canvas' && (\n                            <>\n                              <p className=\"text-sm text-[#FFD700]\">Preço base:</p>\n                              <p className=\"text-md font-semibold text-white\">€{(item.precoBase || 0).toFixed(2)}</p>\n                              <div className=\"mt-2 pt-2 border-t border-[#333]\">\n                                <p className=\"text-sm text-[#FFD700]\">Total (c/ IVA):</p>\n                                <p className=\"text-lg font-semibold text-[#FFD700]\">€{item.precoTotal.toFixed(2)}</p>\n                              </div>\n                            </>\n                          )}\n                          \n                          <p className=\"text-sm text-gray-400 mt-2\">\n                            Final: €{(item.precoTotal * (item.quantidade || 1)).toFixed(2)}\n                          </p>\n                        </div>\n                        \n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => removeItem(item.id)}\n                          className=\"border-red-500 text-red-500 hover:bg-red-500 hover:text-white\"\n                        >\n                          <Trash2 className=\"w-4 h-4 mr-1\" />\n                          Remover\n                        </Button>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n\n            {/* Order Summary */}\n            <div className=\"lg:col-span-1\">\n              <Card className=\"bg-[#111111] border-[#333] sticky top-24\">\n                <CardContent className=\"p-6\">\n                  <h3 className=\"text-xl font-bold mb-4 text-[#FFD700]\">\n                    Resumo do Pedido\n                  </h3>\n                  \n                  <div className=\"space-y-3 mb-6\">\n                    <div className=\"flex justify-between\">\n                      <span>Subtotal:</span>\n                      <span>€{totals.subtotal.toFixed(2)}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>Envio:</span>\n                      <span className={totals.shipping === 0 ? \"text-green-400\" : \"\"}>\n                        {totals.shipping === 0 ? \"Grátis\" : `€${totals.shipping.toFixed(2)}`}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>IVA (23%):</span>\n                      <span>€{totals.iva.toFixed(2)}</span>\n                    </div>\n                    <div className=\"flex justify-between font-bold text-lg border-t border-[#333] pt-3\">\n                      <span>Total:</span>\n                      <span className=\"text-[#FFD700]\">€{totals.total.toFixed(2)}</span>\n                    </div>\n                  </div>\n\n                  {totals.subtotal < 100 && (\n                    <div className=\"mb-4 p-3 bg-blue-900/20 border border-blue-500/30 rounded-lg\">\n                      <p className=\"text-xs text-blue-200\">\n                        💡 Adicione mais €{(100 - totals.subtotal).toFixed(2)} para envio gratuito!\n                      </p>\n                    </div>\n                  )}\n                  \n                  <Link href=\"/checkout\">\n                    <Button className=\"w-full bg-gradient-to-r from-[#FFD700] to-[#20B2AA] text-black font-bold py-3\">\n                      Finalizar Compra\n                    </Button>\n                  </Link>\n                  \n                  <Link href=\"/loja\">\n                    <Button variant=\"outline\" className=\"w-full mt-3 border-[#333] text-white hover:bg-[#333]\">\n                      Continuar Comprando\n                    </Button>\n                  </Link>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        )}\n      </div>\n\n      <Footer />\n    </div>\n  );\n}","size_bytes":20636},"client/src/pages/checkout.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Separator } from \"@/components/ui/separator\";\nimport Navigation from \"@/components/navigation\";\nimport Footer from \"@/components/footer\";\nimport {\n  ShoppingCart,\n  CreditCard,\n  Truck,\n  Shield,\n  ArrowLeft,\n} from \"lucide-react\";\nimport { Link, useLocation } from \"wouter\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface CartItem {\n  id: string;\n  textureName: string;\n  textureImage: string;\n  category: string;\n  preco: number;\n  acabamento: \"brilho\" | \"mate\";\n  laminacao: boolean;\n  tipoCola?: \"com-cola\" | \"sem-cola\";\n  largura?: number;\n  altura?: number;\n  larguraCm?: number;\n  alturaCm?: number;\n  area?: number;\n  precoTotal: number;\n  quantidade?: number;\n}\n\nexport default function Checkout() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const [cartItems, setCartItems] = useState<CartItem[]>([]);\n  const [isProcessing, setIsProcessing] = useState(false);\n\n  // Dados do cliente\n  const [customerData, setCustomerData] = useState({\n    nome: \"\",\n    email: \"\",\n    telefone: \"\",\n    morada: \"\",\n    codigoPostal: \"\",\n    cidade: \"\",\n    nif: \"\",\n  });\n\n  // Dados de pagamento\n  const [paymentData, setPaymentData] = useState({\n    metodoPagamento: \"mbway\", // MB WAY como padrão (mais popular)\n  });\n\n  useEffect(() => {\n    // Carregar carrinho do localStorage\n    const savedCart = localStorage.getItem(\"cart\");\n    if (savedCart) {\n      const items = JSON.parse(savedCart);\n\n      // Verificar se há itens sem medidas\n      const itemsSemMedidas = items.filter(\n        (item: CartItem) =>\n          !item.larguraCm ||\n          !item.alturaCm ||\n          item.larguraCm === 0 ||\n          item.alturaCm === 0,\n      );\n\n      if (itemsSemMedidas.length > 0) {\n        toast({\n          title: \"Medidas em falta\",\n          description:\n            \"Por favor, complete as medidas no carrinho antes de finalizar.\",\n          variant: \"destructive\",\n        });\n        setLocation(\"/carrinho\");\n        return;\n      }\n\n      setCartItems(items);\n    } else {\n      setLocation(\"/carrinho\");\n    }\n  }, []);\n\n  const totalCarrinho = cartItems.reduce(\n    (total, item) => total + item.precoTotal * (item.quantidade || 1),\n    0,\n  );\n\n  const custoEnvio = totalCarrinho > 100 ? 0 : 15;\n  const ivaRate = 0.23; // 23% IVA em Portugal\n  const totalSemIva = totalCarrinho + custoEnvio;\n  const valorIva = totalSemIva * ivaRate;\n  const totalFinal = totalSemIva + valorIva;\n\n  const handleFinalizarPedido = async () => {\n    // Validar dados obrigatórios\n    if (\n      !customerData.nome ||\n      !customerData.email ||\n      !customerData.telefone ||\n      !customerData.morada ||\n      !customerData.codigoPostal ||\n      !customerData.cidade\n    ) {\n      toast({\n        title: \"Dados incompletos\",\n        description: \"Por favor, preencha todos os campos obrigatórios.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Validação do método de pagamento\n    if (!paymentData.metodoPagamento) {\n      toast({\n        title: \"Método de pagamento não selecionado\",\n        description: \"Por favor, escolha um método de pagamento.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setIsProcessing(true);\n\n    try {\n      const orderId = `DP${Date.now()}`;\n\n      // Preparar dados para o pagamento\n      const paymentRequest = {\n        method: getPaymentMethod(),\n        orderId,\n        amount: totalFinal,\n        customerData: {\n          email: customerData.email,\n          phone: customerData.telefone,\n        },\n        returnUrls: {\n          success: `${window.location.origin}/pedido-confirmado`,\n          error: `${window.location.origin}/checkout`,\n          cancel: `${window.location.origin}/checkout`,\n        },\n      };\n\n      // Criar pagamento\n      const response = await fetch(\"/api/payments/create\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(paymentRequest),\n      });\n\n      const result = await response.json();\n      console.log(\"Payment API result:\", result);\n\n      if (!result.success) {\n        throw new Error(result.message || \"Erro ao processar pagamento\");\n      }\n\n      // Processar resposta baseada no método de pagamento\n      const method = getPaymentMethod();\n\n      if (method === \"mbway\") {\n        // Mostrar instruções MB WAY\n        toast({\n          title: \"📱 MB WAY enviado!\",\n          description: \"Confirme o pagamento no seu telemóvel.\",\n          duration: 6000,\n        });\n\n        // Monitorizar status do pagamento\n        monitorMBWayPayment(result.data.requestId, orderId);\n      } else {\n        // Multibanco - mostrar referências\n        showPaymentInstructions(method, result.data, orderId);\n      }\n    } catch (error) {\n      console.error(\"Payment error:\", error);\n      toast({\n        title: \"Erro no processamento\",\n        description:\n          error instanceof Error\n            ? error.message\n            : \"Ocorreu um erro. Tente novamente.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  const getPaymentMethod = () => {\n    switch (paymentData.metodoPagamento) {\n      case \"transferencia\":\n        return \"multibanco\";\n      case \"mbway\":\n        return \"mbway\";\n      default:\n        return \"mbway\"; // Padrão para MB WAY\n    }\n  };\n\n  const monitorMBWayPayment = async (requestId: string, orderId: string) => {\n    const maxAttempts = 48; // 4 minutos (48 x 5 segundos)\n    let attempts = 0;\n\n    const checkStatus = async () => {\n      try {\n        const response = await fetch(\"/api/payments/mbway/status\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify({ requestId }),\n        });\n\n        const result = await response.json();\n\n        if (result.status === \"000\") {\n          // Pagamento confirmado\n          localStorage.removeItem(\"cart\");\n          toast({\n            title: \"Pagamento confirmado!\",\n            description: \"O seu pedido foi processado com sucesso.\",\n          });\n          setLocation(`/pedido-confirmado?orderId=${orderId}`);\n        } else if (result.status === \"101\") {\n          // Pagamento expirado\n          toast({\n            title: \"Pagamento expirado\",\n            description: \"O pagamento MB WAY expirou. Tente novamente.\",\n            variant: \"destructive\",\n          });\n        } else if (attempts < maxAttempts) {\n          // Continuar a verificar\n          setTimeout(checkStatus, 5000);\n          attempts++;\n        } else {\n          // Timeout\n          toast({\n            title: \"Timeout do pagamento\",\n            description:\n              \"Não foi possível confirmar o pagamento. Contacte-nos se já efectuou o pagamento.\",\n            variant: \"destructive\",\n          });\n        }\n      } catch (error) {\n        console.error(\"Error checking payment status:\", error);\n      }\n    };\n\n    checkStatus();\n  };\n\n  const showPaymentInstructions = (\n    method: string,\n    data: any,\n    orderId: string,\n  ) => {\n    if (method === \"multibanco\") {\n      toast({\n        title: \"✅ Referência Multibanco gerada\",\n        description: \"Consulte os detalhes de pagamento abaixo.\",\n        duration: 5000,\n      });\n    }\n\n    // Guardar dados do pedido temporariamente\n    localStorage.setItem(\n      \"pendingOrder\",\n      JSON.stringify({\n        orderId,\n        method,\n        data,\n        amount: totalFinal,\n        customerData,\n      }),\n    );\n\n    // Redirecionar para página de instruções\n    setLocation(`/instrucoes-pagamento?method=${method}&orderId=${orderId}`);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-[#0a0a0a] text-white\">\n      <Navigation />\n\n      <div className=\"container mx-auto px-4 py-8\">\n        {/* Header */}\n        <div className=\"flex items-center gap-4 mb-8\">\n          <Link href=\"/carrinho\">\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              className=\"border-[#333] text-white hover:bg-[#333]\"\n            >\n              <ArrowLeft className=\"h-4 w-4 mr-2\" />\n              Voltar ao Carrinho\n            </Button>\n          </Link>\n          <h1 className=\"text-3xl font-bold text-[#FFD700]\">\n            <CreditCard className=\"inline-block w-8 h-8 mr-3\" />\n            Finalizar Compra\n          </h1>\n        </div>\n\n        <div className=\"grid lg:grid-cols-3 gap-8\">\n          {/* Formulário de dados */}\n          <div className=\"lg:col-span-2 space-y-6\">\n            {/* Dados do cliente */}\n            <Card className=\"bg-[#111111] border-[#333]\">\n              <CardHeader>\n                <CardTitle className=\"text-[#FFD700]\">\n                  Dados de Facturação\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid md:grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"nome\" className=\"text-gray-300\">\n                      Nome Completo *\n                    </Label>\n                    <Input\n                      id=\"nome\"\n                      value={customerData.nome}\n                      onChange={(e) =>\n                        setCustomerData({\n                          ...customerData,\n                          nome: e.target.value,\n                        })\n                      }\n                      className=\"bg-[#0a0a0a] border-[#333] text-white\"\n                      required\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"email\" className=\"text-gray-300\">\n                      Email *\n                    </Label>\n                    <Input\n                      id=\"email\"\n                      type=\"email\"\n                      value={customerData.email}\n                      onChange={(e) =>\n                        setCustomerData({\n                          ...customerData,\n                          email: e.target.value,\n                        })\n                      }\n                      className=\"bg-[#0a0a0a] border-[#333] text-white\"\n                      required\n                    />\n                  </div>\n                </div>\n\n                <div className=\"grid md:grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"telefone\" className=\"text-gray-300\">\n                      Telefone *\n                    </Label>\n                    <Input\n                      id=\"telefone\"\n                      value={customerData.telefone}\n                      onChange={(e) =>\n                        setCustomerData({\n                          ...customerData,\n                          telefone: e.target.value,\n                        })\n                      }\n                      className=\"bg-[#0a0a0a] border-[#333] text-white\"\n                      required\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"nif\" className=\"text-gray-300\">\n                      NIF (opcional)\n                    </Label>\n                    <Input\n                      id=\"nif\"\n                      value={customerData.nif}\n                      onChange={(e) =>\n                        setCustomerData({\n                          ...customerData,\n                          nif: e.target.value,\n                        })\n                      }\n                      className=\"bg-[#0a0a0a] border-[#333] text-white\"\n                    />\n                  </div>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"morada\" className=\"text-gray-300\">\n                    Morada *\n                  </Label>\n                  <Input\n                    id=\"morada\"\n                    value={customerData.morada}\n                    onChange={(e) =>\n                      setCustomerData({\n                        ...customerData,\n                        morada: e.target.value,\n                      })\n                    }\n                    className=\"bg-[#0a0a0a] border-[#333] text-white\"\n                    required\n                  />\n                </div>\n\n                <div className=\"grid md:grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"codigoPostal\" className=\"text-gray-300\">\n                      Código Postal *\n                    </Label>\n                    <Input\n                      id=\"codigoPostal\"\n                      value={customerData.codigoPostal}\n                      onChange={(e) =>\n                        setCustomerData({\n                          ...customerData,\n                          codigoPostal: e.target.value,\n                        })\n                      }\n                      placeholder=\"0000-000\"\n                      className=\"bg-[#0a0a0a] border-[#333] text-white\"\n                      required\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"cidade\" className=\"text-gray-300\">\n                      Cidade *\n                    </Label>\n                    <Input\n                      id=\"cidade\"\n                      value={customerData.cidade}\n                      onChange={(e) =>\n                        setCustomerData({\n                          ...customerData,\n                          cidade: e.target.value,\n                        })\n                      }\n                      className=\"bg-[#0a0a0a] border-[#333] text-white\"\n                      required\n                    />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Método de pagamento */}\n            <Card className=\"bg-[#111111] border-[#333]\">\n              <CardHeader>\n                <CardTitle className=\"text-[#FFD700]\">\n                  Método de Pagamento\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <Select\n                  value={paymentData.metodoPagamento}\n                  onValueChange={(value) =>\n                    setPaymentData({ ...paymentData, metodoPagamento: value })\n                  }\n                >\n                  <SelectTrigger className=\"bg-[#0a0a0a] border-[#333] text-white\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent className=\"bg-[#111111] border-[#333]\">\n                    <SelectItem\n                      value=\"mbway\"\n                      className=\"text-white hover:bg-[#333]\"\n                    >\n                      💚 MB WAY (Recomendado)\n                    </SelectItem>\n                    <SelectItem\n                      value=\"transferencia\"\n                      className=\"text-white hover:bg-[#333]\"\n                    >\n                      🏧 Multibanco\n                    </SelectItem>\n                  </SelectContent>\n                </Select>\n\n                {paymentData.metodoPagamento === \"transferencia\" && (\n                  <div className=\"p-4 bg-[#0a0a0a] rounded border border-[#333]\">\n                    <p className=\"text-gray-300 text-sm\">\n                      Após confirmar o pedido, receberá os dados bancários por\n                      email para efectuar a transferência.\n                    </p>\n                  </div>\n                )}\n\n                {paymentData.metodoPagamento === \"mbway\" && (\n                  <div className=\"p-4 bg-[#0a0a0a] rounded border border-[#333]\">\n                    <div className=\"flex items-center space-x-2 mb-2\">\n                      <div className=\"w-6 h-6 bg-green-600 rounded-full flex items-center justify-center\">\n                        <span className=\"text-white text-xs\">✓</span>\n                      </div>\n                      <span className=\"text-green-400 font-medium\">\n                        MB WAY - Pagamento Instantâneo\n                      </span>\n                    </div>\n                    <p className=\"text-gray-300 text-sm\">\n                      Será enviado um pedido MB WAY para o número de telefone\n                      indicado. Confirme no seu telemóvel para finalizar o\n                      pagamento.\n                    </p>\n                  </div>\n                )}\n\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Resumo do pedido */}\n          <div className=\"lg:col-span-1\">\n            <Card className=\"bg-[#111111] border-[#333] sticky top-24\">\n              <CardHeader>\n                <CardTitle className=\"text-[#FFD700] flex items-center gap-2\">\n                  <ShoppingCart className=\"h-5 w-5\" />\n                  Resumo do Pedido\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                {/* Itens do carrinho */}\n                <div className=\"space-y-3\">\n                  {cartItems.map((item) => (\n                    <div\n                      key={item.id}\n                      className=\"flex gap-3 p-3 bg-[#0a0a0a] rounded border border-[#333]\"\n                    >\n                      <img\n                        src={item.textureImage}\n                        alt={item.textureName}\n                        className=\"w-16 h-16 object-cover rounded\"\n                      />\n                      <div className=\"flex-1 min-w-0\">\n                        <h4 className=\"text-sm font-medium text-white truncate\">\n                          {item.textureName}\n                        </h4>\n                        <p className=\"text-xs text-gray-400\">\n                          {item.larguraCm}×{item.alturaCm}cm ={\" \"}\n                          {((item.largura || 0) * (item.altura || 0)).toFixed(\n                            2,\n                          )}\n                          m²\n                        </p>\n                        <p className=\"text-xs text-gray-400\">\n                          {item.acabamento} •{\" \"}\n                          {item.tipoCola === \"com-cola\"\n                            ? \"Com cola\"\n                            : \"Sem cola\"}\n                          {item.laminacao && \" • Laminação\"}\n                        </p>\n                        <p className=\"text-sm font-semibold text-[#FFD700]\">\n                          €\n                          {(item.precoTotal * (item.quantidade || 1)).toFixed(\n                            2,\n                          )}\n                        </p>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n\n                <Separator className=\"bg-[#333]\" />\n\n                {/* Totais */}\n                <div className=\"space-y-2\">\n                  <div className=\"flex justify-between text-sm\">\n                    <span className=\"text-gray-300\">Subtotal:</span>\n                    <span className=\"text-white\">\n                      €{totalCarrinho.toFixed(2)}\n                    </span>\n                  </div>\n                  <div className=\"flex justify-between text-sm\">\n                    <span className=\"text-gray-300 flex items-center gap-1\">\n                      <Truck className=\"h-4 w-4\" />\n                      Envio:\n                    </span>\n                    <span className=\"text-white\">\n                      {custoEnvio === 0\n                        ? \"Grátis\"\n                        : `€${custoEnvio.toFixed(2)}`}\n                    </span>\n                  </div>\n                  {custoEnvio === 0 && (\n                    <p className=\"text-xs text-green-400\">\n                      Envio grátis para compras acima de €100\n                    </p>\n                  )}\n                  <div className=\"flex justify-between text-sm\">\n                    <span className=\"text-gray-300\">IVA (23%):</span>\n                    <span className=\"text-white\">€{valorIva.toFixed(2)}</span>\n                  </div>\n\n                  <Separator className=\"bg-[#333]\" />\n\n                  <div className=\"flex justify-between text-lg font-bold\">\n                    <span className=\"text-[#FFD700]\">Total:</span>\n                    <span className=\"text-[#FFD700]\">\n                      €{totalFinal.toFixed(2)}\n                    </span>\n                  </div>\n                </div>\n\n                <div className=\"flex items-center gap-2 text-xs text-gray-400\">\n                  <Shield className=\"h-4 w-4\" />\n                  <span>Pagamento seguro e protegido</span>\n                </div>\n\n                {/* Botão finalizar */}\n                <Button\n                  onClick={handleFinalizarPedido}\n                  disabled={isProcessing || cartItems.length === 0}\n                  className=\"w-full bg-gradient-to-r from-[#FFD700] to-[#20B2AA] text-black font-bold py-3 hover:opacity-90 disabled:opacity-50\"\n                >\n                  {isProcessing\n                    ? \"A processar...\"\n                    : `Finalizar Pedido - €${totalFinal.toFixed(2)}`}\n                </Button>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":21677},"client/src/pages/como-aplicar-papel-parede.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { ArrowLeft, CheckCircle, AlertCircle, Download } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport Navigation from \"@/components/navigation\";\nimport Footer from \"@/components/footer\";\n\nexport default function ComoAplicarPapelParede() {\n  return (\n    <div className=\"min-h-screen bg-[#0a0a0a] text-white\">\n      <Navigation />\n      \n      {/* Header */}\n      <div className=\"bg-[#111111] border-b border-[#333] mt-16\">\n        <div className=\"container mx-auto px-4 py-8\">\n          <div className=\"flex items-center gap-4 mb-6\">\n            <Link href=\"/loja/papel-parede\">\n              <Button variant=\"outline\" size=\"sm\" className=\"gap-2 border-[#FFD700] text-[#FFD700] hover:bg-[#FFD700] hover:text-black\">\n                <ArrowLeft className=\"h-4 w-4\" />\n                Voltar ao Papel de Parede\n              </Button>\n            </Link>\n          </div>\n          <h1 className=\"text-4xl font-bold text-white mb-4\">\n            Manuais de <span className=\"text-[#FFD700]\">Aplicação</span>\n          </h1>\n          <p className=\"text-gray-300 text-lg\">\n            Faça download dos manuais de instruções de aplicação profissional\n          </p>\n        </div>\n      </div>\n\n      {/* Content */}\n      <div className=\"container mx-auto px-4 py-8\">\n        \n        {/* Manuais de Aplicação */}\n        <div className=\"mb-12\">\n          <h2 className=\"text-2xl font-bold text-[#FFD700] mb-6 text-center\">\n            📚 Manuais de Instrução de Aplicação\n          </h2>\n          <p className=\"text-gray-300 text-center mb-8\">\n            Faça download dos nossos manuais detalhados para aplicação profissional de papel de parede\n          </p>\n          \n          <div className=\"grid md:grid-cols-2 gap-6 max-w-4xl mx-auto\">\n            {/* Manual Vinil Autocolante */}\n            <Card className=\"bg-[#111111] border-[#20B2AA] hover:border-[#20B2AA]/80 transition-colors\">\n              <CardContent className=\"p-6 text-center\">\n                <div className=\"w-16 h-16 bg-[#20B2AA]/20 rounded-full flex items-center justify-center mx-auto mb-4\">\n                  <Download className=\"w-8 h-8 text-[#20B2AA]\" />\n                </div>\n                <h3 className=\"text-xl font-bold text-[#20B2AA] mb-3\">\n                  Manual Vinil Autocolante\n                </h3>\n                <p className=\"text-gray-300 mb-4 text-sm\">\n                  Guia completo para aplicação de vinil autocolante em tiles de grande formato com emenda invisível\n                </p>\n                <ul className=\"text-xs text-gray-400 space-y-1 mb-6 text-left\">\n                  <li>• Aplicação a seco (sem água)</li>\n                  <li>• Técnica de sobreposição 5mm</li>\n                  <li>• Ferramentas necessárias</li>\n                  <li>• Preparação da superfície</li>\n                  <li>• Acabamentos profissionais</li>\n                </ul>\n                <Button \n                  className=\"w-full bg-[#20B2AA] text-black hover:bg-[#20B2AA]/90\"\n                  onClick={() => window.open('/manuais/manual-vinil-autocolante.pdf', '_blank')}\n                >\n                  📥 Download PDF\n                </Button>\n              </CardContent>\n            </Card>\n\n            {/* Manual Papel Tradicional */}\n            <Card className=\"bg-[#111111] border-[#FFD700] hover:border-[#FFD700]/80 transition-colors\">\n              <CardContent className=\"p-6 text-center\">\n                <div className=\"w-16 h-16 bg-[#FFD700]/20 rounded-full flex items-center justify-center mx-auto mb-4\">\n                  <Download className=\"w-8 h-8 text-[#FFD700]\" />\n                </div>\n                <h3 className=\"text-xl font-bold text-[#FFD700] mb-3\">\n                  Manual Papel Tradicional\n                </h3>\n                <p className=\"text-gray-300 mb-4 text-sm\">\n                  Guia completo para aplicação de papel de parede tradicional com cola, passo a passo profissional\n                </p>\n                <ul className=\"text-xs text-gray-400 space-y-1 mb-6 text-left\">\n                  <li>• Preparação da cola</li>\n                  <li>• Aplicação com rolo</li>\n                  <li>• Emendas perfeitas</li>\n                  <li>• Preparação da parede</li>\n                  <li>• Cortes e acabamentos</li>\n                </ul>\n                <Button \n                  className=\"w-full bg-[#FFD700] text-black hover:bg-[#FFD700]/90\"\n                  onClick={() => window.open('/manuais/manual-papel-parede-tradicional.pdf', '_blank')}\n                >\n                  📥 Download PDF\n                </Button>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n\n        {/* Dicas Rápidas */}\n        <Card className=\"bg-[#111111] border-[#FF6347] mb-12\">\n          <CardContent className=\"p-6\">\n            <h2 className=\"text-2xl font-bold text-[#FF6347] mb-4 text-center\">\n              💡 Dicas Importantes\n            </h2>\n            <div className=\"grid md:grid-cols-2 gap-6\">\n              <div>\n                <h3 className=\"font-bold text-white mb-3\">⚠️ Antes de Começar</h3>\n                <ul className=\"text-gray-300 space-y-2 text-sm\">\n                  <li>• <strong>Vinil:</strong> Aplicação a seco, sem água</li>\n                  <li>• <strong>Papel tradicional:</strong> Teste área pequena primeiro</li>\n                  <li>• Trabalhe com boa iluminação</li>\n                  <li>• Mantenha temperatura ambiente estável</li>\n                  <li>• Tenha todas as ferramentas preparadas</li>\n                </ul>\n              </div>\n              <div>\n                <h3 className=\"font-bold text-white mb-3\">⚠️ Problemas Comuns</h3>\n                <ul className=\"text-gray-300 space-y-2 text-sm\">\n                  <li>• <strong>Vinil:</strong> Sobreposição inadequada (mín. 5mm)</li>\n                  <li>• <strong>Papel:</strong> Bolhas - alisar imediatamente</li>\n                  <li>• Juntas visíveis: pressionar bem</li>\n                  <li>• Padrão desalinhado: medir com precisão</li>\n                </ul>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Aplicação Profissional */}\n        <Card className=\"bg-gradient-to-r from-[#FFD700]/10 to-[#20B2AA]/10 border-[#FFD700]\">\n          <CardContent className=\"p-8 text-center\">\n            <h2 className=\"text-2xl font-bold text-[#FFD700] mb-4\">\n              🔧 Aplicação Profissional Recomendada\n            </h2>\n            <p className=\"text-gray-300 mb-6\">\n              Para garantir resultado perfeito, recomendamos aplicação profissional. Contacte-nos para orçamento sem compromisso.\n            </p>\n            <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n              <Link href=\"/contactos\">\n                <Button className=\"bg-[#FFD700] text-black hover:bg-[#FFD700]/90 px-6 py-3\">\n                  💬 Contactar para Orçamento\n                </Button>\n              </Link>\n              <Button \n                variant=\"outline\" \n                className=\"border-[#20B2AA] text-[#20B2AA] hover:bg-[#20B2AA] hover:text-black px-6 py-3\"\n                onClick={() => window.open('https://wa.me/351910014140', '_blank')}\n              >\n                📱 WhatsApp: 910 014 140\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n\n      </div>\n\n      <Footer />\n    </div>\n  );\n}","size_bytes":7632},"client/src/pages/contactos-old.tsx":{"content":"import Navigation from \"@/components/navigation\";\nimport Footer from \"@/components/footer\";\nimport { useState } from \"react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { insertContactSchema, type InsertContact } from \"@shared/schema\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Link } from \"wouter\";\nimport { ObjectUploader } from \"@/components/ObjectUploader\";\nimport { Button } from \"@/components/ui/button\";\nimport { Shield, Upload } from \"lucide-react\";\n\nexport default function Contactos() {\n  return (\n    <div className=\"min-h-screen bg-black\">\n      <Navigation />\n      \n      {/* Hero Section */}\n      <section className=\"pt-28 pb-4 bg-black\">\n        <div className=\"container mx-auto px-4 text-center\">\n          <h1 className=\"text-4xl md:text-5xl font-heading font-bold mb-4\">\n            <span className=\"text-brand-yellow\">Contacto</span>\n          </h1>\n          <p className=\"text-lg text-white/90 mb-4 max-w-2xl mx-auto\">\n            Entre em contacto connosco. Estamos aqui para ajudar com o seu projeto de comunicação visual.\n          </p>\n        </div>\n      </section>\n\n      {/* Contact Information */}\n      <section className=\"py-4 bg-black/90\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"grid md:grid-cols-3 gap-4 mb-6\">\n            <div className=\"text-center p-2\">\n              <h3 className=\"text-lg font-semibold mb-2 text-brand-yellow\">Telefone</h3>\n              <p className=\"text-white/80 text-sm\">+351 930 682 725</p>\n            </div>\n\n            <div className=\"text-center p-2\">\n              <h3 className=\"text-lg font-semibold mb-2 text-brand-turquoise\">Email</h3>\n              <p className=\"text-white/80 text-sm\">carloscruz@domrealce.com</p>\n            </div>\n\n            <div className=\"text-center p-2\">\n              <h3 className=\"text-lg font-semibold mb-2 text-brand-coral\">Morada</h3>\n              <p className=\"text-white/80 text-sm\">\n                Rua de Rebolido, 42<br />\n                4580-264 Gondalães, Paredes\n              </p>\n            </div>\n\n          </div>\n        </div>\n      </section>\n\n      {/* Simple Contact Form */}\n      <section className=\"py-4 bg-black\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"max-w-xl mx-auto\">\n            <h2 className=\"text-2xl font-heading font-bold mb-4 text-center\">\n              <span className=\"text-brand-turquoise\">Envie-nos</span> <span className=\"text-white\">uma Mensagem</span>\n            </h2>\n            <p className=\"text-white/80 mb-4 text-center text-sm\">Preencha o formulário e entraremos em contacto brevemente.</p>\n            \n            <form id=\"formulario\" className=\"space-y-4\">\n              <div>\n                <label className=\"text-white/80 mb-1 block text-sm\">Nome Completo</label>\n                <input \n                  type=\"text\" \n                  className=\"w-full p-2 bg-black/50 border border-brand-yellow text-white rounded-lg text-sm\"\n                  placeholder=\"Nome Completo\"\n                />\n              </div>\n              \n              <div>\n                <label className=\"text-white/80 mb-1 block text-sm\">Email</label>\n                <input \n                  type=\"email\" \n                  className=\"w-full p-2 bg-black/50 border border-brand-yellow text-white rounded-lg text-sm\"\n                  placeholder=\"seu@email.com\"\n                />\n              </div>\n              \n              <div>\n                <label className=\"text-white/80 mb-1 block text-sm\">Mensagem</label>\n                <textarea \n                  className=\"w-full p-2 bg-black/50 border border-brand-yellow text-white rounded-lg h-24 text-sm\"\n                  placeholder=\"Descreva o seu projeto...\"\n                ></textarea>\n              </div>\n              \n              <button \n                type=\"submit\"\n                className=\"w-full px-6 py-3 bg-gradient-to-r from-brand-yellow to-brand-coral text-black font-semibold rounded-lg hover:shadow-xl transition-all duration-300\"\n              >\n                Enviar Mensagem\n              </button>\n            </form>\n          </div>\n        </div>\n      </section>\n\n      {/* Location Info with Map */}\n      <section className=\"py-4 bg-black/50\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"text-center mb-4\">\n            <h2 className=\"text-2xl font-heading font-bold mb-2\">\n              <span className=\"text-brand-coral\">Como</span> <span className=\"text-white\">Chegar</span>\n            </h2>\n          </div>\n          \n          {/* Mapa Google Maps */}\n          <div className=\"max-w-3xl mx-auto mb-4\">\n            <div className=\"bg-black/30 rounded-lg overflow-hidden\">\n              <iframe\n                src=\"https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d3006.2345678901234!2d-8.5591234567891!3d41.2234567891234!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x0%3A0x0!2zNDHCsDEzJzI0LjQiTiA4wrAzMycyOC44Ilc!5e0!3m2!1spt!2spt!4v1234567890123\"\n                width=\"100%\"\n                height=\"250\"\n                style={{ border: 0 }}\n                allowFullScreen\n                loading=\"lazy\"\n                referrerPolicy=\"no-referrer-when-downgrade\"\n                title=\"Localização DOMREALCE - Rua de Rebolido, 42, Gondalães, Paredes\"\n              ></iframe>\n            </div>\n          </div>\n          \n          {/* WhatsApp Contact */}\n          <div className=\"max-w-sm mx-auto\">\n            <div className=\"bg-black/30 rounded-lg p-4 text-center\">\n              <h3 className=\"text-lg font-semibold text-brand-turquoise mb-3\">Contacto Direto</h3>\n              <a \n                href=\"https://wa.me/351930682725?text=Olá!%20Gostaria%20de%20saber%20mais%20sobre%20os%20vossos%20serviços.\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                className=\"block w-full px-4 py-2 bg-green-600 hover:bg-green-700 text-white font-semibold rounded-lg transition-colors text-sm\"\n              >\n                💬 Contactar via WhatsApp\n              </a>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Experience Section */}\n      <section className=\"py-6 bg-black\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"max-w-2xl mx-auto text-center\">\n            <h3 className=\"text-xl font-semibold text-brand-yellow mb-3\">Atendimento Personalizado</h3>\n            <p className=\"text-white/80 mb-4 text-sm\">\n              Com 40 anos de experiência, oferecemos um atendimento personalizado focado na qualidade, pontualidade e honestidade.\n            </p>\n            <Link href=\"/sobre\" className=\"text-brand-turquoise hover:text-brand-turquoise transition-colors text-sm\">\n              Conhecer a Nossa História\n            </Link>\n          </div>\n        </div>\n      </section>\n\n      <Footer />\n    </div>\n  );\n}","size_bytes":6986},"client/src/pages/contactos.tsx":{"content":"import Navigation from \"@/components/navigation\";\nimport Footer from \"@/components/footer\";\nimport GoogleMap from \"@/components/GoogleMap\";\nimport { useState } from \"react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { insertContactSchema, type InsertContact } from \"@shared/schema\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Link } from \"wouter\";\nimport { ObjectUploader } from \"@/components/ObjectUploader\";\nimport { Button } from \"@/components/ui/button\";\nimport { Shield, Upload, FileText, X } from \"lucide-react\";\nimport cabineTelefonica from \"@assets/cabine_telefónica_1757173064310.webp\";\n\nexport default function Contactos() {\n  const { toast } = useToast();\n\n  // Fetch Google Maps API key\n  const { data: mapsConfig } = useQuery<{ apiKey: string }>({\n    queryKey: ['/api/config/google-maps-key'],\n  });\n\n  const [formData, setFormData] = useState({\n    nome: '',\n    email: '',\n    telefone: '',\n    assunto: '',\n    mensagem: '',\n    anexos: [] as any[]\n  });\n\n  const submitMutation = useMutation({\n    mutationFn: async (data: InsertContact) => {\n      return await apiRequest('/api/contact', 'POST', data);\n    },\n    onSuccess: (data: any) => {\n      toast({\n        title: \"Sucesso!\",\n        description: data.message || \"Mensagem enviada com sucesso!\",\n        variant: \"default\",\n      });\n      setFormData({\n        nome: '',\n        email: '',\n        telefone: '',\n        assunto: '',\n        mensagem: '',\n        anexos: []\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erro\",\n        description: error.message || \"Erro ao enviar mensagem. Tente novamente.\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n\n    try {\n      const dataToSubmit = {\n        ...formData,\n        ficheiros: formData.anexos?.map(file => file.uploadURL) || []\n      };\n\n      const validatedData = insertContactSchema.parse(dataToSubmit);\n      submitMutation.mutate(validatedData);\n    } catch (error) {\n      toast({\n        title: \"Erro de validação\",\n        description: \"Por favor, verifique os dados inseridos.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-black\">\n      <Navigation />\n      {/* Hero Section with Background Image - No spacing */}\n      <section\n        className=\"relative min-h-screen flex items-center justify-center overflow-hidden bg-cover bg-center bg-no-repeat bg-black\"\n        style={{\n          backgroundImage: `url(${cabineTelefonica})`,\n          backgroundSize: 'cover',\n          backgroundPosition: 'right center',\n        }}\n      >\n        <div className=\"relative z-10 text-center px-4\">\n          <h1 className=\"text-4xl md:text-6xl font-bold text-white drop-shadow-lg mb-4\">\n            Contacto\n          </h1>\n          <p className=\"text-lg md:text-xl text-white/80 drop-shadow-md\">\n            Entre em contacto connosco. Estamos aqui para ajudar com o seu projeto!\n          </p>\n        </div>\n      </section>\n      {/* Google Maps Section - Full Width */}\n      <section className=\"bg-black -mt-20\">\n        {/* Interactive Google Map - Full Width */}\n        {mapsConfig?.apiKey ? (\n          <GoogleMap\n            apiKey={mapsConfig.apiKey}\n            center={{\n              lat: 41.22940,\n              lng: -8.3237\n            }}\n            zoom={17}\n            className=\"w-full h-[700px]\"\n            address=\"Rua de Rebolido, 42, 4580-402 Gondalães, Paredes, Portugal\"\n            companyName=\"DOMREALCE\"\n          />\n        ) : (\n          <div className=\"w-full h-[500px] bg-gray-900 flex items-center justify-center\">\n            <div className=\"text-center text-brand-yellow\">\n              <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-brand-yellow mx-auto mb-4\"></div>\n              <p>A carregar mapa...</p>\n            </div>\n          </div>\n        )}\n\n        {/* Map Directions Button - Below Map */}\n        <div className=\"container mx-auto px-4 py-4\">\n          <div className=\"text-center\">\n            <div className=\"inline-flex gap-4\">\n              <button\n                onClick={() => {\n                  window.open('https://www.google.com/maps/search/?api=1&query=Rua+de+Rebolido+42%2C+4580-402+Gondalães%2C+Paredes', '_blank');\n                }}\n                className=\"px-6 py-3 bg-brand-yellow text-black rounded-lg font-semibold hover:bg-brand-yellow/90 transition-all duration-300 flex items-center gap-2\"\n              >\n                🗺️ Ver Direções no Google Maps\n              </button>\n              <button\n                onClick={() => {\n                  window.open('https://waze.com/ul?q=Rua+de+Rebolido+42+Gondalães+Paredes', '_blank');\n                }}\n                className=\"px-6 py-3 bg-blue-600 text-white rounded-lg font-semibold hover:bg-blue-700 transition-all duration-300 flex items-center gap-2\"\n              >\n                🚗 Abrir no Waze\n              </button>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Contact Information and Form Section */}\n      <section className=\"py-12 bg-black/90\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"grid lg:grid-cols-3 gap-8 max-w-6xl mx-auto\">\n\n            {/* Address and Contact Info - Left Side */}\n            <div className=\"lg:col-span-1\">\n              <div className=\"bg-gray-900/50 backdrop-blur-sm rounded-2xl p-6 border border-brand-yellow/30 h-full\">\n                <h3 className=\"text-xl font-bold text-brand-yellow mb-6\">Morada</h3>\n\n                <div className=\"space-y-4\">\n                  <div>\n                    <h4 className=\"text-lg text-white font-semibold mb-2\">\n                      D. M Realce\n                    </h4>\n                    <div className=\"text-white/80\">\n                      Rua de Rebolido, 42<br />\n                      4580-402 Gondalães, Paredes<br />\n                      Portugal\n                    </div>\n                  </div>\n\n                  <div className=\"border-t border-white/10 pt-4\">\n                    <div className=\"space-y-3\">\n                      <div className=\"flex items-center gap-3\">\n                        <span className=\"text-brand-yellow\">📞</span>\n                        <div>\n                          <p className=\"text-white/60 text-sm\">Telefone</p>\n                          <p className=\"text-white font-medium\">+351 930 682 725</p>\n                        </div>\n                      </div>\n\n                      <div className=\"flex items-center gap-3\">\n                        <span className=\"text-brand-turquoise\">✉️</span>\n                        <div>\n                          <p className=\"text-white/60 text-sm\">Email</p>\n                          <p className=\"text-white font-medium\">carloscruz@domrealce.com</p>\n                        </div>\n                      </div>\n\n                      <div className=\"flex items-center gap-3\">\n                        <span className=\"text-brand-coral\">🕰️</span>\n                        <div>\n                          <p className=\"text-white/60 text-sm\">Horário</p>\n                          <p className=\"text-white font-medium\">Segunda a Sexta<br />9h00 - 18h00</p>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"pt-4\">\n                    <button\n                      onClick={() => {\n                        navigator.clipboard.writeText('Rua de Rebolido 42, 4580-402 Gondalães, Paredes');\n                        toast({ title: 'Morada copiada!', description: 'A morada foi copiada para a área de transferência.' });\n                      }}\n                      className=\"w-full px-4 py-2 bg-brand-turquoise/20 text-brand-turquoise rounded-lg hover:bg-brand-turquoise/30 transition-all duration-300 text-sm font-medium\"\n                    >\n                      📋 Copiar Morada\n                    </button>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            {/* Contact Form - Right Side */}\n            <div className=\"lg:col-span-2\">\n              <div className=\"bg-gray-900/50 backdrop-blur-sm rounded-2xl p-8 border border-brand-yellow/30\">\n                <h3 className=\"text-2xl font-bold text-brand-yellow mb-6\">Formulário de Contacto</h3>\n\n                <form onSubmit={handleSubmit} className=\"space-y-6\">\n                  <div className=\"grid md:grid-cols-2 gap-6\">\n                    <div>\n                      <label className=\"block text-white/80 mb-2 font-medium\">Nome *</label>\n                      <input\n                        type=\"text\"\n                        value={formData.nome}\n                        onChange={(e) => setFormData({...formData, nome: e.target.value})}\n                        className=\"w-full p-3 bg-gray-800/50 border border-white/20 rounded-lg text-white placeholder-white/50 focus:border-brand-yellow focus:ring-1 focus:ring-brand-yellow transition-all duration-300\"\n                        placeholder=\"O seu nome\"\n                        required\n                      />\n                    </div>\n\n                    <div>\n                      <label className=\"block text-white/80 mb-2 font-medium\">Email *</label>\n                      <input\n                        type=\"email\"\n                        value={formData.email}\n                        onChange={(e) => setFormData({...formData, email: e.target.value})}\n                        className=\"w-full p-3 bg-gray-800/50 border border-white/20 rounded-lg text-white placeholder-white/50 focus:border-brand-yellow focus:ring-1 focus:ring-brand-yellow transition-all duration-300\"\n                        placeholder=\"o.seu.email@exemplo.com\"\n                        required\n                      />\n                    </div>\n                  </div>\n\n                  <div>\n                    <label className=\"block text-white/80 mb-2 font-medium\">Telefone</label>\n                    <input\n                      type=\"tel\"\n                      value={formData.telefone}\n                      onChange={(e) => setFormData({...formData, telefone: e.target.value})}\n                      className=\"w-full p-3 bg-gray-800/50 border border-white/20 rounded-lg text-white placeholder-white/50 focus:border-brand-yellow focus:ring-1 focus:ring-brand-yellow transition-all duration-300\"\n                      placeholder=\"+351 900 000 000 (opcional)\"\n                    />\n                  </div>\n\n                  <div>\n                    <label className=\"block text-white/80 mb-2 font-medium\">Assunto *</label>\n                    <input\n                      type=\"text\"\n                      value={formData.assunto}\n                      onChange={(e) => setFormData({...formData, assunto: e.target.value})}\n                      className=\"w-full p-3 bg-gray-800/50 border border-white/20 rounded-lg text-white placeholder-white/50 focus:border-brand-yellow focus:ring-1 focus:ring-brand-yellow transition-all duration-300\"\n                      placeholder=\"Qual é o assunto da sua mensagem?\"\n                      required\n                    />\n                  </div>\n\n                  <div>\n                    <label className=\"block text-white/80 mb-2 font-medium\">Mensagem *</label>\n                    <textarea\n                      value={formData.mensagem}\n                      onChange={(e) => setFormData({...formData, mensagem: e.target.value})}\n                      rows={4}\n                      className=\"w-full p-3 bg-gray-800/50 border border-white/20 rounded-lg text-white placeholder-white/50 focus:border-brand-yellow focus:ring-1 focus:ring-brand-yellow transition-all duration-300 resize-none\"\n                      placeholder=\"Descreva o seu projeto ou dúvida em detalhe...\"\n                      required\n                    />\n                  </div>\n\n                  <div>\n                    <label className=\"block text-white/80 mb-2 font-medium\">Anexos (opcional)</label>\n                    <ObjectUploader\n                      onUpload={(files) => setFormData({...formData, anexos: files})}\n                      maxFiles={3}\n                      acceptedTypes={['image/*', '.pdf', '.doc', '.docx']}\n                      className=\"w-full\"\n                    />\n\n                    {formData.anexos && formData.anexos.length > 0 && (\n                      <div className=\"mt-3\">\n                        <p className=\"text-white/60 mb-2 text-sm\">Ficheiros anexados:</p>\n                        <div className=\"space-y-2\">\n                          {formData.anexos.map((file, index) => (\n                            <div key={index} className=\"flex items-center justify-between bg-gray-800/30 p-2 rounded border border-white/10\">\n                              <div className=\"flex items-center gap-2\">\n                                <FileText className=\"h-4 w-4 text-brand-turquoise\" />\n                                <span className=\"text-white/80 text-sm\">{file.originalName}</span>\n                                <span className=\"text-white/40 text-xs\">({(file.size / 1024).toFixed(1)} KB)</span>\n                              </div>\n                              <Button\n                                type=\"button\"\n                                variant=\"ghost\"\n                                size=\"sm\"\n                                onClick={() => {\n                                  setFormData({\n                                    ...formData,\n                                    anexos: formData.anexos?.filter((_, i) => i !== index)\n                                  });\n                                }}\n                                className=\"text-red-400 hover:text-red-300 hover:bg-red-400/10\"\n                              >\n                                <X className=\"h-4 w-4\" />\n                              </Button>\n                            </div>\n                          ))}\n                        </div>\n                      </div>\n                    )}\n                  </div>\n\n                  <div className=\"flex flex-col sm:flex-row gap-4 pt-4\">\n                    <button\n                      type=\"submit\"\n                      disabled={submitMutation.isPending}\n                      className=\"flex-1 bg-gradient-to-r from-brand-yellow to-brand-coral text-black font-semibold py-3 px-6 rounded-lg hover:from-brand-yellow/90 hover:to-brand-coral/90 transition-all duration-300 transform hover:scale-[1.02] disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center gap-2\"\n                    >\n                      {submitMutation.isPending ? (\n                        <>\n                          <div className=\"animate-spin rounded-full h-5 w-5 border-2 border-black/30 border-t-black\"></div>\n                          A enviar...\n                        </>\n                      ) : (\n                        'Enviar Mensagem'\n                      )}\n                    </button>\n\n                    <Link href={`https://wa.me/351930682725?text=${encodeURIComponent('Olá! Gostaria de saber mais sobre os vossos serviços.')}`}>\n                      <button\n                        type=\"button\"\n                        className=\"flex-1 bg-green-600 text-white font-semibold py-3 px-6 rounded-lg hover:bg-green-700 transition-all duration-300 transform hover:scale-[1.02] flex items-center justify-center gap-2\"\n                      >\n                        📱 WhatsApp\n                      </button>\n                    </Link>\n                  </div>\n                </form>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Motivational Quote Section */}\n      <section className=\"py-12 bg-gradient-to-b from-black/90 to-black\">\n        <div className=\"container mx-auto px-4 text-center\">\n          <div className=\"max-w-4xl mx-auto\">\n            <p className=\"text-2xl md:text-3xl font-italic text-white/90\">\n              \"Estamos prontos para fazer seu projeto brilhar! \n              <span className=\"text-brand-yellow font-semibold\"> Juntos, vamos mais longe.</span>\"\n            </p>\n          </div>\n        </div>\n      </section>\n\n      <Footer />\n    </div>\n  );\n}","size_bytes":16494},"client/src/pages/home.tsx":{"content":"import Navigation from \"@/components/navigation\";\nimport DynamicSlider from \"@/components/DynamicSlider\";\nimport ServicesSection from \"@/components/services-section\";\nimport PortfolioSection from \"@/components/portfolio-section\";\nimport NewsSection from \"@/components/news-section\";\nimport Footer from \"@/components/footer\";\nimport { SEOHead } from \"@/components/seo-head\";\nimport { usePageConfig } from \"@/hooks/use-page-config\";\nimport ClientLogos from \"@/components/ClientLogos\";\n\nexport default function Home() {\n  const { getConfig, isLoading } = usePageConfig(\"home\");\n\n  return (\n    <div\n      className=\"overflow-x-hidden\"\n      style={{ background: \"none\", backgroundColor: \"transparent\" }}\n    >\n      <SEOHead\n        title=\"Comunicação Visual e Impressão Digital ! Portugal\"\n        description=\"DOMREALCE - Especialista em comunicação visual, impressão digital, papel de parede, decoração de viaturas e sinalética comercial. 40 anos de experiência em Lisboa.\"\n        keywords=\"comunicação visual, impressão digital, papel de parede, decoração viaturas, sinalética, publicidade, Portugal, DOMREALCE\"\n        canonicalUrl=\"https://www.domrealce.com/\"\n      />\n\n      <Navigation />\n      \n      <DynamicSlider />\n      \n      <ServicesSection />\n      <PortfolioSection />\n      <NewsSection />\n      <ClientLogos />\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":1381},"client/src/pages/instrucoes-pagamento.tsx":{"content":"import { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Copy, CheckCircle, Clock, MapPin, CreditCard, CheckSquare } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useEffect, useState } from \"react\";\n\nexport default function InstrucoesPagamento() {\n  const [location, setLocation] = useLocation();\n  const { toast } = useToast();\n  const [orderData, setOrderData] = useState<any>(null);\n  const [confirmationData, setConfirmationData] = useState({\n    entity: \"\",\n    reference: \"\",\n    amount: \"\",\n  });\n  const [isValidating, setIsValidating] = useState(false);\n\n  useEffect(() => {\n    // Recuperar dados do pedido\n    const pendingOrder = localStorage.getItem(\"pendingOrder\");\n    if (pendingOrder) {\n      setOrderData(JSON.parse(pendingOrder));\n    }\n  }, []);\n\n  const urlParams = new URLSearchParams(window.location.search);\n  const method = urlParams.get(\"method\");\n  const orderId = urlParams.get(\"orderId\");\n\n  const copyToClipboard = (text: string, label: string) => {\n    navigator.clipboard.writeText(text);\n    toast({\n      title: \"Copiado!\",\n      description: `${label} copiado para a área de transferência`,\n    });\n  };\n\n  const formatCurrency = (amount: number) => {\n    return amount.toLocaleString(\"pt-PT\", {\n      style: \"currency\",\n      currency: \"EUR\",\n      minimumFractionDigits: 2,\n      maximumFractionDigits: 2,\n    });\n  };\n\n  const validatePayment = async () => {\n    if (!orderData) return;\n\n    setIsValidating(true);\n\n    try {\n      // Verificar se os dados introduzidos estão corretos\n      const expectedEntity = orderData.data.entity;\n      const expectedReference = orderData.data.reference;\n      const expectedAmount = orderData.amount.toFixed(2);\n\n      // Normalizar inputs (remover espaços)\n      const inputEntity = confirmationData.entity.trim();\n      const inputReference = confirmationData.reference.trim();\n      const inputAmount = parseFloat(confirmationData.amount.replace(\",\", \".\")).toFixed(2);\n\n      if (inputEntity !== expectedEntity) {\n        toast({\n          title: \"❌ Entidade incorreta\",\n          description: `A entidade deve ser: ${expectedEntity}`,\n          variant: \"destructive\",\n        });\n        return;\n      }\n\n      if (inputReference !== expectedReference) {\n        toast({\n          title: \"❌ Referência incorreta\", \n          description: `A referência deve ser: ${expectedReference}`,\n          variant: \"destructive\",\n        });\n        return;\n      }\n\n      if (inputAmount !== expectedAmount) {\n        toast({\n          title: \"❌ Valor incorreto\",\n          description: `O valor deve ser: €${expectedAmount}`,\n          variant: \"destructive\",\n        });\n        return;\n      }\n\n      // Todos os dados estão corretos\n      toast({\n        title: \"✅ Dados confirmados!\",\n        description: \"Os dados estão corretos. Proceda com o pagamento no Multibanco/ATM.\",\n      });\n\n      // Limpar localStorage e redirecionar após alguns segundos\n      setTimeout(() => {\n        localStorage.removeItem(\"pendingOrder\");\n        setLocation(\"/pedido-confirmado?confirmed=true\");\n      }, 2000);\n\n    } catch (error) {\n      toast({\n        title: \"Erro na validação\",\n        description: \"Ocorreu um erro. Verifique os dados e tente novamente.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsValidating(false);\n    }\n  };\n\n  if (!orderData || !method) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <Card className=\"w-full max-w-md\">\n          <CardContent className=\"pt-6\">\n            <p className=\"text-center text-gray-600\">\n              Dados do pagamento não encontrados.\n            </p>\n            <Button\n              onClick={() => setLocation(\"/checkout\")}\n              className=\"w-full mt-4\"\n            >\n              Voltar ao Checkout\n            </Button>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 py-8\">\n      <div className=\"container mx-auto px-4 max-w-4xl\">\n        <div className=\"text-center mb-8\">\n          <div className=\"inline-flex items-center justify-center w-16 h-16 bg-yellow-100 rounded-full mb-4\">\n            <Clock className=\"w-8 h-8 text-yellow-600\" />\n          </div>\n          <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">\n            Pagamento Pendente\n          </h1>\n          <p className=\"text-gray-600\">\n            Siga as instruções abaixo para completar o seu pagamento\n          </p>\n        </div>\n\n        <div className=\"grid gap-6 lg:grid-cols-2\">\n          {/* Resumo do Pedido */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <CheckCircle className=\"w-5 h-5 text-green-600\" />\n                Resumo do Pedido\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"flex justify-between\">\n                <span className=\"text-gray-600\">Número do Pedido:</span>\n                <span className=\"font-mono font-semibold\">{orderId}</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"text-gray-600\">Valor Total:</span>\n                <span className=\"font-semibold text-xl text-green-600\">\n                  {formatCurrency(orderData.amount)}\n                </span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"text-gray-600\">Método de Pagamento:</span>\n                <span className=\"font-semibold\">\n                  Multibanco\n                </span>\n              </div>\n              <div className=\"pt-4 border-t\">\n                <p className=\"text-sm text-gray-600\">\n                  <strong>Cliente:</strong> {orderData.customerData.nome}\n                  <br />\n                  <strong>Email:</strong> {orderData.customerData.email}\n                  <br />\n                  <strong>Telefone:</strong> {orderData.customerData.telefone}\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Instruções de Pagamento */}\n          {method === \"multibanco\" && (\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <CreditCard className=\"w-5 h-5 text-blue-600\" />\n                  Pagamento Multibanco\n                </CardTitle>\n                <CardDescription>\n                  Use os dados abaixo em qualquer ATM, homebanking ou app\n                  bancária\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div className=\"space-y-4\">\n                  <div className=\"bg-yellow-50 p-6 rounded-lg border-2 border-yellow-200\">\n                    <div className=\"flex justify-between items-center\">\n                      <div>\n                        <p className=\"text-sm font-semibold text-yellow-700 uppercase tracking-wide\">🏦 Entidade</p>\n                        <p className=\"text-4xl font-mono font-black text-yellow-900 mt-1\">\n                          {orderData.data.entity}\n                        </p>\n                      </div>\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() =>\n                          copyToClipboard(orderData.data.entity, \"Entidade\")\n                        }\n                      >\n                        <Copy className=\"w-4 h-4\" />\n                      </Button>\n                    </div>\n                  </div>\n\n                  <div className=\"bg-blue-50 p-6 rounded-lg border-2 border-blue-200\">\n                    <div className=\"flex justify-between items-center\">\n                      <div>\n                        <p className=\"text-sm font-semibold text-blue-700 uppercase tracking-wide\">🔢 Referência</p>\n                        <p className=\"text-4xl font-mono font-black text-blue-900 mt-1\">\n                          {orderData.data.reference}\n                        </p>\n                      </div>\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() =>\n                          copyToClipboard(\n                            orderData.data.reference,\n                            \"Referência\",\n                          )\n                        }\n                      >\n                        <Copy className=\"w-4 h-4\" />\n                      </Button>\n                    </div>\n                  </div>\n\n                  <div className=\"bg-green-50 p-6 rounded-lg border-2 border-green-200\">\n                    <div className=\"flex justify-between items-center\">\n                      <div>\n                        <p className=\"text-sm font-semibold text-green-700 uppercase tracking-wide\">💰 Valor a Pagar</p>\n                        <p className=\"text-4xl font-black text-green-800 mt-1\">\n                          {formatCurrency(orderData.amount)}\n                        </p>\n                      </div>\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() =>\n                          copyToClipboard(orderData.amount.toFixed(2), \"Valor\")\n                        }\n                      >\n                        <Copy className=\"w-4 h-4\" />\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"bg-blue-50 p-4 rounded-lg\">\n                  <h4 className=\"font-semibold text-blue-900 mb-2\">\n                    Como Pagar:\n                  </h4>\n                  <ol className=\"text-sm text-blue-800 space-y-1\">\n                    <li>1. Aceda ao seu homebanking ou dirija-se ao ATM</li>\n                    <li>2. Escolha \"Pagamentos\" ou \"Pagar Serviços\"</li>\n                    <li>\n                      3. Introduza a Entidade:{\" \"}\n                      <strong>{orderData.data.entity}</strong>\n                    </li>\n                    <li>\n                      4. Introduza a Referência:{\" \"}\n                      <strong>{orderData.data.reference}</strong>\n                    </li>\n                    <li>\n                      5. Confirme o valor:{\" \"}\n                      <strong>{formatCurrency(orderData.amount)}</strong>\n                    </li>\n                    <li>6. Confirme o pagamento</li>\n                  </ol>\n                </div>\n              </CardContent>\n            </Card>\n          )}\n\n        </div>\n\n        {/* Informações Importantes */}\n        <Card className=\"mt-8\">\n          <CardHeader>\n            <CardTitle>Informações Importantes</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"grid gap-4 md:grid-cols-2\">\n              <div className=\"bg-green-50 p-4 rounded-lg\">\n                <h4 className=\"font-semibold text-green-900 mb-2\">\n                  Após o Pagamento\n                </h4>\n                <p className=\"text-sm text-green-800\">\n                  Receberá uma confirmação por email assim que o pagamento for\n                  processado. O processamento pode demorar até 24 horas.\n                </p>\n              </div>\n              <div className=\"bg-blue-50 p-4 rounded-lg\">\n                <h4 className=\"font-semibold text-blue-900 mb-2\">Dúvidas?</h4>\n                <p className=\"text-sm text-blue-800\">\n                  Se tiver alguma dúvida sobre o pagamento, contacte-nos através\n                  do nosso formulário de contacto ou telefone.\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Botões de Ação */}\n        <div className=\"flex gap-4 justify-center mt-8\">\n          <Button variant=\"outline\" onClick={() => setLocation(\"/checkout\")}>\n            Voltar ao Checkout\n          </Button>\n          <Button\n            onClick={() => setLocation(\"/pedido-confirmado?orderId=\" + orderId)}\n          >\n            Já Paguei\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":12599},"client/src/pages/loja-papel-parede.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { ArrowLeft, Eye } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport Navigation from \"@/components/navigation\";\nimport Footer from \"@/components/footer\";\n\n\n\ninterface TextureCover {\n  name: string;\n  path: string;\n  fileName: string;\n  textureCount?: number;\n}\n\nexport default function LojaPapelParede() {\n  const { data: images, isLoading, error } = useQuery({\n    queryKey: [\"/api/loja/images\"],\n  });\n\n  // Filter and format texture cover images\n  const textureCovers: TextureCover[] = (images as { images: string[] })?.images\n    ?.filter((path: string) => path.includes('capas-texturas'))\n    ?.map((path: string) => {\n      const fileName = path.split('/').pop()?.replace('.webp', '') || '';\n      const displayName = fileName\n        .replace(/-/g, ' ')\n        .replace(/\\b\\w/g, (l: string) => l.toUpperCase());\n      \n      // Count textures in this category\n      const categoryImages = (images as { images: string[] })?.images\n        ?.filter((imgPath: string) => \n          imgPath.includes(`texturas/${fileName}/`) &&\n          /\\.(jpg|jpeg|png|gif|webp)$/i.test(imgPath)\n        ) || [];\n      \n      return {\n        name: displayName,\n        path: `/public-objects/${path}`,\n        fileName: fileName,\n        textureCount: categoryImages.length\n      };\n    })\n    // Only show categories that have at least 1 texture\n    ?.filter((texture: TextureCover & { textureCount: number }) => texture.textureCount > 0) || [];\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-[#0a0a0a] py-16\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"text-center\">\n            <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-[#FFD700] mx-auto\"></div>\n            <p className=\"mt-4 text-gray-300\">A carregar texturas...</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"min-h-screen bg-[#0a0a0a] py-16\">\n        <Navigation />\n        <div className=\"container mx-auto px-4\">\n          <div className=\"text-center\">\n            <div className=\"text-red-400 text-xl mb-4\">Erro ao carregar texturas</div>\n            <p className=\"text-gray-300 mb-8\">Tente novamente mais tarde.</p>\n            <Link href=\"/loja\">\n              <Button variant=\"outline\" className=\"border-brand-yellow text-brand-yellow hover:bg-brand-yellow hover:text-black\">\n                <ArrowLeft className=\"mr-2 h-4 w-4\" />\n                Voltar à Loja\n              </Button>\n            </Link>\n          </div>\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-[#0a0a0a] text-white\">\n      <Navigation />\n      {/* Header */}\n      <div className=\"bg-[#111111] border-b border-[#333] mt-16\">\n        <div className=\"container mx-auto px-4 py-8\">\n          <div className=\"flex items-center gap-4 mb-6\">\n            <Link href=\"/loja\">\n              <Button variant=\"outline\" size=\"sm\" className=\"gap-2 border-[#FFD700] text-[#FFD700] hover:bg-[#FFD700] hover:text-black\">\n                <ArrowLeft className=\"h-4 w-4\" />\n                Voltar à Loja\n              </Button>\n            </Link>\n          </div>\n          <h1 className=\"text-4xl font-bold text-white mb-4\">\n            Papel de <span className=\"text-[#FFD700]\">Parede</span>\n          </h1>\n          <p className=\"text-gray-300 text-lg\">\n            Escolha entre as nossas texturas disponíveis para personalizar o seu espaço\n          </p>\n        </div>\n      </div>\n\n      {/* Content */}\n      <div className=\"container mx-auto px-4 py-8\">\n        {textureCovers.length === 0 ? (\n          <div className=\"text-center py-16\">\n            <p className=\"text-gray-600 dark:text-gray-400\">\n              Nenhuma textura disponível no momento.\n            </p>\n          </div>\n        ) : (\n          <div className=\"grid grid-cols-3 md:grid-cols-4 lg:grid-cols-5 xl:grid-cols-6 gap-2 md:gap-3\">\n            {textureCovers.map((texture: TextureCover) => (\n              <Link key={texture.fileName} href={`/loja/papel-parede/textura/${texture.fileName.toLowerCase().replace(/_/g, '-')}`}>\n                <div className=\"group text-center cursor-pointer\">\n                  {/* Imagem com overlay \"Ver Mais\" no hover */}\n                  <div className=\"relative overflow-hidden rounded-lg mb-1 md:mb-2\">\n                    <img\n                      src={texture.path}\n                      alt={texture.name}\n                      className=\"w-full aspect-square object-cover group-hover:scale-105 transition-transform duration-300\"\n                    />\n                    {/* Overlay com texto \"Ver Mais\" que aparece no hover */}\n                    <div className=\"absolute inset-0 bg-black/70 opacity-0 group-hover:opacity-100 transition-opacity duration-300 flex items-center justify-center rounded-lg\">\n                      <div className=\"text-center\">\n                        <Eye className=\"w-4 h-4 md:w-5 md:h-5 text-[#FFD700] mx-auto mb-1\" />\n                        <span className=\"text-[#FFD700] font-bold text-xs\">Ver Mais</span>\n                      </div>\n                    </div>\n                  </div>\n                  \n                  {/* Nome por baixo */}\n                  <div>\n                    <h3 className=\"text-xs font-bold text-[#FFD700] group-hover:text-[#20B2AA] transition-colors leading-tight\">\n                      {texture.name}\n                    </h3>\n                  </div>\n                </div>\n              </Link>\n            ))}\n          </div>\n        )}\n\n        {/* Info Section */}\n        <div className=\"mt-16 bg-[#111111] rounded-lg p-8 border border-[#333]\">\n          <h2 className=\"text-2xl font-bold text-[#FFD700] mb-6\">\n            Sobre o Nosso Papel de Parede\n          </h2>\n          <div className=\"grid md:grid-cols-2 gap-8\">\n            <div>\n              <h3 className=\"font-semibold text-white mb-4 text-lg\">\n                Características\n              </h3>\n              <ul className=\"text-gray-300 space-y-2\">\n                <li>• Alta qualidade de impressão</li>\n                <li>• Resistente à humidade</li>\n                <li>• Laminação opcional (proteção UV e anti-risco)</li>\n                <li>• <Link href=\"/como-aplicar-papel-parede\" className=\"text-[#FFD700] hover:text-[#20B2AA] underline\">Aplicação (como aplicar)</Link></li>\n                <li>• Personalização completa</li>\n              </ul>\n            </div>\n            <div>\n              <h3 className=\"font-semibold text-white mb-4 text-lg\">\n                Informações Importantes\n              </h3>\n              <ul className=\"text-gray-300 space-y-2\">\n                <li>• Produtos personalizados</li>\n                <li>• Sem trocas ou devoluções</li>\n                <li>• Orçamento personalizado</li>\n                <li>• <a href=\"#orcamento-colocacao\" className=\"text-[#FFD700] hover:text-[#20B2AA] underline\">Solicitar orçamento para colocação</a></li>\n              </ul>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <Footer />\n    </div>\n  );\n}","size_bytes":7255},"client/src/pages/loja-textura-detalhes.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ArrowLeft, ShoppingCart, Package, Sparkles, Eye, ChevronLeft, ChevronRight } from \"lucide-react\";\nimport { Link, useParams, useLocation } from \"wouter\";\nimport Navigation from \"@/components/navigation\";\nimport Footer from \"@/components/footer\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface TextureImage {\n  name: string;\n  path: string;\n}\n\ninterface CartItem {\n  textureName: string;\n  textureImage: string;\n  acabamento: 'brilho' | 'mate';\n  laminacao: boolean;\n  preco: number;\n  precoTotal: number;\n}\n\nexport default function LojaTexturaDetalhes() {\n  const { textura } = useParams();\n  const { toast } = useToast();\n  const [, setLocation] = useLocation();\n  \n  const [selectedTexture, setSelectedTexture] = useState<string>('');\n  const [showPreview, setShowPreview] = useState(false);\n\n  // Navigation functions for preview modal\n  const getCurrentIndex = () => {\n    return textureImages.findIndex(texture => texture.path === selectedTexture);\n  };\n\n  const goToPrevious = () => {\n    const currentIndex = getCurrentIndex();\n    const prevIndex = currentIndex > 0 ? currentIndex - 1 : textureImages.length - 1;\n    setSelectedTexture(textureImages[prevIndex].path);\n  };\n\n  const goToNext = () => {\n    const currentIndex = getCurrentIndex();\n    const nextIndex = currentIndex < textureImages.length - 1 ? currentIndex + 1 : 0;\n    setSelectedTexture(textureImages[nextIndex].path);\n  };\n\n  const { data: images, isLoading } = useQuery({\n    queryKey: [\"/api/loja/images\"],\n  });\n\n  // Filter textures for the specific category\n  // Convert textura param to match folder structure (3d -> 3D)\n  const categoryName = textura === '3d' ? '3D' : \n                      textura === 'baby-2.0' ? 'Baby-2.0' :\n                      textura === 'baby-colors' ? 'Baby-Colors' :\n                      textura === 'baby-colors-1' ? 'Baby-Colors-1' :\n                      textura === 'baby-colors-2' ? 'Baby-Colors-2' :\n                      textura === 'baby-colors-3' ? 'Baby-Colors-3' :\n                      textura === 'baby-paineis' ? 'Baby-Paineis' :\n                      textura === 'baby-pantone' ? 'Baby-Pantone' :\n                      textura === 'baby-pantone-1' ? 'Baby-Pantone-1' :\n                      textura === 'baby-pantone-2' ? 'Baby-Pantone-2' :\n                      textura === 'baby-pantone-3' ? 'Baby-Pantone-3' :\n                      textura ? textura.charAt(0).toUpperCase() + textura.slice(1) : '';\n\n  // Check if this is a Baby-Pantone or Baby-Colors category to show subcategory navigation\n  const isPantoneCategory = textura?.includes('baby-pantone') || false;\n  const isColorsCategory = textura?.includes('baby-colors') || false;\n  \n  // Helper function to extract number from filename for sorting\n  const extractNumber = (filename: string): number => {\n    const match = filename.match(/(\\d+)/);\n    return match ? parseInt(match[1], 10) : 0;\n  };\n\n  const textureImages: TextureImage[] = (images as { images: string[] })?.images\n    ?.filter((path: string) => \n      path.includes(`loja/papel-de-parede/texturas/${categoryName}/`) &&\n      /\\.(jpg|jpeg|png|gif|webp)$/i.test(path)\n    )\n    ?.map((path: string) => ({\n      name: path.split('/').pop()?.replace(/\\.(jpg|jpeg|png|gif|webp)$/i, '') || '',\n      path: `/public-objects/${path}`\n    }))\n    // Sort by numeric value extracted from filename (001, 002, 003...)\n    ?.sort((a, b) => {\n      const numA = extractNumber(a.name);\n      const numB = extractNumber(b.name);\n      return numA - numB;\n    }) || [];\n  \n  const basePrice = 20;\n\n  const handleAddToCart = () => {\n    if (!selectedTexture) {\n      toast({\n        title: \"Selecione uma textura\",\n        description: \"Por favor, escolha uma textura antes de adicionar ao carrinho.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const cartItem = {\n      id: Date.now().toString(),\n      type: 'papel-parede' as const,\n      textureName: `${textura?.toUpperCase()} - ${selectedTexture.split('/').pop()?.replace(/\\.(jpg|jpeg|png|gif|webp)$/i, '') || ''}`,\n      textureImage: selectedTexture,\n      category: textura || '',\n      preco: basePrice,\n      acabamento: 'mate' as const,\n      laminacao: false,\n      tipoCola: 'com-cola' as const,\n      largura: 0,\n      altura: 0,\n      larguraCm: 0,\n      alturaCm: 0,\n      area: 0.01,\n      precoTotal: basePrice,\n    };\n\n    // Get existing cart from localStorage\n    const existingCart = JSON.parse(localStorage.getItem('cart') || '[]');\n    existingCart.push(cartItem);\n    localStorage.setItem('cart', JSON.stringify(existingCart));\n\n    toast({\n      title: \"Produto adicionado!\",\n      description: \"Redirecionando para o carrinho para personalizar...\",\n    });\n\n    // Redirecionar automaticamente para o carrinho\n    setTimeout(() => {\n      setLocation('/carrinho');\n    }, 1000);\n  };\n\n  const handlePreview = () => {\n    if (!selectedTexture) {\n      toast({\n        title: \"Selecione uma textura\",\n        description: \"Por favor, escolha uma textura para ver a pré-visualização.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    setShowPreview(true);\n  };\n\n  const textureName = textura?.replace(/-/g, ' ').replace(/\\b\\w/g, (l: string) => l.toUpperCase()) || '';\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-[#0a0a0a] py-16\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"text-center\">\n            <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-[#FFD700] mx-auto\"></div>\n            <p className=\"mt-4 text-gray-300\">A carregar texturas...</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-[#0a0a0a] text-white\">\n      <Navigation />\n      \n      {/* Header */}\n      <div className=\"bg-[#111111] border-b border-[#333] mt-16\">\n        <div className=\"container mx-auto px-4 py-8\">\n          <div className=\"flex items-center gap-4 mb-6\">\n            <Link href=\"/loja/papel-parede\">\n              <Button variant=\"outline\" size=\"sm\" className=\"gap-2 border-[#FFD700] text-[#FFD700] hover:bg-[#FFD700] hover:text-black\">\n                <ArrowLeft className=\"h-4 w-4\" />\n                Voltar às Texturas\n              </Button>\n            </Link>\n          </div>\n          <h1 className=\"text-4xl font-bold text-white mb-4\">\n            Texturas <span className=\"text-[#FFD700]\">{textureName}</span>\n          </h1>\n          <p className=\"text-gray-300 text-lg\">\n            Escolha a sua textura favorita e personalize o acabamento\n          </p>\n        </div>\n      </div>\n\n      {/* Content */}\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"grid lg:grid-cols-3 gap-8\">\n          {/* Texture Gallery */}\n          <div className=\"lg:col-span-2\">\n            <h2 className=\"text-2xl font-bold text-[#FFD700] mb-6\">\n              Texturas Disponíveis\n            </h2>\n            \n            {textureImages.length === 0 ? (\n              <div className=\"text-center py-16\">\n                <Package className=\"h-16 w-16 text-gray-600 mx-auto mb-4\" />\n                <p className=\"text-gray-400 text-lg\">\n                  Nenhuma textura disponível para {textureName} no momento.\n                </p>\n                <p className=\"text-gray-500 mt-2\">\n                  Entre em contacto connosco para mais opções.\n                </p>\n              </div>\n            ) : (\n              <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">\n                {textureImages.map((texture) => (\n                  <div\n                    key={texture.name}\n                    className={`cursor-pointer group ${\n                      selectedTexture === texture.path ? 'ring-2 ring-[#FFD700]' : ''\n                    }`}\n                    onClick={() => setSelectedTexture(texture.path)}\n                  >\n                    <div \n                      className=\"relative rounded-lg overflow-hidden cursor-pointer\"\n                      onClick={(e) => {\n                        e.stopPropagation();\n                        setSelectedTexture(texture.path);\n                        setShowPreview(true);\n                      }}\n                    >\n                      <img\n                        src={texture.path}\n                        alt={texture.name}\n                        className=\"w-full aspect-square object-cover group-hover:scale-105 transition-transform duration-300\"\n                      />\n                      {/* Hover overlay \"Ver Maior\" */}\n                      <div className=\"absolute inset-0 bg-black/70 opacity-0 group-hover:opacity-100 transition-opacity duration-300 flex items-center justify-center pointer-events-none\">\n                        <div className=\"bg-[#FFD700] text-black px-3 py-1 rounded text-sm font-semibold\">\n                          Ver Maior\n                        </div>\n                      </div>\n                    </div>\n                    <p className=\"text-center mt-2 text-xs text-gray-300 group-hover:text-[#FFD700] transition-colors\">\n                      {texture.name}\n                    </p>\n                  </div>\n                ))}\n              </div>\n            )}\n          </div>\n\n          {/* Options Panel */}\n          <div className=\"lg:col-span-1\">\n            <Card className=\"bg-[#111111] border-[#333] sticky top-24\">\n              <CardContent className=\"p-6\">\n                <h3 className=\"text-xl font-bold text-[#FFD700] mb-6\">\n                  Ações\n                </h3>\n\n                {/* Selected Texture Preview */}\n                {selectedTexture && (\n                  <div className=\"mb-6 p-4 bg-[#0a0a0a] rounded-lg border border-[#333]\">\n                    <h4 className=\"text-sm font-semibold text-[#FFD700] mb-3\">Textura Selecionada:</h4>\n                    <img\n                      src={selectedTexture}\n                      alt=\"Textura selecionada\"\n                      className=\"w-full aspect-square object-cover rounded mb-3\"\n                    />\n                    <p className=\"text-xs text-gray-300 text-center\">\n                      {selectedTexture.split('/').pop()?.replace(/\\.(jpg|jpeg|png|gif|webp)$/i, '')}\n                    </p>\n                  </div>\n                )}\n\n                {/* Price Display */}\n                <div className=\"mb-6 p-4 bg-[#0a0a0a] rounded-lg border border-[#333]\">\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-[#FFD700] font-bold\">Preço base:</span>\n                    <span className=\"text-[#FFD700] font-bold text-xl\">€{basePrice}/m²</span>\n                  </div>\n                  <p className=\"text-xs text-gray-400 mt-2\">\n                    *Medidas e personalização no carrinho\n                  </p>\n                </div>\n\n                {/* Quick Actions */}\n                <div className=\"space-y-3\">\n                  <Button \n                    onClick={handleAddToCart}\n                    disabled={!selectedTexture}\n                    className=\"w-full bg-gradient-to-r from-[#FFD700] to-[#20B2AA] text-black font-bold py-3 hover:opacity-90 disabled:opacity-50\"\n                  >\n                    <ShoppingCart className=\"w-5 h-5 mr-2\" />\n                    Adicionar ao Carrinho\n                  </Button>\n                  \n                  <p className=\"text-xs text-gray-400 text-center\">\n                    Ou clique numa textura e depois \"Ver Maior\" para ver detalhes\n                  </p>\n                </div>\n\n                {/* Continue Shopping Message */}\n                <div className=\"mt-6 p-4 bg-[#0a0a0a] rounded-lg border border-[#333]\">\n                  <p className=\"text-sm text-gray-300 text-center\">\n                    💡 Adicione mais produtos ao carrinho para otimizar o envio!\n                  </p>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n\n      {/* Preview Modal with Actions */}\n      {showPreview && selectedTexture && (\n        <div className=\"fixed inset-0 bg-black/80 z-50 flex items-center justify-center p-4\">\n          <div className=\"bg-[#111111] rounded-lg max-w-5xl max-h-[95vh] overflow-auto border border-[#333]\">\n            <div className=\"p-6\">\n              {/* Header */}\n              <div className=\"flex justify-between items-center mb-6\">\n                <h3 className=\"text-xl font-bold text-[#FFD700]\">\n                  Pré-visualização da Textura\n                </h3>\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => setShowPreview(false)}\n                  className=\"border-[#FFD700] text-[#FFD700] hover:bg-[#FFD700] hover:text-black\"\n                >\n                  <ArrowLeft className=\"w-4 h-4 mr-1\" />\n                  Voltar Atrás\n                </Button>\n              </div>\n              \n              <div className=\"grid lg:grid-cols-3 gap-6\">\n                {/* Large Image with Navigation */}\n                <div className=\"lg:col-span-2 relative\">\n                  {/* Previous Arrow */}\n                  {textureImages.length > 1 && (\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={goToPrevious}\n                      className=\"absolute left-2 top-1/2 -translate-y-1/2 z-10 bg-black/70 border-[#FFD700] text-[#FFD700] hover:bg-[#FFD700] hover:text-black w-10 h-10 p-0\"\n                    >\n                      <ChevronLeft className=\"w-5 h-5\" />\n                    </Button>\n                  )}\n\n                  <img\n                    src={selectedTexture}\n                    alt=\"Pré-visualização da textura\"\n                    className=\"w-full rounded-lg border border-[#333]\"\n                  />\n\n                  {/* Next Arrow */}\n                  {textureImages.length > 1 && (\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={goToNext}\n                      className=\"absolute right-2 top-1/2 -translate-y-1/2 z-10 bg-black/70 border-[#FFD700] text-[#FFD700] hover:bg-[#FFD700] hover:text-black w-10 h-10 p-0\"\n                    >\n                      <ChevronRight className=\"w-5 h-5\" />\n                    </Button>\n                  )}\n\n                  {/* Image Counter */}\n                  {textureImages.length > 1 && (\n                    <div className=\"absolute bottom-4 left-1/2 -translate-x-1/2 bg-black/70 text-white px-3 py-1 rounded-full text-sm\">\n                      {getCurrentIndex() + 1} de {textureImages.length}\n                    </div>\n                  )}\n                </div>\n                \n                {/* Actions Panel */}\n                <div className=\"lg:col-span-1\">\n                  <Card className=\"bg-[#0a0a0a] border-[#333]\">\n                    <CardContent className=\"p-6\">\n                      <h4 className=\"text-lg font-bold text-[#FFD700] mb-4\">\n                        {selectedTexture.split('/').pop()?.replace(/\\.(jpg|jpeg|png|gif|webp)$/i, '')}\n                      </h4>\n\n                      {/* Navigation Info */}\n                      {textureImages.length > 1 && (\n                        <div className=\"mb-4 p-3 bg-[#111111] rounded border border-[#333]\">\n                          <p className=\"text-sm text-gray-300 text-center\">\n                            Use as setas para navegar entre texturas\n                          </p>\n                          <div className=\"flex items-center justify-center gap-2 mt-2 text-xs text-gray-400\">\n                            <ChevronLeft className=\"w-4 h-4\" />\n                            <span>Anterior</span>\n                            <span>•</span>\n                            <span>Seguinte</span>\n                            <ChevronRight className=\"w-4 h-4\" />\n                          </div>\n                        </div>\n                      )}\n                      \n                      {/* Category */}\n                      <div className=\"mb-4\">\n                        <Badge className=\"bg-[#FFD700] text-black\">\n                          {textura?.toUpperCase()}\n                        </Badge>\n                      </div>\n                      \n                      {/* Price */}\n                      <div className=\"mb-6 p-4 bg-[#111111] rounded-lg border border-[#333]\">\n                        <div className=\"flex justify-between items-center\">\n                          <span className=\"text-[#FFD700] font-bold\">Preço base:</span>\n                          <span className=\"text-[#FFD700] font-bold text-xl\">€{basePrice}</span>\n                        </div>\n                        <p className=\"text-xs text-gray-400 mt-2\">\n                          *Personalização disponível no carrinho\n                        </p>\n                      </div>\n                      \n                      {/* Action Buttons */}\n                      <div className=\"space-y-3\">\n                        <Button \n                          onClick={handleAddToCart}\n                          className=\"w-full bg-gradient-to-r from-[#FFD700] to-[#20B2AA] text-black font-bold py-3 hover:opacity-90\"\n                        >\n                          <ShoppingCart className=\"w-5 h-5 mr-2\" />\n                          Adicionar ao Carrinho\n                        </Button>\n                        \n                        <Button \n                          variant=\"outline\"\n                          className=\"w-full border-[#20B2AA] text-[#20B2AA] hover:bg-[#20B2AA] hover:text-black\"\n                          onClick={() => {\n                            // Navigate to cart - we'll implement this\n                            window.location.href = '/carrinho';\n                          }}\n                        >\n                          Ver Carrinho\n                        </Button>\n                      </div>\n                      \n                      {/* Continue Shopping Message */}\n                      <div className=\"mt-6 p-4 bg-[#111111] rounded-lg border border-[#333]\">\n                        <p className=\"text-sm text-gray-300 text-center\">\n                          💡 Adicione mais produtos ao carrinho para otimizar o envio!\n                        </p>\n                      </div>\n                      \n                      {/* Product Info */}\n                      <div className=\"mt-6 pt-6 border-t border-[#333]\">\n                        <h5 className=\"text-white font-semibold mb-3\">Informações</h5>\n                        <ul className=\"text-gray-300 text-sm space-y-1\">\n                          <li>• Produto personalizado</li>\n                          <li>• Sem trocas ou devoluções</li>\n                          <li>• Prazo: 5-7 dias úteis</li>\n                          <li>• Instalação disponível</li>\n                        </ul>\n                      </div>\n                    </CardContent>\n                  </Card>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Baby-Pantone Subcategories Navigation */}\n      {isPantoneCategory && (\n        <div className=\"bg-[#111111] border-t border-[#333]\">\n          <div className=\"container mx-auto px-4 py-8\">\n            <h2 className=\"text-2xl font-bold text-[#FFD700] mb-6 text-center\">\n              Ver Texturas Seguintes - Baby Pantone\n            </h2>\n            <p className=\"text-center text-gray-300 mb-6\">\n              Navegue entre as diferentes partes da coleção Baby Pantone\n            </p>\n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 max-w-4xl mx-auto\">\n              {['Baby-Pantone', 'Baby-Pantone-1', 'Baby-Pantone-2', 'Baby-Pantone-3'].map((subcategory: string, index: number) => {\n                const isCurrentCategory = subcategory.toLowerCase().replace(/-/g, '-') === textura;\n                const subcategoryUrl = subcategory.toLowerCase().replace(/-/g, '-');\n                \n                // Check if subcategory has images\n                const hasImages = (images as { images: string[] })?.images?.some((path: string) => \n                  path.includes(`texturas/${subcategory}/`)\n                ) || false;\n                \n                return (\n                  <div key={subcategory}>\n                    {hasImages ? (\n                      <Link href={`/loja/papel-parede/textura/${subcategoryUrl}`}>\n                        <Card className={`text-center cursor-pointer transition-all duration-300 hover:scale-105 ${\n                          isCurrentCategory \n                            ? 'bg-[#FFD700] text-black border-[#FFD700]' \n                            : 'bg-[#0a0a0a] border-[#333] hover:border-[#FFD700]'\n                        }`}>\n                          <CardContent className=\"p-4\">\n                            <div className=\"text-4xl mb-2\">\n                              {index + 1}\n                            </div>\n                            <h3 className={`font-bold text-sm ${\n                              isCurrentCategory ? 'text-black' : 'text-[#FFD700]'\n                            }`}>\n                              Parte {index + 1}\n                            </h3>\n                            <p className={`text-xs mt-1 ${\n                              isCurrentCategory ? 'text-black/70' : 'text-gray-400'\n                            }`}>\n                              {index === 0 ? '001-100' : index === 1 ? '101-200' : index === 2 ? '201-300' : '301-400'}\n                            </p>\n                            {isCurrentCategory && (\n                              <div className=\"mt-2 text-xs font-bold\">\n                                ← ESTÁ AQUI\n                              </div>\n                            )}\n                          </CardContent>\n                        </Card>\n                      </Link>\n                    ) : (\n                      <Card className=\"text-center bg-gray-800 border-gray-600 opacity-50\">\n                        <CardContent className=\"p-4\">\n                          <div className=\"text-4xl mb-2 text-gray-500\">\n                            {index + 1}\n                          </div>\n                          <h3 className=\"font-bold text-sm text-gray-500\">\n                            Parte {index + 1}\n                          </h3>\n                          <p className=\"text-xs mt-1 text-gray-500\">\n                            Em breve\n                          </p>\n                        </CardContent>\n                      </Card>\n                    )}\n                  </div>\n                );\n              })}\n            </div>\n            \n            {/* Info about uploading missing parts */}\n            <div className=\"mt-8 p-4 bg-[#0a0a0a] rounded-lg border border-[#333] text-center\">\n              <p className=\"text-gray-300 text-sm\">\n                💡 Novas texturas serão adicionadas em breve. Fique atento às atualizações!\n              </p>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Baby-Colors Subcategories Navigation */}\n      {isColorsCategory && (\n        <div className=\"bg-[#111111] border-t border-[#333]\">\n          <div className=\"container mx-auto px-4 py-8\">\n            <h2 className=\"text-2xl font-bold text-[#FFD700] mb-6 text-center\">\n              Ver Texturas Seguintes - Baby Colors\n            </h2>\n            <p className=\"text-center text-gray-300 mb-6\">\n              Navegue entre as diferentes partes da coleção Baby Colors\n            </p>\n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 max-w-4xl mx-auto\">\n              {['Baby-Colors', 'Baby-Colors-1', 'Baby-Colors-2', 'Baby-Colors-3'].map((subcategory: string, index: number) => {\n                const isCurrentCategory = subcategory.toLowerCase().replace(/-/g, '-') === textura;\n                const subcategoryUrl = subcategory.toLowerCase().replace(/-/g, '-');\n                \n                // Check if subcategory has images\n                const hasImages = (images as { images: string[] })?.images?.some((path: string) => \n                  path.includes(`texturas/${subcategory}/`)\n                ) || false;\n                \n                return (\n                  <div key={subcategory}>\n                    {hasImages ? (\n                      <Link href={`/loja/papel-parede/textura/${subcategoryUrl}`}>\n                        <Card className={`text-center cursor-pointer transition-all duration-300 hover:scale-105 ${\n                          isCurrentCategory \n                            ? 'bg-[#FFD700] text-black border-[#FFD700]' \n                            : 'bg-[#0a0a0a] border-[#333] hover:border-[#FFD700]'\n                        }`}>\n                          <CardContent className=\"p-4\">\n                            <div className=\"text-4xl mb-2\">\n                              {index + 1}\n                            </div>\n                            <h3 className={`font-bold text-sm ${\n                              isCurrentCategory ? 'text-black' : 'text-[#FFD700]'\n                            }`}>\n                              Parte {index + 1}\n                            </h3>\n                            <p className={`text-xs mt-1 ${\n                              isCurrentCategory ? 'text-black/70' : 'text-gray-400'\n                            }`}>\n                              {index === 0 ? '001-100' : index === 1 ? '101-200' : index === 2 ? '201-300' : '301-400'}\n                            </p>\n                            {isCurrentCategory && (\n                              <div className=\"mt-2 text-xs font-bold\">\n                                ← ESTÁ AQUI\n                              </div>\n                            )}\n                          </CardContent>\n                        </Card>\n                      </Link>\n                    ) : (\n                      <Card className=\"text-center bg-gray-800 border-gray-600 opacity-50\">\n                        <CardContent className=\"p-4\">\n                          <div className=\"text-4xl mb-2 text-gray-500\">\n                            {index + 1}\n                          </div>\n                          <h3 className=\"font-bold text-sm text-gray-500\">\n                            Parte {index + 1}\n                          </h3>\n                          <p className=\"text-xs mt-1 text-gray-500\">\n                            Em breve\n                          </p>\n                        </CardContent>\n                      </Card>\n                    )}\n                  </div>\n                );\n              })}\n            </div>\n            \n            {/* Info about uploading missing parts */}\n            <div className=\"mt-8 p-4 bg-[#0a0a0a] rounded-lg border border-[#333] text-center\">\n              <p className=\"text-gray-300 text-sm\">\n                💡 Novas texturas serão adicionadas em breve. Fique atento às atualizações!\n              </p>\n            </div>\n          </div>\n        </div>\n      )}\n\n      <Footer />\n    </div>\n  );\n}","size_bytes":27626},"client/src/pages/loja.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Star, ShoppingCart, Settings } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport Navigation from \"@/components/navigation\";\nimport Footer from \"@/components/footer\";\nimport wallpaperSamplesImage from \"@assets/box_amostras_prodeccor_plus_1755963100331.webp\";\nimport quadrosCanvasCover from \"@assets/image_1756920896021.png\";\n\ninterface Product {\n  id: number;\n  name: string;\n  description: string;\n  price: number;\n  originalPrice?: number;\n  rating: number;\n  image: string;\n  category: string;\n  status: 'available' | 'promotion' | 'new' | 'sold-out';\n}\n\nconst products: Product[] = [\n  // Produtos removidos - apenas Papel de Parede disponível por agora\n];\n\nconst categories = [\n  { id: 'papel-parede', name: 'Papel de Parede', href: '/loja/papel-parede' },\n  { id: 'quadros-canvas', name: 'Quadros em Canvas', href: '/loja/quadros-canvas' }\n  // Outras categorias serão adicionadas conforme necessário\n];\n\nexport default function Loja() {\n  // Simplified - only Papel de Parede category available\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case 'promotion':\n        return <Badge className=\"bg-[#FF6347] text-white\">Promoção</Badge>;\n      case 'new':\n        return <Badge className=\"bg-[#20B2AA] text-white\">Novo</Badge>;\n      case 'sold-out':\n        return <Badge variant=\"secondary\">Esgotado</Badge>;\n      default:\n        return null;\n    }\n  };\n\n  const renderStars = (rating: number) => {\n    return (\n      <div className=\"flex items-center gap-1\">\n        {[...Array(5)].map((_, i) => (\n          <Star \n            key={i} \n            className={`w-4 h-4 ${i < Math.floor(rating) ? 'fill-[#FFD700] text-[#FFD700]' : 'text-gray-400'}`} \n          />\n        ))}\n        <span className=\"text-sm text-gray-400 ml-1\">({rating})</span>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"min-h-screen bg-[#0a0a0a] text-white\">\n      <Navigation />\n      \n      {/* Hero Section */}\n      <section className=\"bg-gradient-to-br from-brand-yellow/10 via-brand-turquoise/5 to-brand-coral/10 py-20 mt-16\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"max-w-4xl mx-auto text-center\">\n            <h1 className=\"text-4xl md:text-6xl font-bold mb-4\">\n              Nossa <span className=\"text-brand-yellow\">Loja</span>\n            </h1>\n            <p className=\"text-xl text-muted-foreground mb-6 leading-relaxed\">\n              Produtos personalizáveis prontos para entrega. Qualidade profissional com a comodidade de compra online.\n            </p>\n            <div className=\"flex flex-wrap justify-center gap-4 mt-8\">\n              <div className=\"flex items-center gap-2 bg-white/10 backdrop-blur-sm px-4 py-2 rounded-full\">\n                <span className=\"text-brand-yellow\">✓</span>\n                <span className=\"text-sm\">Entrega rápida</span>\n              </div>\n              <div className=\"flex items-center gap-2 bg-white/10 backdrop-blur-sm px-4 py-2 rounded-full\">\n                <span className=\"text-brand-turquoise\">✓</span>\n                <span className=\"text-sm\">Qualidade garantida</span>\n              </div>\n              <div className=\"flex items-center gap-2 bg-white/10 backdrop-blur-sm px-4 py-2 rounded-full\">\n                <span className=\"text-brand-coral\">✓</span>\n                <span className=\"text-sm\">Personalização total</span>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Main Category Section */}\n      <section className=\"py-0\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"max-w-4xl mx-auto text-center\">\n            <h2 className=\"text-3xl font-bold mb-4 text-[#FFD700]\">\n              Categorias Disponíveis\n            </h2>\n            \n            {/* Grid responsivo: 2 cols mobile, 3 cols tablet, 4 cols desktop */}\n            <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4 md:gap-6 max-w-4xl mx-auto\">\n              {/* Papel de Parede */}\n              <Link href=\"/loja/papel-parede\">\n                <Card className=\"bg-[#111111] border-[#333] hover:border-[#FFD700] transition-all duration-300 group cursor-pointer\">\n                  <CardContent className=\"p-4\">\n                    <div className=\"w-full h-24 rounded-lg mx-auto mb-4 overflow-hidden\">\n                      <img \n                        src={wallpaperSamplesImage} \n                        alt=\"Papel de Parede Samples\" \n                        className=\"w-full h-full object-cover rounded-lg\"\n                      />\n                    </div>\n                    \n                    <h3 className=\"text-lg font-bold group-hover:text-[#FFD700] transition-colors text-center\">\n                      Papel de Parede\n                    </h3>\n                  </CardContent>\n                </Card>\n              </Link>\n\n              {/* Quadros em Canvas */}\n              <Link href=\"/loja/quadros-canvas\">\n                <Card className=\"bg-[#111111] border-[#333] hover:border-[#20B2AA] transition-all duration-300 group cursor-pointer\">\n                  <CardContent className=\"p-4\">\n                    <div className=\"w-full h-24 rounded-lg mx-auto mb-4 overflow-hidden\">\n                      <img \n                        src={quadrosCanvasCover} \n                        alt=\"Quadros em Canvas\" \n                        className=\"w-full h-full object-cover rounded-lg\"\n                      />\n                    </div>\n                    \n                    <h3 className=\"text-lg font-bold group-hover:text-[#20B2AA] transition-colors text-center\">\n                      Quadros em Canvas\n                    </h3>\n                  </CardContent>\n                </Card>\n              </Link>\n\n              {/* Placeholders para outras categorias */}\n              {[1, 2].map((i) => (\n                <Card key={i} className=\"bg-[#111111] border-[#333] opacity-50\">\n                  <CardContent className=\"p-4\">\n                    <div className=\"w-16 h-16 bg-gray-800/50 border-2 border-dashed border-gray-600 rounded-lg mx-auto mb-4 flex items-center justify-center\">\n                      <span className=\"text-gray-500 text-xl\">📦</span>\n                    </div>\n                    \n                    <h3 className=\"text-lg font-bold mb-2 text-gray-400 text-center\">\n                      Em Breve\n                    </h3>\n                    \n                    <p className=\"text-gray-500 text-sm text-center\">\n                      Mais produtos brevemente\n                    </p>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n            \n            {/* Info about more categories */}\n            <div className=\"mt-12 p-6 bg-[#111111] rounded-lg border border-[#333]\">\n              <h4 className=\"text-lg font-semibold mb-3 text-[#20B2AA]\">\n                Mais Categorias em Breve\n              </h4>\n              <p className=\"text-gray-300\">\n                Outras categorias como Placas Decorativas, Autocolantes, Quadros e Sinalização \n                serão adicionadas progressivamente conforme necessário.\n              </p>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Features Section */}\n      <section className=\"py-16 px-4 bg-black\">\n        <div className=\"max-w-6xl mx-auto\">\n          <div className=\"grid md:grid-cols-3 gap-8\">\n            <div className=\"text-center\">\n              <div className=\"w-16 h-16 bg-gradient-to-br from-[#FFD700] to-[#20B2AA] rounded-full mx-auto mb-4 flex items-center justify-center\">\n                <Settings className=\"w-8 h-8 text-black\" />\n              </div>\n              <h3 className=\"text-xl font-bold mb-2 text-[#FFD700]\">Personalização Gratuita</h3>\n              <p className=\"text-gray-300\">\n                Todos os produtos podem ser personalizados sem custos adicionais.\n              </p>\n            </div>\n\n            <div className=\"text-center\">\n              <div className=\"w-16 h-16 bg-gradient-to-br from-[#20B2AA] to-[#4169E1] rounded-full mx-auto mb-4 flex items-center justify-center\">\n                <span className=\"text-2xl\">🚚</span>\n              </div>\n              <h3 className=\"text-xl font-bold mb-2 text-[#20B2AA]\">Envio Rápido</h3>\n              <p className=\"text-gray-300\">\n                Entregas em 3-5 dias úteis para todo o país.\n              </p>\n            </div>\n\n            <div className=\"text-center\">\n              <div className=\"w-16 h-16 bg-gradient-to-br from-[#FF6347] to-[#FFD700] rounded-full mx-auto mb-4 flex items-center justify-center\">\n                <Star className=\"w-8 h-8 text-black\" />\n              </div>\n              <h3 className=\"text-xl font-bold mb-2 text-[#FF6347]\">Qualidade Garantida</h3>\n              <p className=\"text-gray-300\">\n                40 anos de experiência garantem a melhor qualidade.\n              </p>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      <Footer />\n    </div>\n  );\n}","size_bytes":9245},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/noticias.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport Navigation from \"@/components/navigation\";\nimport Footer from \"@/components/footer\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Calendar, Clock, Share2, Facebook, Instagram, Linkedin, Search, Filter, Eye, Heart, MessageCircle, Play, ArrowRight } from \"lucide-react\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Link } from \"wouter\";\n\n// Dados das notícias (em produção viria de uma base de dados)\nconst noticias = [\n  {\n    id: 2,\n    titulo: \"🎬 Nova Demonstração Interativa - Conheça a DOMREALCE numa Jornada Guiada!\",\n    resumo: \"Descubra tudo sobre a DOMREALCE numa experiência interativa única! Explore nossos produtos, serviços, portfólio e simule uma compra completa numa apresentação envolvente.\",\n    conteudo: \"🌟 APRESENTAMOS A DEMONSTRAÇÃO INTERATIVA MAIS COMPLETA DO SETOR!\\n\\nQuer conhecer tudo sobre a DOMREALCE de forma divertida e envolvente? A nossa nova demonstração interativa é como um vídeo de apresentação, mas melhor - você controla o ritmo!\\n\\n🎯 O QUE VAI DESCOBRIR:\\n\\n🛍️ LOJA ONLINE EM AÇÃO\\n• Veja os nossos produtos em destaque\\n• Características detalhadas e diferenciais\\n• Preços transparentes e qualidade garantida\\n• Calculadora automática para papel de parede\\n\\n🎨 SERVIÇOS ESPECIALIZADOS\\n• Design Gráfico profissional\\n• Impressão Digital de alta qualidade  \\n• Papel de Parede com instalação\\n• Decoração de Viaturas personalizada\\n\\n📸 PORTFÓLIO IMPRESSIONANTE\\n• Mais de 100 projetos realizados\\n• Galeria interativa de trabalhos\\n• Antes e depois dos nossos projetos\\n• Inspiração para o seu próximo trabalho\\n\\n💳 SIMULAÇÃO DE COMPRA REALISTA\\n• Processo de compra passo a passo\\n• Opções de pagamento portuguesas (MB WAY, Multibanco, Payshop)\\n• Informações de entrega e instalação\\n• Experiência de compra simplificada\\n\\n🌐 REDES SOCIAIS INTEGRADAS\\n• Links diretos para Facebook, Instagram e LinkedIn\\n• Botões de ação para contacto imediato\\n• Convites para visitar a nossa loja online\\n\\n⚡ CONTROLOS INTERATIVOS\\n• Botão play/pause como num vídeo\\n• Navegação por passos\\n• Barra de progresso visual\\n• Avance no seu próprio ritmo\\n\\n🚀 COMO FUNCIONA?\\n1. Visite /demo-interativo no nosso site\\n2. Clique em 'Play' para começar a jornada\\n3. Navegue pelos 6 passos da apresentação\\n4. Pause quando quiser explorar mais\\n5. Salte para qualquer secção que lhe interesse\\n\\n💡 PERFEITO PARA:\\n✓ Novos clientes que querem conhecer-nos\\n✓ Quem procura inspiração para projetos\\n✓ Empresas interessadas nos nossos serviços\\n✓ Qualquer pessoa curiosa sobre comunicação visual\\n\\n🎉 EXPERIMENTE AGORA!\\nA demonstração está disponível 24/7 no nosso website. É grátis, rápida e vai mostrar-lhe porque somos líderes em comunicação visual!\\n\\n👑 DOMREALCE - Onde cada ideia ganha vida!\",\n    categoria: \"Funcionalidades\",\n    imagem: \"https://images.unsplash.com/photo-1600880292203-757bb62b4baf?ixlib=rb-4.0.3&auto=format&fit=crop&w=1920&h=1080\",\n    data: \"2025-09-03\",\n    autor: \"Equipa Digital DOMREALCE\",\n    tags: [\"demo-interativo\", \"experiência-digital\", \"produtos\", \"serviços\", \"inovação\"],\n    visualizacoes: 1,\n    likes: 0,\n    comentarios: 0\n  },\n  {\n    id: 1,\n    titulo: \"🚀 DOMREALCE Digital: A Revolução na Comunicação Visual Portuguesa Chegou!\",\n    resumo: \"Descobra a nova era da comunicação visual com a nossa plataforma digital revolucionária. Design profissional, tecnologia de ponta e a qualidade DOMREALCE que conhece - tudo num só lugar, à distância de um clique.\",\n    conteudo: \"⭐ A NOVA ERA DA COMUNICAÇÃO VISUAL PORTUGUESA ESTÁ AQUI!\\n\\nApós meses de desenvolvimento intensivo, apresentamos com imenso orgulho www.domrealce.com - não é apenas um website, é uma revolução digital que vai transformar a forma como pensa em comunicação visual!\\n\\n🎨 EXPLORE UM UNIVERSO DE POSSIBILIDADES\\n• Portfolio Interativo com mais de 200 projetos exclusivos organizados por categorias\\n• Galeria HD com antes/depois dos nossos trabalhos mais impactantes\\n• Estudos de caso detalhados de campanhas que marcaram a diferença\\n• Inspiração sem limites para o seu próximo projeto\\n\\n🛒 LOJA ONLINE INTELIGENTE - PAPEL DE PAREDE PERSONALIZADO\\n• Calculadora automática de medidas - nunca mais desperdice material!\\n• Simulador de acabamentos em tempo real\\n• Sistema de orçamento instantâneo com preços transparentes\\n• Guias de aplicação profissionais incluídos\\n\\n💳 PAGAMENTOS 100% PORTUGUESES SEGUROS\\n• MB WAY instantâneo\\n• Multibanco tradicional\\n• Confirmações automáticas por SMS e email\\n\\n📱 EXPERIÊNCIA PREMIUM EM QUALQUER DISPOSITIVO\\n• Design responsivo de última geração\\n• Navegação intuitiva e carregamento ultra-rápido\\n• Formulários inteligentes com upload direto de ficheiros\\n• Sistema de orçamentos online com resposta em 24h\\n\\n🏆 QUALIDADE DOMREALCE, AGORA DIGITAL\\nMais de 15 anos de experiência em comunicação visual, agora potenciados pela tecnologia mais avançada. Cada detalhe foi pensado para proporcionar uma experiência única e profissional.\\n\\n🎯 PORQUE É QUE DEVE VISITAR AGORA?\\n✓ Descontos exclusivos de lançamento até 31 de Agosto\\n✓ Orçamentos gratuitos e sem compromisso\\n✓ Inspiração ilimitada para os seus projetos\\n✓ Acesso prioritário a novos serviços\\n✓ Suporte técnico especializado incluído\\n\\n🌟 NÃO PERCA ESTA OPORTUNIDADE ÚNICA!\\nSeja um dos primeiros a descobrir o futuro da comunicação visual portuguesa. Visite www.domrealce.com e prepare-se para ficar surpreendido!\\n\\n👑 DOMREALCE Digital - Onde a Sua Visão Ganha Vida!\",\n    categoria: \"Novidades DOMREALCE\",\n    imagem: \"https://images.unsplash.com/photo-1496442226666-8d4d0e62e6e9?ixlib=rb-4.0.3&auto=format&fit=crop&w=1920&h=1080\",\n    data: \"2025-08-22\",\n    autor: \"Equipa DOMREALCE\",\n    tags: [\"revolução-digital\", \"loja-exclusiva\", \"descontos-lançamento\", \"premium\", \"inovação-portuguesa\"],\n    visualizacoes: 1,\n    likes: 0,\n    comentarios: 0\n  }\n];\n\nconst categorias = [\"Todas\", \"Funcionalidades\", \"Novidades DOMREALCE\"];\n\nexport default function Noticias() {\n  const [filtroCategoria, setFiltroCategoria] = useState(\"Todas\");\n  const [termoPesquisa, setTermoPesquisa] = useState(\"\");\n  const [noticiasFiltradas, setNoticiasFiltradas] = useState(noticias);\n\n  // Filtrar notícias\n  const filtrarNoticias = () => {\n    let resultado = noticias;\n\n    // Filtro por categoria\n    if (filtroCategoria !== \"Todas\") {\n      resultado = resultado.filter(noticia => noticia.categoria === filtroCategoria);\n    }\n\n    // Filtro por termo de pesquisa\n    if (termoPesquisa) {\n      resultado = resultado.filter(noticia => \n        noticia.titulo.toLowerCase().includes(termoPesquisa.toLowerCase()) ||\n        noticia.resumo.toLowerCase().includes(termoPesquisa.toLowerCase()) ||\n        noticia.tags.some(tag => tag.toLowerCase().includes(termoPesquisa.toLowerCase()))\n      );\n    }\n\n    setNoticiasFiltradas(resultado);\n  };\n\n  // Partilhar nas redes sociais\n  const partilharFacebook = (noticia: typeof noticias[0]) => {\n    const url = `https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(window.location.href + '#' + noticia.id)}`;\n    window.open(url, '_blank', 'width=600,height=400');\n  };\n\n  const partilharInstagram = () => {\n    // Instagram não permite partilha directa por URL, mostra instrução\n    alert('Para partilhar no Instagram, tire uma captura de ecrã desta página e publique na sua conta @domrealce');\n  };\n\n  const partilharLinkedin = (noticia: typeof noticias[0]) => {\n    const url = `https://www.linkedin.com/sharing/share-offsite/?url=${encodeURIComponent(window.location.href + '#' + noticia.id)}`;\n    window.open(url, '_blank', 'width=600,height=400');\n  };\n\n\n\n  const formatarData = (data: string) => {\n    return new Date(data).toLocaleDateString('pt-PT', {\n      year: 'numeric',\n      month: 'long', \n      day: 'numeric'\n    });\n  };\n\n  // Aplicar filtros quando mudarem\n  useEffect(() => {\n    filtrarNoticias();\n  }, [filtroCategoria, termoPesquisa]);\n\n  return (\n    <div className=\"bg-background text-foreground min-h-screen\">\n      <Navigation />\n      \n      {/* Hero Section */}\n      <section className=\"bg-gradient-to-br from-brand-yellow/10 via-brand-turquoise/5 to-brand-coral/10 py-20 mt-16\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"text-center max-w-4xl mx-auto\">\n            <h1 className=\"text-4xl md:text-6xl font-heading font-bold mb-4\">\n              <span className=\"text-brand-yellow\">Notícias</span> & <span className=\"text-brand-turquoise\">Projectos</span>\n            </h1>\n            <p className=\"text-xl text-muted-foreground mb-6 max-w-2xl mx-auto\">\n              Descubra os nossos trabalhos mais recentes, projetos históricos e as últimas tendências em comunicação visual\n            </p>\n          </div>\n        </div>\n      </section>\n\n      {/* Filtros e Pesquisa */}\n      <section className=\"pt-0 pb-4 border-b border-border\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"flex flex-col md:flex-row gap-4 items-center justify-between\">\n            <div className=\"flex flex-col sm:flex-row gap-4 items-center\">\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground\" size={20} />\n                <Input\n                  placeholder=\"Pesquisar notícias...\"\n                  value={termoPesquisa}\n                  onChange={(e) => setTermoPesquisa(e.target.value)}\n                  className=\"pl-10 w-full sm:w-80\"\n                />\n              </div>\n              \n              <Select value={filtroCategoria} onValueChange={setFiltroCategoria}>\n                <SelectTrigger className=\"w-full sm:w-48\">\n                  <Filter size={16} className=\"mr-2\" />\n                  <SelectValue placeholder=\"Categoria\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {categorias.map((categoria) => (\n                    <SelectItem key={categoria} value={categoria}>\n                      {categoria}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div className=\"text-sm text-muted-foreground\">\n              {noticiasFiltradas.length} {noticiasFiltradas.length === 1 ? 'resultado' : 'resultados'}\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Destaque - Demonstração Interativa */}\n      <section className=\"pt-0 pb-4\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"relative bg-gradient-to-r from-[#e84b5e] to-[#4dabf7] rounded-2xl p-8 mb-8 shadow-2xl\">\n            <div className=\"absolute inset-0 bg-black/20 rounded-2xl\"></div>\n            <div className=\"relative z-10 text-center\">\n              <h2 className=\"text-2xl md:text-3xl font-bold text-white mb-4\">\n                🎬 Experimente Nossa Nova Demonstração Interativa!\n              </h2>\n              <p className=\"text-white/90 mb-6 text-lg\">\n                Descubra tudo sobre a DOMREALCE numa jornada guiada de 6 passos - como um vídeo que pode controlar!\n              </p>\n              <Link href=\"/demo-interativo\">\n                <Button className=\"bg-white text-[#e84b5e] hover:bg-gray-100 font-bold px-8 py-3 text-lg\">\n                  <Play className=\"h-5 w-5 mr-2\" />\n                  Ver Demonstração Agora\n                  <ArrowRight className=\"h-5 w-5 ml-2\" />\n                </Button>\n              </Link>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Lista de Notícias */}\n      <section className=\"pt-0 pb-8\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"grid gap-8\">\n            {noticiasFiltradas.map((noticia) => (\n              <Card key={noticia.id} className=\"overflow-hidden hover-lift border-border bg-card\">\n                <div className=\"md:flex\">\n                  {/* Imagem */}\n                  <div className=\"md:w-1/3\">\n                    <div className=\"aspect-video md:aspect-square bg-muted relative overflow-hidden\">\n                      <img \n                        src={noticia.imagem} \n                        alt={noticia.titulo}\n                        className=\"absolute inset-0 w-full h-full object-cover\"\n                      />\n                      <div className=\"absolute inset-0 bg-gradient-to-br from-brand-yellow/20 via-transparent to-brand-turquoise/20\"></div>\n                      {/* Badge de destaque */}\n                      <div className=\"absolute top-4 left-4\">\n                        <Badge className=\"bg-brand-coral text-white font-semibold\">🔥 NOVO</Badge>\n                      </div>\n                    </div>\n                  </div>\n                  \n                  {/* Conteúdo */}\n                  <div className=\"md:w-2/3 p-6\">\n                    <CardHeader className=\"p-0 mb-4\">\n                      <div className=\"flex items-center justify-between mb-2\">\n                        <Badge variant=\"secondary\" className=\"bg-brand-yellow/10 text-brand-yellow border-brand-yellow/20\">\n                          {noticia.categoria}\n                        </Badge>\n                        <div className=\"flex items-center gap-4 text-sm text-muted-foreground\">\n                          <div className=\"flex items-center gap-1\">\n                            <Eye size={14} />\n                            {noticia.visualizacoes}\n                          </div>\n                          <div className=\"flex items-center gap-1\">\n                            <Heart size={14} />\n                            {noticia.likes}\n                          </div>\n                          <div className=\"flex items-center gap-1\">\n                            <MessageCircle size={14} />\n                            {noticia.comentarios}\n                          </div>\n                        </div>\n                      </div>\n                      \n                      <CardTitle className=\"text-2xl mb-2 hover:text-brand-turquoise transition-colors cursor-pointer\">\n                        {noticia.titulo}\n                      </CardTitle>\n                      \n                      <div className=\"flex items-center gap-4 text-sm text-muted-foreground\">\n                        <div className=\"flex items-center gap-1\">\n                          <Calendar size={14} />\n                          {formatarData(noticia.data)}\n                        </div>\n                        <div className=\"flex items-center gap-1\">\n                          <Clock size={14} />\n                          {noticia.autor}\n                        </div>\n                      </div>\n                    </CardHeader>\n\n                    <CardContent className=\"p-0\">\n                      <CardDescription className=\"text-base mb-4 leading-relaxed\">\n                        {noticia.resumo}\n                      </CardDescription>\n                      \n                      {/* Tags */}\n                      <div className=\"flex flex-wrap gap-2 mb-4\">\n                        {noticia.tags.map((tag) => (\n                          <Badge key={tag} variant=\"outline\" className=\"text-xs\">\n                            #{tag}\n                          </Badge>\n                        ))}\n                      </div>\n\n                      {/* Acções */}\n                      <div className=\"flex items-center justify-between\">\n                        <Button \n                          asChild\n                          variant=\"outline\" \n                          className=\"border-brand-coral text-brand-coral hover:bg-brand-coral hover:text-white font-semibold shadow-sm\"\n                        >\n                          <Link href=\"/servicos\">\n                            🌟 Descobrir Agora\n                          </Link>\n                        </Button>\n                        \n                        {/* Partilha Social */}\n                        <div className=\"flex items-center gap-2\">\n                          <span className=\"text-sm text-muted-foreground mr-2\">Partilhar:</span>\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => partilharFacebook(noticia)}\n                            className=\"text-blue-600 hover:bg-blue-600/10\"\n                          >\n                            <Facebook size={16} />\n                          </Button>\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={partilharInstagram}\n                            className=\"text-pink-600 hover:bg-pink-600/10\"\n                          >\n                            <Instagram size={16} />\n                          </Button>\n                          <Button\n                            variant=\"ghost\" \n                            size=\"sm\"\n                            onClick={() => partilharLinkedin(noticia)}\n                            className=\"text-blue-700 hover:bg-blue-700/10\"\n                          >\n                            <Linkedin size={16} />\n                          </Button>\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => navigator.share?.({\n                              title: noticia.titulo,\n                              text: noticia.resumo,\n                              url: window.location.href + '#' + noticia.id\n                            })}\n                            className=\"text-muted-foreground hover:bg-muted\"\n                          >\n                            <Share2 size={16} />\n                          </Button>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </div>\n                </div>\n              </Card>\n            ))}\n          </div>\n\n          {/* Mensagem quando não há resultados */}\n          {noticiasFiltradas.length === 0 && (\n            <div className=\"text-center py-16\">\n              <div className=\"text-6xl mb-4\">🔍</div>\n              <h3 className=\"text-2xl font-heading font-semibold mb-2\">Nenhum resultado encontrado</h3>\n              <p className=\"text-muted-foreground mb-6\">\n                Tente ajustar os filtros ou termo de pesquisa\n              </p>\n              <Button \n                onClick={() => {\n                  setFiltroCategoria(\"Todas\");\n                  setTermoPesquisa(\"\");\n                }}\n                className=\"bg-brand-yellow text-brand-dark hover:bg-brand-yellow/90\"\n              >\n                Limpar Filtros\n              </Button>\n            </div>\n          )}\n\n          {/* Paginação (simulada) */}\n          {noticiasFiltradas.length > 0 && (\n            <div className=\"flex justify-center items-center gap-4 mt-16\">\n              <Button variant=\"outline\" disabled>Anterior</Button>\n              <div className=\"flex gap-2\">\n                <Button variant=\"default\" className=\"bg-brand-yellow text-brand-dark\">1</Button>\n                <Button variant=\"outline\">2</Button>\n                <Button variant=\"outline\">3</Button>\n              </div>\n              <Button variant=\"outline\">Próxima</Button>\n            </div>\n          )}\n        </div>\n      </section>\n\n      {/* Call to Action */}\n      <section className=\"py-16 bg-muted\">\n        <div className=\"container mx-auto px-4 text-center\">\n          <h2 className=\"text-3xl font-heading font-bold mb-4\">\n            Tem um projeto em mente?\n          </h2>\n          <p className=\"text-lg text-muted-foreground mb-6 max-w-2xl mx-auto\">\n            Vamos criar algo extraordinário juntos. Contacte-nos para discutir o seu próximo projeto.\n          </p>\n          <Button \n            size=\"lg\" \n            className=\"bg-brand-turquoise text-white hover:bg-brand-turquoise/90\"\n            onClick={() => window.location.href = '/contactos#formulario'}\n          >\n            Pedir Orçamento\n          </Button>\n        </div>\n      </section>\n\n      <Footer />\n    </div>\n  );\n}","size_bytes":20762},"client/src/pages/pedido-confirmado.tsx":{"content":"import { useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport Navigation from \"@/components/navigation\";\nimport Footer from \"@/components/footer\";\nimport { CheckCircle, Package, Mail, Phone, Home } from \"lucide-react\";\nimport { Link } from \"wouter\";\n\nexport default function PedidoConfirmado() {\n  useEffect(() => {\n    // Scroll to top when component mounts\n    window.scrollTo(0, 0);\n  }, []);\n\n  return (\n    <div className=\"min-h-screen bg-[#0a0a0a] text-white\">\n      <Navigation />\n      \n      <div className=\"container mx-auto px-4 py-12\">\n        <div className=\"max-w-2xl mx-auto\">\n          {/* Success Message */}\n          <Card className=\"bg-[#111111] border-[#333] text-center mb-8\">\n            <CardContent className=\"p-8\">\n              <div className=\"mb-6\">\n                <CheckCircle className=\"h-20 w-20 text-green-500 mx-auto mb-4\" />\n                <h1 className=\"text-3xl font-bold text-[#FFD700] mb-2\">\n                  Pedido Confirmado!\n                </h1>\n                <p className=\"text-gray-300\">\n                  O seu pedido foi processado com sucesso. Receberá um email de confirmação em breve.\n                </p>\n              </div>\n              \n              <div className=\"bg-[#0a0a0a] p-6 rounded-lg border border-[#333] mb-6\">\n                <h2 className=\"text-xl font-semibold text-[#FFD700] mb-4\">\n                  Próximos Passos\n                </h2>\n                <div className=\"space-y-4 text-left\">\n                  <div className=\"flex items-start gap-3\">\n                    <Mail className=\"h-5 w-5 text-[#20B2AA] mt-0.5\" />\n                    <div>\n                      <h3 className=\"font-semibold text-white\">Email de Confirmação</h3>\n                      <p className=\"text-sm text-gray-300\">\n                        Receberá um email com todos os detalhes do seu pedido e instruções de pagamento (se aplicável).\n                      </p>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex items-start gap-3\">\n                    <Package className=\"h-5 w-5 text-[#20B2AA] mt-0.5\" />\n                    <div>\n                      <h3 className=\"font-semibold text-white\">Produção</h3>\n                      <p className=\"text-sm text-gray-300\">\n                        O seu papel de parede será produzido com alta qualidade e atenção aos detalhes. Tempo estimado: 3-5 dias úteis.\n                      </p>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex items-start gap-3\">\n                    <Phone className=\"h-5 w-5 text-[#20B2AA] mt-0.5\" />\n                    <div>\n                      <h3 className=\"font-semibold text-white\">Contacto para Entrega</h3>\n                      <p className=\"text-sm text-gray-300\">\n                        A nossa equipa entrará em contacto consigo para agendar a entrega ou recolha.\n                      </p>\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"space-y-4\">\n                <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n                  <Link href=\"/loja/papel-parede\">\n                    <Button className=\"bg-gradient-to-r from-[#FFD700] to-[#20B2AA] text-black font-bold hover:opacity-90\">\n                      Continuar a Comprar\n                    </Button>\n                  </Link>\n                  <Link href=\"/\">\n                    <Button variant=\"outline\" className=\"border-[#333] text-white hover:bg-[#333]\">\n                      <Home className=\"h-4 w-4 mr-2\" />\n                      Voltar ao Início\n                    </Button>\n                  </Link>\n                </div>\n                \n                <p className=\"text-sm text-gray-400\">\n                  Dúvidas? Entre em contacto connosco através do WhatsApp: \n                  <a href=\"https://wa.me/351930682725\" className=\"text-[#FFD700] hover:text-[#20B2AA] ml-1\">\n                    +351 930 682 725\n                  </a>\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Additional Information */}\n          <Card className=\"bg-[#111111] border-[#333]\">\n            <CardContent className=\"p-6\">\n              <h2 className=\"text-xl font-bold text-[#FFD700] mb-4\">\n                Informações Importantes\n              </h2>\n              <ul className=\"space-y-2 text-gray-300 text-sm\">\n                <li>• Todos os produtos DOMREALCE incluem garantia de qualidade</li>\n                <li>• Oferecemos suporte técnico para aplicação do papel de parede</li>\n                <li>• Envio grátis para Portugal Continental em compras acima de €100</li>\n                <li>• Possibilidade de instalação profissional (contacte-nos para orçamento)</li>\n                <li>• Prazo de entrega: 3-7 dias úteis após confirmação do pagamento</li>\n              </ul>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n\n      <Footer />\n    </div>\n  );\n}","size_bytes":5204},"client/src/pages/politica-cookies.tsx":{"content":"import Navigation from \"@/components/navigation\";\nimport Footer from \"@/components/footer\";\n\nexport default function PoliticaCookies() {\n  return (\n    <div className=\"min-h-screen bg-[#0a0a0a] text-white\">\n      <Navigation />\n      \n      <div className=\"pt-32 pb-16 px-4\">\n        <div className=\"max-w-4xl mx-auto\">\n          <h1 className=\"text-4xl md:text-5xl font-bold mb-8 text-center\">\n            Política de Cookies\n          </h1>\n          \n          <div className=\"prose prose-invert prose-lg max-w-none\">\n            <p className=\"text-gray-300 mb-8 text-center\">\n              Última atualização: Agosto de 2025\n            </p>\n\n            <section className=\"mb-8\">\n              <h2 className=\"text-2xl font-bold mb-4 text-[#FFD700]\">1. O que são Cookies</h2>\n              <p className=\"text-gray-300 leading-relaxed mb-4\">\n                Os cookies são pequenos ficheiros de texto que são armazenados no seu dispositivo \n                quando visita o nosso website. Estes ficheiros permitem que o website reconheça \n                o seu dispositivo e armazene algumas informações sobre as suas preferências ou \n                ações passadas.\n              </p>\n            </section>\n\n            <section className=\"mb-8\">\n              <h2 className=\"text-2xl font-bold mb-4 text-[#FFD700]\">2. Como Utilizamos os Cookies</h2>\n              <p className=\"text-gray-300 leading-relaxed mb-4\">\n                O website da DOMREALCE utiliza cookies para:\n              </p>\n              <ul className=\"text-gray-300 space-y-2 ml-6\">\n                <li>• Melhorar a experiência de navegação no website</li>\n                <li>• Lembrar as suas preferências e definições</li>\n                <li>• Analisar o tráfego do website e padrões de utilização</li>\n                <li>• Personalizar conteúdo e publicidade</li>\n                <li>• Garantir a segurança do website</li>\n              </ul>\n            </section>\n\n            <section className=\"mb-8\">\n              <h2 className=\"text-2xl font-bold mb-4 text-[#FFD700]\">3. Tipos de Cookies Utilizados</h2>\n              \n              <div className=\"mb-6\">\n                <h3 className=\"text-xl font-bold mb-3 text-[#20B2AA]\">Cookies Essenciais</h3>\n                <p className=\"text-gray-300 leading-relaxed mb-4\">\n                  Estes cookies são necessários para o funcionamento básico do website e não \n                  podem ser desativados. Incluem cookies de sessão e segurança.\n                </p>\n              </div>\n\n              <div className=\"mb-6\">\n                <h3 className=\"text-xl font-bold mb-3 text-[#20B2AA]\">Cookies de Performance</h3>\n                <p className=\"text-gray-300 leading-relaxed mb-4\">\n                  Recolhem informações sobre como os visitantes utilizam o website, como as \n                  páginas mais visitadas e eventuais mensagens de erro.\n                </p>\n              </div>\n\n              <div className=\"mb-6\">\n                <h3 className=\"text-xl font-bold mb-3 text-[#20B2AA]\">Cookies de Funcionalidade</h3>\n                <p className=\"text-gray-300 leading-relaxed mb-4\">\n                  Permitem que o website se lembre das escolhas que faz e forneça funcionalidades \n                  melhoradas e mais personalizadas.\n                </p>\n              </div>\n\n              <div className=\"mb-6\">\n                <h3 className=\"text-xl font-bold mb-3 text-[#20B2AA]\">Cookies de Marketing</h3>\n                <p className=\"text-gray-300 leading-relaxed mb-4\">\n                  Utilizados para entregar anúncios mais relevantes para si e para os seus interesses.\n                </p>\n              </div>\n            </section>\n\n            <section className=\"mb-8\">\n              <h2 className=\"text-2xl font-bold mb-4 text-[#FFD700]\">4. Cookies de Terceiros</h2>\n              <p className=\"text-gray-300 leading-relaxed mb-4\">\n                O nosso website pode incluir cookies de terceiros, incluindo:\n              </p>\n              <ul className=\"text-gray-300 space-y-2 ml-6\">\n                <li>• Google Analytics (para análise de tráfego)</li>\n                <li>• Redes sociais (para partilha de conteúdo)</li>\n                <li>• Serviços de chat online</li>\n              </ul>\n            </section>\n\n            <section className=\"mb-8\">\n              <h2 className=\"text-2xl font-bold mb-4 text-[#FFD700]\">5. Gestão de Cookies</h2>\n              <p className=\"text-gray-300 leading-relaxed mb-4\">\n                Pode controlar e/ou eliminar cookies conforme desejar. Pode eliminar todos \n                os cookies que já estão no seu dispositivo e configurar a maioria dos navegadores \n                para bloquear a colocação de cookies.\n              </p>\n              \n              <div className=\"bg-[#111111] border border-[#333] rounded-lg p-6 mt-6\">\n                <h3 className=\"text-lg font-bold mb-3 text-[#FFD700]\">Como Desativar Cookies:</h3>\n                <ul className=\"text-gray-300 space-y-2 ml-4\">\n                  <li>• Chrome: Definições → Privacidade e segurança → Cookies</li>\n                  <li>• Firefox: Opções → Privacidade e Segurança → Cookies</li>\n                  <li>• Safari: Preferências → Privacidade → Cookies</li>\n                  <li>• Edge: Definições → Cookies e permissões de site</li>\n                </ul>\n              </div>\n            </section>\n\n            <section className=\"mb-8\">\n              <h2 className=\"text-2xl font-bold mb-4 text-[#FFD700]\">6. Consentimento</h2>\n              <p className=\"text-gray-300 leading-relaxed mb-4\">\n                Ao utilizar o nosso website, consente na utilização de cookies de acordo com \n                esta política. Se não concordar com a utilização de cookies, deve ajustar as \n                definições do seu navegador ou deixar de utilizar o website.\n              </p>\n            </section>\n\n            <section className=\"mb-8\">\n              <h2 className=\"text-2xl font-bold mb-4 text-[#FFD700]\">7. Contactos</h2>\n              <p className=\"text-gray-300 leading-relaxed mb-4\">\n                Se tiver questões sobre a nossa utilização de cookies:\n              </p>\n              <ul className=\"text-gray-300 space-y-2 ml-6\">\n                <li>• Email: info@domrealce.com</li>\n                <li>• Telefone: +351 930 682 725</li>\n              </ul>\n            </section>\n          </div>\n        </div>\n      </div>\n\n      <Footer />\n    </div>\n  );\n}","size_bytes":6586},"client/src/pages/politica-privacidade.tsx":{"content":"import Navigation from \"@/components/navigation\";\nimport Footer from \"@/components/footer\";\n\nexport default function PoliticaPrivacidade() {\n  return (\n    <div className=\"min-h-screen bg-[#0a0a0a] text-white\">\n      <Navigation />\n      \n      <div className=\"pt-32 pb-16 px-4\">\n        <div className=\"max-w-4xl mx-auto\">\n          <h1 className=\"text-4xl md:text-5xl font-bold mb-8 text-center\">\n            Política de Privacidade\n          </h1>\n          \n          <div className=\"prose prose-invert prose-lg max-w-none\">\n            <p className=\"text-gray-300 mb-8 text-center\">\n              Última atualização: Agosto de 2025\n            </p>\n\n            <section className=\"mb-8\">\n              <h2 className=\"text-2xl font-bold mb-4 text-[#FFD700]\">1. Informações Gerais</h2>\n              <p className=\"text-gray-300 leading-relaxed mb-4\">\n                A DOMREALCE, com sede em Portugal, compromete-se a proteger e respeitar a sua privacidade. \n                Esta política explica como recolhemos, utilizamos e protegemos as suas informações pessoais \n                quando visita o nosso website ou utiliza os nossos serviços.\n              </p>\n            </section>\n\n            <section className=\"mb-8\">\n              <h2 className=\"text-2xl font-bold mb-4 text-[#FFD700]\">2. Dados Recolhidos</h2>\n              <p className=\"text-gray-300 leading-relaxed mb-4\">\n                Podemos recolher e processar os seguintes dados pessoais:\n              </p>\n              <ul className=\"text-gray-300 space-y-2 ml-6\">\n                <li>• Nome completo e informações de contacto (email, telefone, morada)</li>\n                <li>• Informações sobre os serviços solicitados</li>\n                <li>• Dados de navegação no website (cookies, endereço IP, páginas visitadas)</li>\n                <li>• Comunicações entre si e a DOMREALCE</li>\n                <li>• Informações fornecidas em formulários de contacto ou orçamento</li>\n              </ul>\n            </section>\n\n            <section className=\"mb-8\">\n              <h2 className=\"text-2xl font-bold mb-4 text-[#FFD700]\">3. Finalidade do Tratamento</h2>\n              <p className=\"text-gray-300 leading-relaxed mb-4\">\n                Os seus dados pessoais são utilizados para:\n              </p>\n              <ul className=\"text-gray-300 space-y-2 ml-6\">\n                <li>• Responder aos seus pedidos de informação e orçamentos</li>\n                <li>• Prestar os nossos serviços de comunicação visual</li>\n                <li>• Melhorar a experiência do utilizador no website</li>\n                <li>• Cumprir obrigações legais e contratuais</li>\n                <li>• Marketing direto (apenas com o seu consentimento)</li>\n              </ul>\n            </section>\n\n            <section className=\"mb-8\">\n              <h2 className=\"text-2xl font-bold mb-4 text-[#FFD700]\">4. Partilha de Dados</h2>\n              <p className=\"text-gray-300 leading-relaxed mb-4\">\n                A DOMREALCE não vende, aluga ou partilha os seus dados pessoais com terceiros, \n                exceto nos seguintes casos:\n              </p>\n              <ul className=\"text-gray-300 space-y-2 ml-6\">\n                <li>• Com o seu consentimento explícito</li>\n                <li>• Para cumprimento de obrigações legais</li>\n                <li>• Com prestadores de serviços que nos auxiliam (sempre sob contrato de confidencialidade)</li>\n              </ul>\n            </section>\n\n            <section className=\"mb-8\">\n              <h2 className=\"text-2xl font-bold mb-4 text-[#FFD700]\">5. Os Seus Direitos</h2>\n              <p className=\"text-gray-300 leading-relaxed mb-4\">\n                Ao abrigo do RGPD, tem o direito de:\n              </p>\n              <ul className=\"text-gray-300 space-y-2 ml-6\">\n                <li>• Aceder aos seus dados pessoais</li>\n                <li>• Retificar dados incorretos ou incompletos</li>\n                <li>• Apagar os seus dados (direito ao esquecimento)</li>\n                <li>• Limitar o tratamento dos seus dados</li>\n                <li>• Portabilidade dos dados</li>\n                <li>• Opor-se ao tratamento dos seus dados</li>\n              </ul>\n            </section>\n\n            <section className=\"mb-8\">\n              <h2 className=\"text-2xl font-bold mb-4 text-[#FFD700]\">6. Segurança dos Dados</h2>\n              <p className=\"text-gray-300 leading-relaxed mb-4\">\n                Implementamos medidas técnicas e organizacionais adequadas para proteger \n                os seus dados pessoais contra acesso não autorizado, alteração, divulgação \n                ou destruição.\n              </p>\n            </section>\n\n            <section className=\"mb-8\">\n              <h2 className=\"text-2xl font-bold mb-4 text-[#FFD700]\">7. Contactos</h2>\n              <p className=\"text-gray-300 leading-relaxed mb-4\">\n                Para exercer os seus direitos ou esclarecer dúvidas sobre esta política, \n                contacte-nos através de:\n              </p>\n              <ul className=\"text-gray-300 space-y-2 ml-6\">\n                <li>• Email: info@domrealce.com</li>\n                <li>• Telefone: +351 930 682 725</li>\n                <li>• Morada: [Inserir morada da DOMREALCE]</li>\n              </ul>\n            </section>\n          </div>\n        </div>\n      </div>\n\n      <Footer />\n    </div>\n  );\n}","size_bytes":5471},"client/src/pages/portfolio.tsx":{"content":"import Navigation from \"@/components/navigation\";\nimport Footer from \"@/components/footer\";\nimport { DynamicGallery } from \"@/components/dynamic-gallery\";\nimport { Button } from \"@/components/ui/button\";\nimport { MessageCircle } from \"lucide-react\";\nimport { Link } from \"wouter\";\n\nexport default function Portfolio() {\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Navigation />\n      \n      {/* Header Completo */}\n      <section className=\"bg-gradient-to-br from-brand-yellow/10 via-brand-turquoise/5 to-brand-coral/10 py-20 mt-16\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"max-w-4xl mx-auto text-center\">\n            <h1 className=\"text-4xl md:text-6xl font-bold mb-4\">\n              Nosso <span className=\"text-brand-yellow\">Portfolio</span>\n            </h1>\n            <p className=\"text-xl text-muted-foreground mb-6 leading-relaxed\">\n              Conheça os nossos trabalhos mais marcantes em comunicação visual. \n              Cada projeto reflete o nosso compromisso com a qualidade e criatividade.\n            </p>\n          </div>\n        </div>\n      </section>\n\n      {/* Galeria Dinâmica */}\n      <section className=\"pt-0 pb-8\">\n        <div className=\"container mx-auto px-4\">\n          <DynamicGallery showCategories={true} />\n        </div>\n      </section>\n\n      {/* Contacto Rápido */}\n      <section className=\"bg-gradient-to-r from-brand-turquoise/10 to-brand-yellow/10 py-8\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"max-w-2xl mx-auto text-center\">\n            <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n              <Link href=\"/contactos\">\n                <Button size=\"lg\" className=\"bg-brand-yellow text-black hover:bg-yellow-400\">\n                  <MessageCircle className=\"w-5 h-5 mr-2\" />\n                  Contactar\n                </Button>\n              </Link>\n              <Link href=\"/servicos\">\n                <Button size=\"lg\" variant=\"outline\">\n                  Serviços\n                </Button>\n              </Link>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      <Footer />\n    </div>\n  );\n}","size_bytes":2188},"client/src/pages/servico-autocolantes.tsx":{"content":"import Navigation from \"@/components/navigation\";\nimport Footer from \"@/components/footer\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Link } from \"wouter\";\nimport { \n  Sticker, \n  CheckCircle, \n  Star, \n  ArrowRight, \n  Scissors,\n  Shield,\n  Palette,\n  Settings,\n  Zap,\n  Award\n} from \"lucide-react\";\n\nexport default function ServicoAutocolantes() {\n  const features = [\n    {\n      icon: <Scissors className=\"w-6 h-6\" />,\n      title: \"Corte de Contorno Preciso\",\n      description: \"Tecnologia de corte digital que segue perfeitamente as formas do seu design\"\n    },\n    {\n      icon: <Shield className=\"w-6 h-6\" />,\n      title: \"Materiais Duradouros\",\n      description: \"Vinil de alta qualidade resistente a água, UV e intempéries\"\n    },\n    {\n      icon: <Palette className=\"w-6 h-6\" />,\n      title: \"Design Personalizado\",\n      description: \"Criação de designs únicos ou adaptação dos seus logótipos e imagens\"\n    },\n    {\n      icon: <Settings className=\"w-6 h-6\" />,\n      title: \"Aplicação Fácil\",\n      description: \"Autocolantes preparados para aplicação simples e sem bolhas\"\n    },\n    {\n      icon: <Zap className=\"w-6 h-6\" />,\n      title: \"Produção Rápida\",\n      description: \"Prazos de entrega reduzidos para projetos urgentes\"\n    },\n    {\n      icon: <Award className=\"w-6 h-6\" />,\n      title: \"Acabamento Profissional\",\n      description: \"Cortes limpos e precisos com acabamento de qualidade comercial\"\n    }\n  ];\n\n  const materials = [\n    {\n      name: \"Vinil Autocolante Brilhante\",\n      description: \"Acabamento brilhante para máximo impacto visual\",\n      durability: \"5-7 anos exterior\",\n      applications: [\"Montras\", \"Viaturas\", \"Sinalização\"]\n    },\n    {\n      name: \"Vinil Autocolante Mate\", \n      description: \"Acabamento mate elegante e discreto\",\n      durability: \"5-7 anos exterior\",\n      applications: [\"Decoração\", \"Etiquetas premium\", \"Equipamentos\"]\n    },\n    {\n      name: \"Vinil Removível\",\n      description: \"Para aplicações temporárias sem deixar resíduos\",\n      durability: \"1-2 anos\",\n      applications: [\"Eventos\", \"Promoções\", \"Decoração temporária\"]\n    },\n    {\n      name: \"Vinil Transparente\",\n      description: \"Para aplicação sobre superfícies coloridas\",\n      durability: \"3-5 anos\",\n      applications: [\"Vidros\", \"Acrílicos\", \"Superfícies transparentes\"]\n    }\n  ];\n\n  const applications = [\n    {\n      category: \"Identificação Comercial\",\n      items: [\"Logótipos de empresa\", \"Horários de funcionamento\", \"Informações de contacto\", \"QR codes\"]\n    },\n    {\n      category: \"Sinalização\",\n      items: [\"Placas direcionais\", \"Numeração\", \"Avisos de segurança\", \"Símbolos informativos\"]\n    },\n    {\n      category: \"Decoração\",\n      items: [\"Elementos decorativos\", \"Frases motivacionais\", \"Padrões geométricos\", \"Ilustrações\"]\n    },\n    {\n      category: \"Produtos e Embalagens\",\n      items: [\"Etiquetas de produto\", \"Códigos de barras\", \"Selos de qualidade\", \"Informações técnicas\"]\n    }\n  ];\n\n  const process = [\n    {\n      step: \"01\",\n      title: \"Design e Preparação\",\n      description: \"Criamos ou preparamos o seu design para corte de contorno\"\n    },\n    {\n      step: \"02\", \n      title: \"Seleção do Material\",\n      description: \"Escolhemos o vinil ideal para a aplicação pretendida\"\n    },\n    {\n      step: \"03\",\n      title: \"Impressão Digital\", \n      description: \"Impressão em alta resolução com cores vibrantes e duradouras\"\n    },\n    {\n      step: \"04\",\n      title: \"Corte de Contorno\",\n      description: \"Corte de precisão seguindo perfeitamente as formas do design\"\n    },\n    {\n      step: \"05\",\n      title: \"Acabamento e Entrega\",\n      description: \"Aplicação de transfer e preparação para aplicação final\"\n    }\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-black text-white\">\n      <Navigation />\n      \n      {/* Hero Section */}\n      <section className=\"pt-32 pb-16 bg-gradient-to-br from-black via-green-900/20 to-black\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"max-w-4xl mx-auto text-center\">\n            <Badge className=\"bg-green-600 text-white mb-6\">\n              <Sticker className=\"w-4 h-4 mr-2\" />\n              Autocolantes Profissionais\n            </Badge>\n            \n            <h1 className=\"text-5xl md:text-6xl font-heading font-bold mb-6\">\n              <span className=\"text-green-400\">Autocolantes e Etiquetas</span>\n              <br />\n              <span className=\"text-white\">com Corte de Contorno</span>\n            </h1>\n            \n            <p className=\"text-xl text-gray-300 mb-8 leading-relaxed max-w-3xl mx-auto\">\n              Tecnologia de corte digital de precisão para criar autocolantes únicos. \n              Desde etiquetas simples até designs complexos com formas personalizadas.\n            </p>\n            \n            <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n              <Button asChild className=\"bg-gradient-to-r from-green-600 to-brand-turquoise text-white font-bold px-8 py-6 text-lg\">\n                <Link href=\"/contactos#formulario\">Criar Autocolantes</Link>\n              </Button>\n              <Button variant=\"outline\" className=\"border-brand-yellow text-brand-yellow hover:bg-brand-yellow hover:text-black px-8 py-6 text-lg\">\n                Ver Materiais\n              </Button>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Features Grid */}\n      <section className=\"pt-0 pb-8 bg-gray-900/50\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-3xl md:text-4xl font-heading font-bold mb-4\">\n              <span className=\"text-green-400\">Tecnologia</span> <span className=\"text-white\">de Precisão</span>\n            </h2>\n            <p className=\"text-gray-400 text-lg max-w-2xl mx-auto\">\n              Equipamentos de corte digital que garantem precisão milimétrica em cada autocolante\n            </p>\n          </div>\n          \n          <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            {features.map((feature, index) => (\n              <Card key={index} className=\"bg-black/50 border-gray-800 hover:border-green-400 transition-all duration-300\">\n                <CardContent className=\"p-6\">\n                  <div className=\"text-green-400 mb-4\">\n                    {feature.icon}\n                  </div>\n                  <h3 className=\"text-xl font-semibold mb-3 text-white\">{feature.title}</h3>\n                  <p className=\"text-gray-400\">{feature.description}</p>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Materials Section */}\n      <section className=\"pt-0 pb-8 bg-black\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-3xl md:text-4xl font-heading font-bold mb-4\">\n              <span className=\"text-white\">Tipos de</span> <span className=\"text-brand-coral\">Material</span>\n            </h2>\n            <p className=\"text-gray-400 text-lg max-w-2xl mx-auto\">\n              Materiais de alta qualidade para diferentes aplicações e durabilidades\n            </p>\n          </div>\n          \n          <div className=\"grid md:grid-cols-2 gap-8\">\n            {materials.map((material, index) => (\n              <Card key={index} className=\"bg-gray-900/50 border-gray-800 hover:border-brand-coral transition-all duration-300\">\n                <CardContent className=\"p-6\">\n                  <h3 className=\"text-xl font-semibold mb-3 text-brand-coral\">{material.name}</h3>\n                  <p className=\"text-gray-400 mb-4\">{material.description}</p>\n                  <div className=\"mb-4\">\n                    <span className=\"text-sm text-gray-500\">Durabilidade:</span>\n                    <span className=\"text-green-400 font-semibold ml-2\">{material.durability}</span>\n                  </div>\n                  <div>\n                    <span className=\"text-sm text-gray-500 mb-2 block\">Aplicações:</span>\n                    <div className=\"flex flex-wrap gap-2\">\n                      {material.applications.map((app, appIndex) => (\n                        <Badge key={appIndex} variant=\"outline\" className=\"border-green-400 text-green-400\">\n                          {app}\n                        </Badge>\n                      ))}\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Applications Section */}\n      <section className=\"pt-0 pb-8 bg-gray-900/30\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-3xl md:text-4xl font-heading font-bold mb-4\">\n              <span className=\"text-white\">Aplicações</span> <span className=\"text-brand-yellow\">Comuns</span>\n            </h2>\n            <p className=\"text-gray-400 text-lg max-w-2xl mx-auto\">\n              Infinitas possibilidades de uso para autocolantes e etiquetas personalizadas\n            </p>\n          </div>\n          \n          <div className=\"grid md:grid-cols-2 lg:grid-cols-4 gap-8\">\n            {applications.map((application, index) => (\n              <Card key={index} className=\"bg-black/50 border-gray-800 hover:border-brand-yellow transition-all duration-300\">\n                <CardContent className=\"p-6\">\n                  <h3 className=\"text-lg font-semibold mb-4 text-brand-yellow\">{application.category}</h3>\n                  <div className=\"space-y-2\">\n                    {application.items.map((item, itemIndex) => (\n                      <div key={itemIndex} className=\"flex items-center gap-2\">\n                        <div className=\"w-1.5 h-1.5 bg-green-400 rounded-full flex-shrink-0\"></div>\n                        <span className=\"text-sm text-gray-300\">{item}</span>\n                      </div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Process Section */}\n      <section className=\"py-16 bg-black\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-3xl md:text-4xl font-heading font-bold mb-4\">\n              <span className=\"text-white\">Processo de</span> <span className=\"text-green-400\">Produção</span>\n            </h2>\n            <p className=\"text-gray-400 text-lg max-w-2xl mx-auto\">\n              Metodologia que garante qualidade e precisão em cada autocolante produzido\n            </p>\n          </div>\n          \n          <div className=\"max-w-4xl mx-auto\">\n            {process.map((step, index) => (\n              <div key={index} className=\"flex gap-6 mb-8 last:mb-0\">\n                <div className=\"flex-shrink-0\">\n                  <div className=\"w-16 h-16 bg-gradient-to-br from-green-600 to-brand-turquoise rounded-full flex items-center justify-center text-white font-bold text-xl\">\n                    {step.step}\n                  </div>\n                </div>\n                <div className=\"flex-1 pb-8\">\n                  <h3 className=\"text-xl font-semibold mb-2 text-white\">{step.title}</h3>\n                  <p className=\"text-gray-400\">{step.description}</p>\n                  {index < process.length - 1 && (\n                    <div className=\"w-px h-8 bg-gray-700 ml-8 mt-4\"></div>\n                  )}\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Specs Section */}\n      <section className=\"py-16 bg-gray-900/50\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"max-w-4xl mx-auto\">\n            <div className=\"grid md:grid-cols-2 gap-12 items-center\">\n              <div>\n                <h2 className=\"text-3xl md:text-4xl font-heading font-bold mb-6\">\n                  <span className=\"text-green-400\">Especificações</span> <span className=\"text-white\">Técnicas</span>\n                </h2>\n                <p className=\"text-gray-400 mb-8 text-lg\">\n                  Equipamentos de corte de última geração que permitem criar autocolantes \n                  com detalhes impossíveis de conseguir manualmente.\n                </p>\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center gap-3\">\n                    <CheckCircle className=\"w-6 h-6 text-green-400 flex-shrink-0\" />\n                    <span className=\"text-white\">Corte de precisão até 0.1mm</span>\n                  </div>\n                  <div className=\"flex items-center gap-3\">\n                    <CheckCircle className=\"w-6 h-6 text-green-400 flex-shrink-0\" />\n                    <span className=\"text-white\">Largura máxima: 1.37m</span>\n                  </div>\n                  <div className=\"flex items-center gap-3\">\n                    <CheckCircle className=\"w-6 h-6 text-green-400 flex-shrink-0\" />\n                    <span className=\"text-white\">Formas complexas e detalhadas</span>\n                  </div>\n                  <div className=\"flex items-center gap-3\">\n                    <CheckCircle className=\"w-6 h-6 text-green-400 flex-shrink-0\" />\n                    <span className=\"text-white\">Vários materiais compatíveis</span>\n                  </div>\n                  <div className=\"flex items-center gap-3\">\n                    <CheckCircle className=\"w-6 h-6 text-green-400 flex-shrink-0\" />\n                    <span className=\"text-white\">Produção em série</span>\n                  </div>\n                </div>\n              </div>\n              \n              <div className=\"bg-black/50 rounded-2xl p-8 border border-gray-800\">\n                <div className=\"text-center mb-6\">\n                  <Star className=\"w-12 h-12 text-green-400 mx-auto mb-4\" />\n                  <h3 className=\"text-2xl font-semibold mb-2 text-white\">Qualidade Garantida</h3>\n                  <p className=\"text-gray-400\">\n                    Cada autocolante é inspecionado antes da entrega\n                  </p>\n                </div>\n                \n                <div className=\"space-y-4\">\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-gray-400\">Espessura do vinil</span>\n                    <span className=\"text-green-400 font-semibold\">80-100 microns</span>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-gray-400\">Resistência UV</span>\n                    <span className=\"text-green-400 font-semibold\">5-7 anos</span>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-gray-400\">Prazo médio</span>\n                    <span className=\"text-green-400 font-semibold\">1-3 dias</span>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-gray-400\">Quantidade mínima</span>\n                    <span className=\"text-green-400 font-semibold\">1 unidade</span>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* CTA Section */}\n      <section className=\"pt-0 pb-8 bg-gradient-to-r from-green-600/10 via-brand-turquoise/10 to-brand-yellow/10\">\n        <div className=\"container mx-auto px-4 text-center\">\n          <h2 className=\"text-3xl md:text-4xl font-heading font-bold mb-6\">\n            <span className=\"text-white\">Pronto para Criar os Seus</span> <span className=\"text-green-400\">Autocolantes?</span>\n          </h2>\n          <p className=\"text-gray-300 text-lg mb-8 max-w-2xl mx-auto\">\n            Entre em contacto e descubra como os nossos autocolantes personalizados \n            podem dar uma nova dimensão ao seu projeto ou negócio.\n          </p>\n          \n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n            <Button asChild className=\"bg-gradient-to-r from-green-600 to-brand-turquoise text-white font-bold px-8 py-6 text-lg\">\n              <Link href=\"/contactos#formulario\">\n                Solicitar Orçamento\n                <ArrowRight className=\"w-5 h-5 ml-2\" />\n              </Link>\n            </Button>\n            <Button asChild variant=\"outline\" className=\"border-brand-yellow text-brand-yellow hover:bg-brand-yellow hover:text-black px-8 py-6 text-lg\">\n              <a href=\"https://wa.me/351930682725?text=Olá!%20Interessado%20em%20autocolantes.\" target=\"_blank\" rel=\"noopener noreferrer\">\n                WhatsApp Direto\n              </a>\n            </Button>\n          </div>\n        </div>\n      </section>\n\n      <Footer />\n    </div>\n  );\n}","size_bytes":17140},"client/src/pages/servico-decoracao-viaturas.tsx":{"content":"import Navigation from \"@/components/navigation\";\nimport Footer from \"@/components/footer\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Link } from \"wouter\";\nimport { \n  Car, \n  CheckCircle, \n  Star, \n  ArrowRight, \n  Truck,\n  Bike,\n  Bus,\n  Settings,\n  Shield,\n  Palette\n} from \"lucide-react\";\n\nexport default function ServicoDecoracaoViaturas() {\n  const vehicleTypes = [\n    {\n      icon: <Car className=\"w-8 h-8\" />,\n      title: \"Viaturas Particulares\",\n      description: \"Personalização completa de carros pessoais\",\n      features: [\"Mudança de cor\", \"Protecção da pintura\", \"Designs personalizados\", \"Efeitos especiais\"]\n    },\n    {\n      icon: <Truck className=\"w-8 h-8\" />,\n      title: \"Veículos Comerciais\",\n      description: \"Publicidade móvel para o seu negócio\",\n      features: [\"Branding empresarial\", \"Informações de contacto\", \"Promoções\", \"Logótipos\"]\n    },\n    {\n      icon: <Car className=\"w-8 h-8\" />,\n      title: \"Viaturas de Competição\",\n      description: \"Decoração para desportos motorizados\",\n      features: [\"Patrocinadores\", \"Numeração\", \"Designs aerodinâmicos\", \"Materiais especiais\"]\n    },\n    {\n      icon: <Bus className=\"w-8 h-8\" />,\n      title: \"Camiões e Pesados\",\n      description: \"Decoração para veículos de grande porte\",\n      features: [\"Publicidade de grande impacto\", \"Identificação de frota\", \"Regulamentações\", \"Visibilidade\"]\n    },\n    {\n      icon: <Bike className=\"w-8 h-8\" />,\n      title: \"Motociclos\",\n      description: \"Personalização para motocicletas\",\n      features: [\"Designs únicos\", \"Protecção do tanque\", \"Detalhes cromados\", \"Efeitos especiais\"]\n    },\n    {\n      icon: <Settings className=\"w-8 h-8\" />,\n      title: \"Máquinas de Obras\",\n      description: \"Identificação e personalização de equipamentos\",\n      features: [\"Numeração\", \"Logótipos da empresa\", \"Informações de segurança\", \"Cores corporativas\"]\n    }\n  ];\n\n  const materials = [\n    {\n      name: \"Vinil Cast Premium\",\n      description: \"Material de conformação superior para curvas complexas\",\n      durability: \"7-10 anos\",\n      applications: [\"Wrapping completo\", \"Mudança de cor\", \"Protecção\"]\n    },\n    {\n      name: \"Vinil Promocional\", \n      description: \"Económico para aplicações de média duração\",\n      durability: \"3-5 anos\",\n      applications: [\"Publicidade\", \"Rotulação\", \"Detalhes\"]\n    },\n    {\n      name: \"PPF (Paint Protection Film)\",\n      description: \"Película transparente de protecção da pintura\",\n      durability: \"10+ anos\",\n      applications: [\"Protecção frontal\", \"Portas\", \"Espelhos\"]\n    },\n    {\n      name: \"Vinil de Texturas\",\n      description: \"Texturas realistas para decoração de viaturas\",\n      durability: \"5-7 anos\",\n      applications: [\"Detalhes interiores\", \"Spoilers\", \"Capôs\"]\n    }\n  ];\n\n  const services = [\n    {\n      title: \"Wrapping Completo\",\n      description: \"Mudança completa da cor ou aplicação de design em toda a viatura\",\n      benefits: [\"Protege a pintura original\", \"Reversível\", \"Infinitas opções de cor\", \"Valor de revenda mantido\"]\n    },\n    {\n      title: \"Wrapping Parcial\",\n      description: \"Decoração de áreas específicas da viatura\",\n      benefits: [\"Custo reduzido\", \"Impacto visual\", \"Fácil manutenção\", \"Flexibilidade de design\"]\n    },\n    {\n      title: \"Rotulação Publicitária\",\n      description: \"Aplicação de logótipos e informações comerciais\",\n      benefits: [\"Publicidade móvel\", \"Profissionalismo\", \"Alcance geográfico\", \"Custo-benefício\"]\n    },\n    {\n      title: \"Película de Proteção\",\n      description: \"Aplicação de película protetora transparente\",\n      benefits: [\"Protege de riscos\", \"Invisível\", \"Auto-regeneração\", \"Longa duração\"]\n    }\n  ];\n\n  const process = [\n    {\n      step: \"01\",\n      title: \"Consulta e Medição\",\n      description: \"Avaliação da viatura e definição do projeto personalizado\"\n    },\n    {\n      step: \"02\", \n      title: \"Design e Aprovação\",\n      description: \"Criação do design e visualização 3D do resultado final\"\n    },\n    {\n      step: \"03\",\n      title: \"Preparação da Viatura\", \n      description: \"Limpeza profunda e preparação das superfícies\"\n    },\n    {\n      step: \"04\",\n      title: \"Aplicação Especializada\",\n      description: \"Instalação por técnicos certificados com ferramentas profissionais\"\n    },\n    {\n      step: \"05\",\n      title: \"Controlo de Qualidade\",\n      description: \"Inspeção final e orientações de manutenção\"\n    }\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-black text-white\">\n      <Navigation />\n      \n      {/* Hero Section */}\n      <section className=\"pt-32 pb-16 bg-gradient-to-br from-black via-orange-900/20 to-black\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"max-w-4xl mx-auto text-center\">\n            <Badge className=\"bg-orange-600 text-white mb-6\">\n              <Car className=\"w-4 h-4 mr-2\" />\n              Decoração de Viaturas\n            </Badge>\n            \n            <h1 className=\"text-5xl md:text-6xl font-heading font-bold mb-6\">\n              <span className=\"text-orange-400\">Transforme a Sua Viatura</span>\n              <br />\n              <span className=\"text-white\">numa Obra de Arte</span>\n            </h1>\n            \n            <p className=\"text-xl text-gray-300 mb-8 leading-relaxed max-w-3xl mx-auto\">\n              Especialistas em car wrapping e decoração de viaturas. Desde mudanças de cor completas \n              até publicidade móvel para o seu negócio. Qualidade profissional garantida.\n            </p>\n            \n            <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n              <Button asChild className=\"bg-gradient-to-r from-orange-600 to-brand-coral text-white font-bold px-8 py-6 text-lg\">\n                <Link href=\"/contactos#formulario\">Transformar Minha Viatura</Link>\n              </Button>\n              <Button variant=\"outline\" className=\"border-brand-yellow text-brand-yellow hover:bg-brand-yellow hover:text-black px-8 py-6 text-lg\">\n                Ver Portfolio\n              </Button>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Vehicle Types Grid */}\n      <section className=\"pt-0 pb-8 bg-gray-900/50\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-3xl md:text-4xl font-heading font-bold mb-4\">\n              <span className=\"text-orange-400\">Tipos de</span> <span className=\"text-white\">Veículos</span>\n            </h2>\n            <p className=\"text-gray-400 text-lg max-w-2xl mx-auto\">\n              Especializados em todos os tipos de veículos, desde carros particulares até frotas comerciais\n            </p>\n          </div>\n          \n          <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            {vehicleTypes.map((vehicle, index) => (\n              <Card key={index} className=\"bg-black/50 border-gray-800 hover:border-orange-400 transition-all duration-300\">\n                <CardContent className=\"p-6\">\n                  <div className=\"text-orange-400 mb-4\">\n                    {vehicle.icon}\n                  </div>\n                  <h3 className=\"text-xl font-semibold mb-3 text-white\">{vehicle.title}</h3>\n                  <p className=\"text-gray-400 mb-4\">{vehicle.description}</p>\n                  <div className=\"space-y-2\">\n                    {vehicle.features.map((feature, featureIndex) => (\n                      <div key={featureIndex} className=\"flex items-center gap-2\">\n                        <div className=\"w-1.5 h-1.5 bg-orange-400 rounded-full flex-shrink-0\"></div>\n                        <span className=\"text-sm text-gray-300\">{feature}</span>\n                      </div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Services Section */}\n      <section className=\"pt-0 pb-8 bg-black\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-3xl md:text-4xl font-heading font-bold mb-4\">\n              <span className=\"text-white\">Nossos</span> <span className=\"text-brand-coral\">Serviços</span>\n            </h2>\n            <p className=\"text-gray-400 text-lg max-w-2xl mx-auto\">\n              Soluções completas para transformar e proteger a sua viatura\n            </p>\n          </div>\n          \n          <div className=\"grid md:grid-cols-2 gap-8\">\n            {services.map((service, index) => (\n              <Card key={index} className=\"bg-gray-900/50 border-gray-800 hover:border-brand-coral transition-all duration-300\">\n                <CardContent className=\"p-6\">\n                  <h3 className=\"text-xl font-semibold mb-3 text-brand-coral\">{service.title}</h3>\n                  <p className=\"text-gray-400 mb-4\">{service.description}</p>\n                  <div>\n                    <span className=\"text-sm text-gray-500 mb-2 block\">Benefícios:</span>\n                    <div className=\"space-y-2\">\n                      {service.benefits.map((benefit, benefitIndex) => (\n                        <div key={benefitIndex} className=\"flex items-center gap-2\">\n                          <CheckCircle className=\"w-4 h-4 text-brand-coral flex-shrink-0\" />\n                          <span className=\"text-sm text-gray-300\">{benefit}</span>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Materials Section */}\n      <section className=\"pt-0 pb-8 bg-gray-900/30\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-3xl md:text-4xl font-heading font-bold mb-4\">\n              <span className=\"text-white\">Materiais</span> <span className=\"text-brand-yellow\">Premium</span>\n            </h2>\n            <p className=\"text-gray-400 text-lg max-w-2xl mx-auto\">\n              Utilizamos apenas materiais de marcas reconhecidas mundialmente\n            </p>\n          </div>\n          \n          <div className=\"grid md:grid-cols-2 gap-8\">\n            {materials.map((material, index) => (\n              <Card key={index} className=\"bg-black/50 border-gray-800 hover:border-brand-yellow transition-all duration-300\">\n                <CardContent className=\"p-6\">\n                  <h3 className=\"text-xl font-semibold mb-3 text-brand-yellow\">{material.name}</h3>\n                  <p className=\"text-gray-400 mb-4\">{material.description}</p>\n                  <div className=\"mb-4\">\n                    <span className=\"text-sm text-gray-500\">Durabilidade:</span>\n                    <span className=\"text-orange-400 font-semibold ml-2\">{material.durability}</span>\n                  </div>\n                  <div>\n                    <span className=\"text-sm text-gray-500 mb-2 block\">Aplicações:</span>\n                    <div className=\"flex flex-wrap gap-2\">\n                      {material.applications.map((app, appIndex) => (\n                        <Badge key={appIndex} variant=\"outline\" className=\"border-orange-400 text-orange-400\">\n                          {app}\n                        </Badge>\n                      ))}\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Process Section */}\n      <section className=\"py-16 bg-black\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-3xl md:text-4xl font-heading font-bold mb-4\">\n              <span className=\"text-white\">Processo</span> <span className=\"text-orange-400\">Profissional</span>\n            </h2>\n            <p className=\"text-gray-400 text-lg max-w-2xl mx-auto\">\n              Metodologia comprovada que garante resultados excecionais e duradouros\n            </p>\n          </div>\n          \n          <div className=\"max-w-4xl mx-auto\">\n            {process.map((step, index) => (\n              <div key={index} className=\"flex gap-6 mb-8 last:mb-0\">\n                <div className=\"flex-shrink-0\">\n                  <div className=\"w-16 h-16 bg-gradient-to-br from-orange-600 to-brand-coral rounded-full flex items-center justify-center text-white font-bold text-xl\">\n                    {step.step}\n                  </div>\n                </div>\n                <div className=\"flex-1 pb-8\">\n                  <h3 className=\"text-xl font-semibold mb-2 text-white\">{step.title}</h3>\n                  <p className=\"text-gray-400\">{step.description}</p>\n                  {index < process.length - 1 && (\n                    <div className=\"w-px h-8 bg-gray-700 ml-8 mt-4\"></div>\n                  )}\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Warranty Section */}\n      <section className=\"py-16 bg-gray-900/50\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"max-w-4xl mx-auto\">\n            <div className=\"grid md:grid-cols-2 gap-12 items-center\">\n              <div>\n                <h2 className=\"text-3xl md:text-4xl font-heading font-bold mb-6\">\n                  <span className=\"text-orange-400\">Garantia e</span> <span className=\"text-white\">Qualidade</span>\n                </h2>\n                <p className=\"text-gray-400 mb-8 text-lg\">\n                  Todos os nossos trabalhos incluem garantia contra defeitos de aplicação \n                  e utilizamos apenas materiais certificados pelos fabricantes.\n                </p>\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center gap-3\">\n                    <Shield className=\"w-6 h-6 text-orange-400 flex-shrink-0\" />\n                    <span className=\"text-white\">Garantia de aplicação: 2 anos</span>\n                  </div>\n                  <div className=\"flex items-center gap-3\">\n                    <Shield className=\"w-6 h-6 text-orange-400 flex-shrink-0\" />\n                    <span className=\"text-white\">Materiais certificados Hexis, Oracal e Mactac</span>\n                  </div>\n                  <div className=\"flex items-center gap-3\">\n                    <Shield className=\"w-6 h-6 text-orange-400 flex-shrink-0\" />\n                    <span className=\"text-white\">Técnicos certificados</span>\n                  </div>\n                  <div className=\"flex items-center gap-3\">\n                    <Shield className=\"w-6 h-6 text-orange-400 flex-shrink-0\" />\n                    <span className=\"text-white\">Seguro de responsabilidade civil</span>\n                  </div>\n                  <div className=\"flex items-center gap-3\">\n                    <Shield className=\"w-6 h-6 text-orange-400 flex-shrink-0\" />\n                    <span className=\"text-white\">Suporte pós-venda</span>\n                  </div>\n                </div>\n              </div>\n              \n              <div className=\"bg-black/50 rounded-2xl p-8 border border-gray-800\">\n                <div className=\"text-center mb-6\">\n                  <Star className=\"w-12 h-12 text-orange-400 mx-auto mb-4\" />\n                  <h3 className=\"text-2xl font-semibold mb-2 text-white\">Excelência Comprovada</h3>\n                  <p className=\"text-gray-400\">\n                    40 anos de experiência em decoração de viaturas\n                  </p>\n                </div>\n                \n                <div className=\"space-y-4\">\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-gray-400\">Viaturas decoradas</span>\n                    <span className=\"text-orange-400 font-semibold\">1000+</span>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-gray-400\">Prazo médio</span>\n                    <span className=\"text-orange-400 font-semibold\">2-5 dias</span>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-gray-400\">Satisfação</span>\n                    <span className=\"text-orange-400 font-semibold\">99%</span>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-gray-400\">Garantia</span>\n                    <span className=\"text-orange-400 font-semibold\">2 anos</span>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* CTA Section */}\n      <section className=\"pt-0 pb-8 bg-gradient-to-r from-orange-600/10 via-brand-coral/10 to-brand-yellow/10\">\n        <div className=\"container mx-auto px-4 text-center\">\n          <h2 className=\"text-3xl md:text-4xl font-heading font-bold mb-6\">\n            <span className=\"text-white\">Pronto para Transformar a Sua</span> <span className=\"text-orange-400\">Viatura?</span>\n          </h2>\n          <p className=\"text-gray-300 text-lg mb-8 max-w-2xl mx-auto\">\n            Entre em contacto connosco e descubra como podemos dar uma nova vida \n            à sua viatura com qualidade e profissionalismo únicos.\n          </p>\n          \n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n            <Button asChild className=\"bg-gradient-to-r from-orange-600 to-brand-coral text-white font-bold px-8 py-6 text-lg\">\n              <Link href=\"/contactos#formulario\">\n                Solicitar Orçamento\n                <ArrowRight className=\"w-5 h-5 ml-2\" />\n              </Link>\n            </Button>\n            <Button asChild variant=\"outline\" className=\"border-brand-yellow text-brand-yellow hover:bg-brand-yellow hover:text-black px-8 py-6 text-lg\">\n              <a href=\"https://wa.me/351930682725?text=Olá!%20Interessado%20em%20decoração%20de%20viaturas.\" target=\"_blank\" rel=\"noopener noreferrer\">\n                WhatsApp Direto\n              </a>\n            </Button>\n          </div>\n        </div>\n      </section>\n\n      <Footer />\n    </div>\n  );\n}","size_bytes":18559},"client/src/pages/servico-design-grafico.tsx":{"content":"import Navigation from \"@/components/navigation\";\nimport Footer from \"@/components/footer\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Link } from \"wouter\";\nimport { \n  Palette, \n  CheckCircle, \n  Star, \n  ArrowRight, \n  Zap, \n  Target, \n  Layers,\n  MousePointer,\n  Eye,\n  Smartphone,\n  Monitor,\n  FileImage\n} from \"lucide-react\";\n\nexport default function ServicoDesignGrafico() {\n  const features = [\n    {\n      icon: <Palette className=\"w-6 h-6\" />,\n      title: \"Identidade Visual Completa\",\n      description: \"Criamos logótipos únicos e desenvolvemos toda a identidade visual da sua marca\"\n    },\n    {\n      icon: <Layers className=\"w-6 h-6\" />,\n      title: \"Design Vectorial\",\n      description: \"Desenhos escaláveis em qualquer tamanho sem perda de qualidade\"\n    },\n    {\n      icon: <Eye className=\"w-6 h-6\" />,\n      title: \"Maquetes\",\n      description: \"Visualização realista dos seus projetos antes da produção final\"\n    },\n    {\n      icon: <FileImage className=\"w-6 h-6\" />,\n      title: \"Material Publicitário\",\n      description: \"Criação de design de identidade visual e material promocional\"\n    },\n    {\n      icon: <Monitor className=\"w-6 h-6\" />,\n      title: \"Design Digital\",\n      description: \"Páginas web, e plataformas digitais\"\n    },\n    {\n      icon: <Target className=\"w-6 h-6\" />,\n      title: \"Estratégia Visual\",\n      description: \"Alinhamento do design com os objetivos do seu negócio\"\n    }\n  ];\n\n  const process = [\n    {\n      step: \"01\",\n      title: \"Briefing Detalhado\",\n      description: \"Reunião para entender os seus objetivos, público-alvo e preferências visuais\"\n    },\n    {\n      step: \"02\", \n      title: \"Pesquisa e Conceito\",\n      description: \"Análise da concorrência e desenvolvimento de conceitos criativos únicos\"\n    },\n    {\n      step: \"03\",\n      title: \"Criação e Desenvolvimento\", \n      description: \"Desenho dos elementos visuais e desenvolvimento da identidade\"\n    },\n    {\n      step: \"04\",\n      title: \"Apresentação e Revisões\",\n      description: \"Apresentação das propostas com possibilidade de ajustes e melhorias\"\n    },\n    {\n      step: \"05\",\n      title: \"Finalização e Entrega\",\n      description: \"Entrega dos ficheiros finais em todos os formatos necessários\"\n    }\n  ];\n\n  const benefits = [\n    \"Marca profissional e memorável\",\n    \"Diferenciação da concorrência\", \n    \"Maior credibilidade no mercado\",\n    \"Comunicação visual consistente\",\n    \"Ficheiros em múltiplos formatos\",\n    \"Suporte técnico contínuo\"\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-black text-white\">\n      <Navigation />\n      \n      {/* Hero Section */}\n      <section className=\"pt-32 pb-16 bg-gradient-to-br from-black via-gray-900 to-black\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"max-w-4xl mx-auto text-center\">\n            <Badge className=\"bg-brand-yellow text-black mb-6\">\n              <Palette className=\"w-4 h-4 mr-2\" />\n              Design Gráfico Profissional\n            </Badge>\n            \n            <h1 className=\"text-5xl md:text-6xl font-heading font-bold mb-6\">\n              <span className=\"text-brand-yellow\">Identidade Visual</span>\n              <br />\n              <span className=\"text-white\">que Marca Diferença</span>\n            </h1>\n            \n            <p className=\"text-xl text-gray-300 mb-8 leading-relaxed max-w-3xl mx-auto\">\n              Criamos designs únicos e memoráveis que comunicam a essência da sua marca. \n              Com 40 anos de experiência, transformamos ideias em identidades visuais poderosas.\n            </p>\n            \n            <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n              <Button asChild className=\"bg-gradient-to-r from-brand-yellow to-brand-coral text-black font-bold px-8 py-6 text-lg\">\n                <Link href=\"/contactos#formulario\">Iniciar Meu Projeto</Link>\n              </Button>\n              <Button variant=\"outline\" className=\"border-brand-turquoise text-brand-turquoise hover:bg-brand-turquoise hover:text-black px-8 py-6 text-lg\">\n                Ver Portfolio\n              </Button>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Features Grid */}\n      <section className=\"pt-0 pb-8 bg-gray-900/50\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-3xl md:text-4xl font-heading font-bold mb-4\">\n              <span className=\"text-brand-turquoise\">Serviços</span> <span className=\"text-white\">Incluídos</span>\n            </h2>\n            <p className=\"text-gray-400 text-lg max-w-2xl mx-auto\">\n              Oferecemos um serviço completo de design gráfico para todas as suas necessidades visuais\n            </p>\n          </div>\n          \n          <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            {features.map((feature, index) => (\n              <Card key={index} className=\"bg-black/50 border-gray-800 hover:border-brand-yellow transition-all duration-300\">\n                <CardContent className=\"p-6\">\n                  <div className=\"text-brand-yellow mb-4\">\n                    {feature.icon}\n                  </div>\n                  <h3 className=\"text-xl font-semibold mb-3 text-white\">{feature.title}</h3>\n                  <p className=\"text-gray-400\">{feature.description}</p>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Process Section */}\n      <section className=\"py-16 bg-black\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-3xl md:text-4xl font-heading font-bold mb-4\">\n              <span className=\"text-white\">Nosso</span> <span className=\"text-brand-coral\">Processo</span>\n            </h2>\n            <p className=\"text-gray-400 text-lg max-w-2xl mx-auto\">\n              Um método comprovado que garante resultados excepcionais em cada projeto\n            </p>\n          </div>\n          \n          <div className=\"max-w-4xl mx-auto\">\n            {process.map((step, index) => (\n              <div key={index} className=\"flex gap-6 mb-8 last:mb-0\">\n                <div className=\"flex-shrink-0\">\n                  <div className=\"w-16 h-16 bg-gradient-to-br from-brand-yellow to-brand-coral rounded-full flex items-center justify-center text-black font-bold text-xl\">\n                    {step.step}\n                  </div>\n                </div>\n                <div className=\"flex-1 pb-8\">\n                  <h3 className=\"text-xl font-semibold mb-2 text-white\">{step.title}</h3>\n                  <p className=\"text-gray-400\">{step.description}</p>\n                  {index < process.length - 1 && (\n                    <div className=\"w-px h-8 bg-gray-700 ml-8 mt-4\"></div>\n                  )}\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Benefits Section */}\n      <section className=\"py-16 bg-gray-900/30\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"max-w-4xl mx-auto\">\n            <div className=\"grid md:grid-cols-2 gap-12 items-center\">\n              <div>\n                <h2 className=\"text-3xl md:text-4xl font-heading font-bold mb-6\">\n                  <span className=\"text-brand-yellow\">Benefícios</span> <span className=\"text-white\">do Nosso Design</span>\n                </h2>\n                <p className=\"text-gray-400 mb-8 text-lg\">\n                  Investir em design profissional traz retornos mensuráveis para o seu negócio. \n                  Veja como podemos ajudar a sua marca a destacar-se.\n                </p>\n                <div className=\"space-y-4\">\n                  {benefits.map((benefit, index) => (\n                    <div key={index} className=\"flex items-center gap-3\">\n                      <CheckCircle className=\"w-6 h-6 text-brand-turquoise flex-shrink-0\" />\n                      <span className=\"text-white\">{benefit}</span>\n                    </div>\n                  ))}\n                </div>\n              </div>\n              \n              <div className=\"bg-black/50 rounded-2xl p-8 border border-gray-800\">\n                <div className=\"text-center mb-6\">\n                  <Star className=\"w-12 h-12 text-brand-yellow mx-auto mb-4\" />\n                  <h3 className=\"text-2xl font-semibold mb-2 text-white\">Garantia de Qualidade</h3>\n                  <p className=\"text-gray-400\">\n                    Com 40 anos no mercado, garantimos designs que superam expectativas\n                  </p>\n                </div>\n                \n                <div className=\"space-y-4\">\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-gray-400\">Revisões incluídas</span>\n                    <span className=\"text-brand-yellow font-semibold\">Até 3</span>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-gray-400\">Formatos entregues</span>\n                    <span className=\"text-brand-yellow font-semibold\">Todos os necessários</span>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-gray-400\">Suporte pós-entrega</span>\n                    <span className=\"text-brand-yellow font-semibold\">3 meses</span>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-gray-400\">Prazo médio</span>\n                    <span className=\"text-brand-yellow font-semibold\">5-10 dias</span>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* CTA Section */}\n      <section className=\"pt-0 pb-8 bg-gradient-to-r from-brand-yellow/10 via-brand-turquoise/10 to-brand-coral/10\">\n        <div className=\"container mx-auto px-4 text-center\">\n          <h2 className=\"text-3xl md:text-4xl font-heading font-bold mb-6\">\n            <span className=\"text-white\">Pronto para Criar a Sua</span> <span className=\"text-brand-yellow\">Identidade Visual?</span>\n          </h2>\n          <p className=\"text-gray-300 text-lg mb-8 max-w-2xl mx-auto\">\n            Entre em contacto connosco hoje e descubra como podemos transformar a sua marca \n            numa presença visual poderosa e memorável.\n          </p>\n          \n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n            <Button asChild className=\"bg-gradient-to-r from-brand-yellow to-brand-coral text-black font-bold px-8 py-6 text-lg\">\n              <Link href=\"/contactos#formulario\">\n                Solicitar Orçamento Gratuito\n                <ArrowRight className=\"w-5 h-5 ml-2\" />\n              </Link>\n            </Button>\n            <Button asChild variant=\"outline\" className=\"border-brand-turquoise text-brand-turquoise hover:bg-brand-turquoise hover:text-black px-8 py-6 text-lg\">\n              <a href=\"https://wa.me/351930682725?text=Olá!%20Interessado%20em%20design%20gráfico.\" target=\"_blank\" rel=\"noopener noreferrer\">\n                WhatsApp Direto\n              </a>\n            </Button>\n          </div>\n        </div>\n      </section>\n\n      <Footer />\n    </div>\n  );\n}","size_bytes":11591},"client/src/pages/servico-espacos-comerciais.tsx":{"content":"import Navigation from \"@/components/navigation\";\nimport Footer from \"@/components/footer\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Link } from \"wouter\";\nimport { \n  Building, \n  CheckCircle, \n  Star, \n  ArrowRight, \n  Store,\n  Lightbulb,\n  Flag,\n  Info,\n  Eye,\n  Zap\n} from \"lucide-react\";\n\nexport default function ServicoEspacosComerciais() {\n  const services = [\n    {\n      icon: <Store className=\"w-8 h-8\" />,\n      title: \"Montras Atrativas\",\n      description: \"Vitrines que chamam a atenção e convertem visitantes em clientes\",\n      features: [\"Displays promocionais\", \"Sinalização de ofertas\", \"Branding visual\", \"Iluminação LED\"]\n    },\n    {\n      icon: <Info className=\"w-8 h-8\" />,\n      title: \"Painéis Informativos\",\n      description: \"Comunicação clara e profissional para os seus clientes\",\n      features: [\"Horários\", \"Serviços\", \"Preçários\", \"Direções\"]\n    },\n    {\n      icon: <Lightbulb className=\"w-8 h-8\" />,\n      title: \"Reclames Luminosos\",\n      description: \"Sinalização LED que destaca o seu negócio dia e noite\",\n      features: [\"LED eficiente\", \"Controlo remoto\", \"Programação\", \"Baixo consumo\"]\n    },\n    {\n      icon: <Flag className=\"w-8 h-8\" />,\n      title: \"Bandeiras e Totens\",\n      description: \"Sinalização vertical para máxima visibilidade\",\n      features: [\"Resistentes ao vento\", \"Bases estáveis\", \"Fácil montagem\", \"Designs personalizados\"]\n    },\n    {\n      icon: <Building className=\"w-8 h-8\" />,\n      title: \"Sinalização Interior\",\n      description: \"Orientação e informação dentro do estabelecimento\",\n      features: [\"Direcionais\", \"Setorização\", \"Segurança\", \"Acessibilidade\"]\n    },\n    {\n      icon: <Eye className=\"w-8 h-8\" />,\n      title: \"Fachadas Comerciais\",\n      description: \"Transformação completa da frente do estabelecimento\",\n      features: [\"Identidade visual\", \"Materiais duráveis\", \"Iluminação\", \"Impacto visual\"]\n    }\n  ];\n\n  const sectors = [\n    {\n      name: \"Restauração\",\n      description: \"Menus, promoções e sinalização gastronómica\",\n      solutions: [\"Menus exteriores\", \"Displays de pratos\", \"Sinalização de terraços\", \"Reclames luminosos\"]\n    },\n    {\n      name: \"Retalho\",\n      description: \"Montras e sinalização para lojas\",\n      solutions: [\"Vitrines promocionais\", \"Etiquetas de preços\", \"Sinalização de liquidações\", \"Branding\"]\n    },\n    {\n      name: \"Serviços\",\n      description: \"Sinalização profissional para empresas de serviços\",\n      solutions: [\"Placas de identificação\", \"Horários\", \"Informações de contacto\", \"Certificações\"]\n    },\n    {\n      name: \"Hotéis\",\n      description: \"Sinalização elegante para hospitalidade\",\n      solutions: [\"Receção\", \"Direcionais\", \"Numeração de quartos\", \"Áreas comuns\"]\n    },\n    {\n      name: \"Escritórios\",\n      description: \"Ambiente profissional e corporativo\",\n      solutions: [\"Logótipos corporativos\", \"Direcionais\", \"Salas de reuniões\", \"Recepções\"]\n    },\n    {\n      name: \"Clínicas\",\n      description: \"Sinalização para áreas de saúde\",\n      solutions: [\"Especialidades\", \"Horários\", \"Direcionais\", \"Informações médicas\"]\n    }\n  ];\n\n  const materials = [\n    {\n      name: \"ACM (Alumínio Composto)\",\n      description: \"Material premium para fachadas e painéis exteriores\",\n      benefits: [\"Resistente a intempéries\", \"Acabamento profissional\", \"Longo prazo\", \"Fácil manutenção\"]\n    },\n    {\n      name: \"Acrílico\",\n      description: \"Versatilidade e elegância para interiores\",\n      benefits: [\"Transparência cristalina\", \"Fácil limpeza\", \"Resistente a UV\", \"Múltiplas cores\"]\n    },\n    {\n      name: \"PVC Expandido\",\n      description: \"Solução económica e eficaz\",\n      benefits: [\"Leve e resistente\", \"Fácil instalação\", \"Boa relação qualidade-preço\", \"Versátil\"]\n    },\n    {\n      name: \"LED\",\n      description: \"Iluminação eficiente e moderna\",\n      benefits: [\"Baixo consumo\", \"Longa duração\", \"Múltiplas cores\", \"Programável\"]\n    }\n  ];\n\n  const process = [\n    {\n      step: \"01\",\n      title: \"Análise do Espaço\",\n      description: \"Visita ao local para avaliar necessidades e oportunidades\"\n    },\n    {\n      step: \"02\", \n      title: \"Proposta Personalizada\",\n      description: \"Desenvolvimento de soluções adequadas ao seu negócio\"\n    },\n    {\n      step: \"03\",\n      title: \"Design e Aprovação\", \n      description: \"Criação de mockups e visualizações 3D do projeto\"\n    },\n    {\n      step: \"04\",\n      title: \"Produção e Instalação\",\n      description: \"Fabrico dos elementos e montagem profissional\"\n    },\n    {\n      step: \"05\",\n      title: \"Manutenção e Suporte\",\n      description: \"Assistência técnica e manutenção preventiva\"\n    }\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-[#0a0a0a] text-white\">\n      <Navigation />\n      \n      {/* Hero Section */}\n      <section className=\"pt-32 pb-16 bg-gradient-to-br from-black via-blue-900/20 to-black\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"max-w-4xl mx-auto text-center\">\n            <Badge className=\"bg-blue-600 text-white mb-6\">\n              <Building className=\"w-4 h-4 mr-2\" />\n              Espaços Comerciais Premium\n            </Badge>\n            \n            <h1 className=\"text-5xl md:text-6xl font-heading font-bold mb-6\">\n              <span className=\"text-blue-400\">Transforme o Seu</span>\n              <br />\n              <span className=\"text-white\">Espaço Comercial</span>\n            </h1>\n            \n            <p className=\"text-xl text-gray-300 mb-8 leading-relaxed max-w-3xl mx-auto\">\n              Soluções completas de sinalização e decoração para espaços comerciais. \n              Desde montras atrativas até reclames luminosos que destacam o seu negócio.\n            </p>\n            \n            <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n              <Button asChild className=\"bg-gradient-to-r from-blue-600 to-brand-turquoise text-white font-bold px-8 py-6 text-lg\">\n                <Link href=\"/contactos#formulario\">Transformar Meu Espaço</Link>\n              </Button>\n              <Button variant=\"outline\" className=\"border-brand-yellow text-brand-yellow hover:bg-brand-yellow hover:text-black px-8 py-6 text-lg\">\n                Ver Projetos\n              </Button>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Services Grid */}\n      <section className=\"pt-0 pb-8 bg-gray-900/50\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-3xl md:text-4xl font-heading font-bold mb-4\">\n              <span className=\"text-blue-400\">Soluções</span> <span className=\"text-white\">Completas</span>\n            </h2>\n            <p className=\"text-gray-400 text-lg max-w-2xl mx-auto\">\n              Tudo o que precisa para criar um espaço comercial que impressiona e converte\n            </p>\n          </div>\n          \n          <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            {services.map((service, index) => (\n              <Card key={index} className=\"bg-[#0a0a0a] border-[#333] hover:border-blue-400 transition-all duration-300\">\n                <CardContent className=\"p-6\">\n                  <div className=\"text-blue-400 mb-4\">\n                    {service.icon}\n                  </div>\n                  <h3 className=\"text-xl font-semibold mb-3 text-white\">{service.title}</h3>\n                  <p className=\"text-gray-400 mb-4\">{service.description}</p>\n                  <div className=\"space-y-2\">\n                    {service.features.map((feature, featureIndex) => (\n                      <div key={featureIndex} className=\"flex items-center gap-2\">\n                        <div className=\"w-1.5 h-1.5 bg-blue-400 rounded-full flex-shrink-0\"></div>\n                        <span className=\"text-sm text-gray-300\">{feature}</span>\n                      </div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Sectors Section */}\n      <section className=\"pt-0 pb-8 bg-black\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-3xl md:text-4xl font-heading font-bold mb-4\">\n              <span className=\"text-white\">Setores</span> <span className=\"text-brand-coral\">Especializados</span>\n            </h2>\n            <p className=\"text-gray-400 text-lg max-w-2xl mx-auto\">\n              Experiência comprovada em diversos setores comerciais e empresariais\n            </p>\n          </div>\n          \n          <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            {sectors.map((sector, index) => (\n              <Card key={index} className=\"bg-gray-900/50 border-gray-800 hover:border-brand-coral transition-all duration-300\">\n                <CardContent className=\"p-6\">\n                  <h3 className=\"text-xl font-semibold mb-3 text-brand-coral\">{sector.name}</h3>\n                  <p className=\"text-gray-400 mb-4\">{sector.description}</p>\n                  <div>\n                    <span className=\"text-sm text-gray-500 mb-2 block\">Soluções típicas:</span>\n                    <div className=\"space-y-2\">\n                      {sector.solutions.map((solution, solutionIndex) => (\n                        <div key={solutionIndex} className=\"flex items-center gap-2\">\n                          <CheckCircle className=\"w-4 h-4 text-brand-coral flex-shrink-0\" />\n                          <span className=\"text-sm text-gray-300\">{solution}</span>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Materials Section */}\n      <section className=\"pt-0 pb-8 bg-gray-900/30\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-3xl md:text-4xl font-heading font-bold mb-4\">\n              <span className=\"text-white\">Materiais</span> <span className=\"text-brand-yellow\">Premium</span>\n            </h2>\n            <p className=\"text-gray-400 text-lg max-w-2xl mx-auto\">\n              Selecionamos materiais de qualidade superior para garantir durabilidade e impacto visual\n            </p>\n          </div>\n          \n          <div className=\"grid md:grid-cols-2 gap-8\">\n            {materials.map((material, index) => (\n              <Card key={index} className=\"bg-[#0a0a0a] border-[#333] hover:border-brand-yellow transition-all duration-300\">\n                <CardContent className=\"p-6\">\n                  <h3 className=\"text-xl font-semibold mb-3 text-brand-yellow\">{material.name}</h3>\n                  <p className=\"text-gray-400 mb-4\">{material.description}</p>\n                  <div>\n                    <span className=\"text-sm text-gray-500 mb-2 block\">Benefícios:</span>\n                    <div className=\"space-y-2\">\n                      {material.benefits.map((benefit, benefitIndex) => (\n                        <div key={benefitIndex} className=\"flex items-center gap-2\">\n                          <CheckCircle className=\"w-4 h-4 text-brand-yellow flex-shrink-0\" />\n                          <span className=\"text-sm text-gray-300\">{benefit}</span>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Process Section */}\n      <section className=\"py-16 bg-black\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-3xl md:text-4xl font-heading font-bold mb-4\">\n              <span className=\"text-white\">Nosso</span> <span className=\"text-blue-400\">Processo</span>\n            </h2>\n            <p className=\"text-gray-400 text-lg max-w-2xl mx-auto\">\n              Metodologia testada que garante resultados que superam expectativas\n            </p>\n          </div>\n          \n          <div className=\"max-w-4xl mx-auto\">\n            {process.map((step, index) => (\n              <div key={index} className=\"flex gap-6 mb-8 last:mb-0\">\n                <div className=\"flex-shrink-0\">\n                  <div className=\"w-16 h-16 bg-gradient-to-br from-blue-600 to-brand-turquoise rounded-full flex items-center justify-center text-white font-bold text-xl\">\n                    {step.step}\n                  </div>\n                </div>\n                <div className=\"flex-1 pb-8\">\n                  <h3 className=\"text-xl font-semibold mb-2 text-white\">{step.title}</h3>\n                  <p className=\"text-gray-400\">{step.description}</p>\n                  {index < process.length - 1 && (\n                    <div className=\"w-px h-8 bg-gray-700 ml-8 mt-4\"></div>\n                  )}\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Benefits Section */}\n      <section className=\"py-16 bg-gray-900/50\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"max-w-4xl mx-auto\">\n            <div className=\"grid md:grid-cols-2 gap-12 items-center\">\n              <div>\n                <h2 className=\"text-3xl md:text-4xl font-heading font-bold mb-6\">\n                  <span className=\"text-blue-400\">Impacto</span> <span className=\"text-white\">Comprovado</span>\n                </h2>\n                <p className=\"text-gray-400 mb-8 text-lg\">\n                  A sinalização profissional pode aumentar significativamente \n                  a visibilidade e as vendas do seu negócio.\n                </p>\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center gap-3\">\n                    <Zap className=\"w-6 h-6 text-blue-400 flex-shrink-0\" />\n                    <span className=\"text-white\">Aumento de visibilidade até 70%</span>\n                  </div>\n                  <div className=\"flex items-center gap-3\">\n                    <Zap className=\"w-6 h-6 text-blue-400 flex-shrink-0\" />\n                    <span className=\"text-white\">Melhoria da imagem profissional</span>\n                  </div>\n                  <div className=\"flex items-center gap-3\">\n                    <Zap className=\"w-6 h-6 text-blue-400 flex-shrink-0\" />\n                    <span className=\"text-white\">Orientação eficaz dos clientes</span>\n                  </div>\n                  <div className=\"flex items-center gap-3\">\n                    <Zap className=\"w-6 h-6 text-blue-400 flex-shrink-0\" />\n                    <span className=\"text-white\">Redução de custos publicitários</span>\n                  </div>\n                  <div className=\"flex items-center gap-3\">\n                    <Zap className=\"w-6 h-6 text-blue-400 flex-shrink-0\" />\n                    <span className=\"text-white\">ROI mensurável e duradouro</span>\n                  </div>\n                </div>\n              </div>\n              \n              <div className=\"bg-[#0a0a0a] rounded-2xl p-8 border border-[#333]\">\n                <div className=\"text-center mb-6\">\n                  <Star className=\"w-12 h-12 text-blue-400 mx-auto mb-4\" />\n                  <h3 className=\"text-2xl font-semibold mb-2 text-white\">Resultados Garantidos</h3>\n                  <p className=\"text-gray-400\">\n                    Projetos que transformam espaços em ferramentas de vendas\n                  </p>\n                </div>\n                \n                <div className=\"space-y-4\">\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-gray-400\">Projetos realizados</span>\n                    <span className=\"text-blue-400 font-semibold\">500+</span>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-gray-400\">Satisfação clientes</span>\n                    <span className=\"text-blue-400 font-semibold\">98%</span>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-gray-400\">Prazo médio</span>\n                    <span className=\"text-blue-400 font-semibold\">5-10 dias</span>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-gray-400\">Garantia</span>\n                    <span className=\"text-blue-400 font-semibold\">3 anos</span>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* CTA Section */}\n      <section className=\"pt-0 pb-8 bg-gradient-to-r from-blue-600/10 via-brand-turquoise/10 to-brand-coral/10\">\n        <div className=\"container mx-auto px-4 text-center\">\n          <h2 className=\"text-3xl md:text-4xl font-heading font-bold mb-6\">\n            <span className=\"text-white\">Pronto para Destacar o Seu</span> <span className=\"text-blue-400\">Negócio?</span>\n          </h2>\n          <p className=\"text-gray-300 text-lg mb-8 max-w-2xl mx-auto\">\n            Entre em contacto connosco e descubra como a sinalização profissional \n            pode transformar o seu espaço comercial numa poderosa ferramenta de vendas.\n          </p>\n          \n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n            <Button asChild className=\"bg-gradient-to-r from-blue-600 to-brand-turquoise text-white font-bold px-8 py-6 text-lg\">\n              <Link href=\"/contactos#formulario\">\n                Solicitar Visita Gratuita\n                <ArrowRight className=\"w-5 h-5 ml-2\" />\n              </Link>\n            </Button>\n            <Button asChild variant=\"outline\" className=\"border-brand-yellow text-brand-yellow hover:bg-brand-yellow hover:text-black px-8 py-6 text-lg\">\n              <a href=\"https://wa.me/351930682725?text=Olá!%20Interessado%20em%20sinalização%20comercial.\" target=\"_blank\" rel=\"noopener noreferrer\">\n                WhatsApp Direto\n              </a>\n            </Button>\n          </div>\n        </div>\n      </section>\n\n      <Footer />\n    </div>\n  );\n}","size_bytes":18621},"client/src/pages/servico-impressao-digital.tsx":{"content":"import Navigation from \"@/components/navigation\";\nimport Footer from \"@/components/footer\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Link } from \"wouter\";\nimport { \n  Printer, \n  CheckCircle, \n  Star, \n  ArrowRight, \n  Zap, \n  Shield,\n  Maximize,\n  Palette,\n  Clock,\n  Award\n} from \"lucide-react\";\n\nexport default function ServicoImpressaoDigital() {\n  const features = [\n    {\n      icon: <Maximize className=\"w-6 h-6\" />,\n      title: \"Tintas Látex Premium\",\n      description: \"Impressões com tintas látex de alta qualidade, sem odor e resistentes ao desbotamento\"\n    },\n    {\n      icon: <Shield className=\"w-6 h-6\" />,\n      title: \"Materiais Resistentes\",\n      description: \"Vinil, lona e materiais que resistem a intempéries e UV\"\n    },\n    {\n      icon: <Palette className=\"w-6 h-6\" />,\n      title: \"Cores Vibrantes\",\n      description: \"Tecnologia de impressão que garante cores vivas e duradouras\"\n    },\n    {\n      icon: <Zap className=\"w-6 h-6\" />,\n      title: \"Produção Rápida\",\n      description: \"Prazos de entrega reduzidos sem comprometer a qualidade\"\n    },\n    {\n      icon: <Award className=\"w-6 h-6\" />,\n      title: \"Acabamentos Premium\",\n      description: \"Laminação, corte de contorno e outros acabamentos profissionais\"\n    },\n    {\n      icon: <Clock className=\"w-6 h-6\" />,\n      title: \"Disponibilidade 24h\",\n      description: \"Produção contínua para cumprir prazos apertados\"\n    }\n  ];\n\n  const materials = [\n    {\n      name: \"Vinil Autocolante\",\n      description: \"Para aplicação em superfícies lisas e curvas\",\n      applications: [\"Montras\", \"Viaturas\", \"Sinalização\"]\n    },\n    {\n      name: \"Vinil Decorativo\", \n      description: \"Acabamento mate para decoração interior\",\n      applications: [\"Paredes\", \"Móveis\", \"Vidros\"]\n    },\n    {\n      name: \"Lona Publicitária\",\n      description: \"Resistente para exterior com ilhós incluídos\",\n      applications: [\"Fachadas\", \"Eventos\", \"Obras\"]\n    },\n    {\n      name: \"Lona Perfurada\",\n      description: \"Permite passagem de vento, ideal para vedações e fachadas\",\n      applications: [\"Andaimes\", \"Vedações\", \"Fachadas\"]\n    }\n  ];\n\n  const process = [\n    {\n      step: \"01\",\n      title: \"Análise do Ficheiro\",\n      description: \"Verificamos resolução, cores e preparamos o ficheiro para impressão\"\n    },\n    {\n      step: \"02\", \n      title: \"Seleção do Material\",\n      description: \"Escolhemos o material ideal para a aplicação pretendida\"\n    },\n    {\n      step: \"03\",\n      title: \"Impressão Digital\", \n      description: \"Impressão com tecnologia de ponta e controlo de qualidade rigoroso\"\n    },\n    {\n      step: \"04\",\n      title: \"Acabamentos\",\n      description: \"Laminação, corte e preparação final do produto\"\n    },\n    {\n      step: \"05\",\n      title: \"Entrega ou Aplicação\",\n      description: \"Entrega do produto ou aplicação no local pelo nosso técnico\"\n    }\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-black text-white\">\n      <Navigation />\n      \n      {/* Hero Section */}\n      <section className=\"pt-32 pb-16 bg-gradient-to-br from-black via-blue-900/20 to-black\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"max-w-4xl mx-auto text-center\">\n            <Badge className=\"bg-brand-turquoise text-black mb-6\">\n              <Printer className=\"w-4 h-4 mr-2\" />\n              Impressão Digital Profissional\n            </Badge>\n            \n            <h1 className=\"text-5xl md:text-6xl font-heading font-bold mb-6\">\n              <span className=\"text-brand-turquoise\">Impressão Digital</span>\n              <br />\n              <span className=\"text-white\">de Grande Formato</span>\n            </h1>\n            \n            <p className=\"text-xl text-gray-300 mb-8 leading-relaxed max-w-3xl mx-auto\">\n              Tecnologia de impressão digital de última geração para projetos de grande impacto. \n              Qualidade fotográfica em materiais resistentes e duradouros.\n            </p>\n            \n            <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n              <Button asChild className=\"bg-gradient-to-r from-brand-turquoise to-brand-blue text-white font-bold px-8 py-6 text-lg\">\n                <Link href=\"/contactos#formulario\">Solicitar Orçamento</Link>\n              </Button>\n              <Button variant=\"outline\" className=\"border-brand-yellow text-brand-yellow hover:bg-brand-yellow hover:text-black px-8 py-6 text-lg\">\n                Ver Materiais\n              </Button>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Features Grid */}\n      <section className=\"pt-0 pb-8 bg-gray-900/50\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-3xl md:text-4xl font-heading font-bold mb-4\">\n              <span className=\"text-brand-turquoise\">Tecnologia</span> <span className=\"text-white\">Avançada</span>\n            </h2>\n            <p className=\"text-gray-400 text-lg max-w-2xl mx-auto\">\n              Equipamentos de impressão digital que garantem qualidade excepcional em todos os projetos\n            </p>\n          </div>\n          \n          <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            {features.map((feature, index) => (\n              <Card key={index} className=\"bg-black/50 border-gray-800 hover:border-brand-turquoise transition-all duration-300\">\n                <CardContent className=\"p-6\">\n                  <div className=\"text-brand-turquoise mb-4\">\n                    {feature.icon}\n                  </div>\n                  <h3 className=\"text-xl font-semibold mb-3 text-white\">{feature.title}</h3>\n                  <p className=\"text-gray-400\">{feature.description}</p>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Materials Section */}\n      <section className=\"pt-0 pb-8 bg-black\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-3xl md:text-4xl font-heading font-bold mb-4\">\n              <span className=\"text-white\">Materiais</span> <span className=\"text-brand-coral\">Disponíveis</span>\n            </h2>\n            <p className=\"text-gray-400 text-lg max-w-2xl mx-auto\">\n              Selecionamos os melhores materiais para garantir durabilidade e qualidade visual\n            </p>\n          </div>\n          \n          <div className=\"grid md:grid-cols-2 gap-8\">\n            {materials.map((material, index) => (\n              <Card key={index} className=\"bg-gray-900/50 border-gray-800 hover:border-brand-coral transition-all duration-300\">\n                <CardContent className=\"p-6\">\n                  <h3 className=\"text-xl font-semibold mb-3 text-brand-coral\">{material.name}</h3>\n                  <p className=\"text-gray-400 mb-4\">{material.description}</p>\n                  <div>\n                    <span className=\"text-sm text-gray-500 mb-2 block\">Aplicações:</span>\n                    <div className=\"flex flex-wrap gap-2\">\n                      {material.applications.map((app, appIndex) => (\n                        <Badge key={appIndex} variant=\"outline\" className=\"border-brand-turquoise text-brand-turquoise\">\n                          {app}\n                        </Badge>\n                      ))}\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Process Section */}\n      <section className=\"py-16 bg-gray-900/30\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-3xl md:text-4xl font-heading font-bold mb-4\">\n              <span className=\"text-white\">Processo de</span> <span className=\"text-brand-yellow\">Produção</span>\n            </h2>\n            <p className=\"text-gray-400 text-lg max-w-2xl mx-auto\">\n              Metodologia rigorosa que garante qualidade consistente em cada impressão\n            </p>\n          </div>\n          \n          <div className=\"max-w-4xl mx-auto\">\n            {process.map((step, index) => (\n              <div key={index} className=\"flex gap-6 mb-8 last:mb-0\">\n                <div className=\"flex-shrink-0\">\n                  <div className=\"w-16 h-16 bg-gradient-to-br from-brand-turquoise to-brand-blue rounded-full flex items-center justify-center text-white font-bold text-xl\">\n                    {step.step}\n                  </div>\n                </div>\n                <div className=\"flex-1 pb-8\">\n                  <h3 className=\"text-xl font-semibold mb-2 text-white\">{step.title}</h3>\n                  <p className=\"text-gray-400\">{step.description}</p>\n                  {index < process.length - 1 && (\n                    <div className=\"w-px h-8 bg-gray-700 ml-8 mt-4\"></div>\n                  )}\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Specs Section */}\n      <section className=\"py-16 bg-black\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"max-w-4xl mx-auto\">\n            <div className=\"grid md:grid-cols-2 gap-12 items-center\">\n              <div>\n                <h2 className=\"text-3xl md:text-4xl font-heading font-bold mb-6\">\n                  <span className=\"text-brand-turquoise\">Especificações</span> <span className=\"text-white\">Técnicas</span>\n                </h2>\n                <p className=\"text-gray-400 mb-8 text-lg\">\n                  Equipamentos de última geração que permitem impressões de qualidade excepcional \n                  em grandes formatos.\n                </p>\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center gap-3\">\n                    <CheckCircle className=\"w-6 h-6 text-brand-turquoise flex-shrink-0\" />\n                    <span className=\"text-white\">Tintas látex sem odor</span>\n                  </div>\n                  <div className=\"flex items-center gap-3\">\n                    <CheckCircle className=\"w-6 h-6 text-brand-turquoise flex-shrink-0\" />\n                    <span className=\"text-white\">Resolução: 1440 DPI</span>\n                  </div>\n                  <div className=\"flex items-center gap-3\">\n                    <CheckCircle className=\"w-6 h-6 text-brand-turquoise flex-shrink-0\" />\n                    <span className=\"text-white\">Resistência superior ao desbotamento</span>\n                  </div>\n                  <div className=\"flex items-center gap-3\">\n                    <CheckCircle className=\"w-6 h-6 text-brand-turquoise flex-shrink-0\" />\n                    <span className=\"text-white\">Perfil de cores ICC</span>\n                  </div>\n                  <div className=\"flex items-center gap-3\">\n                    <CheckCircle className=\"w-6 h-6 text-brand-turquoise flex-shrink-0\" />\n                    <span className=\"text-white\">Acabamentos especiais</span>\n                  </div>\n                </div>\n              </div>\n              \n              <div className=\"bg-gray-900/50 rounded-2xl p-8 border border-gray-800\">\n                <div className=\"text-center mb-6\">\n                  <Star className=\"w-12 h-12 text-brand-turquoise mx-auto mb-4\" />\n                  <h3 className=\"text-2xl font-semibold mb-2 text-white\">Garantia de Qualidade</h3>\n                  <p className=\"text-gray-400\">\n                    Controlo rigoroso em todas as fases da produção\n                  </p>\n                </div>\n                \n                <div className=\"space-y-4\">\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-gray-400\">Durabilidade exterior</span>\n                    <span className=\"text-brand-turquoise font-semibold\">5-7 anos</span>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-gray-400\">Resolução mínima</span>\n                    <span className=\"text-brand-turquoise font-semibold\">150 DPI</span>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-gray-400\">Prazo médio</span>\n                    <span className=\"text-brand-turquoise font-semibold\">2-5 dias</span>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-gray-400\">Garantia</span>\n                    <span className=\"text-brand-turquoise font-semibold\">1 ano</span>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* CTA Section */}\n      <section className=\"pt-0 pb-8 bg-gradient-to-r from-brand-turquoise/10 via-brand-blue/10 to-brand-coral/10\">\n        <div className=\"container mx-auto px-4 text-center\">\n          <h2 className=\"text-3xl md:text-4xl font-heading font-bold mb-6\">\n            <span className=\"text-white\">Pronto para Imprimir o Seu</span> <span className=\"text-brand-turquoise\">Projeto?</span>\n          </h2>\n          <p className=\"text-gray-300 text-lg mb-8 max-w-2xl mx-auto\">\n            Entre em contacto connosco e descubra como a nossa impressão digital pode \n            dar vida aos seus projetos de comunicação visual.\n          </p>\n          \n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n            <Button asChild className=\"bg-gradient-to-r from-brand-turquoise to-brand-blue text-white font-bold px-8 py-6 text-lg\">\n              <Link href=\"/contactos#formulario\">\n                Solicitar Orçamento\n                <ArrowRight className=\"w-5 h-5 ml-2\" />\n              </Link>\n            </Button>\n            <Button asChild variant=\"outline\" className=\"border-brand-yellow text-brand-yellow hover:bg-brand-yellow hover:text-black px-8 py-6 text-lg\">\n              <a href=\"https://wa.me/351930682725?text=Olá!%20Interessado%20em%20impressão%20digital.\" target=\"_blank\" rel=\"noopener noreferrer\">\n                WhatsApp Direto\n              </a>\n            </Button>\n          </div>\n        </div>\n      </section>\n\n      <Footer />\n    </div>\n  );\n}","size_bytes":14544},"client/src/pages/servico-papel-parede.tsx":{"content":"import Navigation from \"@/components/navigation\";\nimport Footer from \"@/components/footer\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Link } from \"wouter\";\nimport { \n  Wallpaper, \n  CheckCircle, \n  Star, \n  ArrowRight, \n  Grid,\n  Palette,\n  Home,\n  Ruler,\n  Eye,\n  Search,\n  Upload,\n  Calculator,\n  ShoppingCart\n} from \"lucide-react\";\nimport { useState } from \"react\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\n\nexport default function ServicoPapelParede() {\n  const [formData, setFormData] = useState({\n    largura: '',\n    altura: '',\n    quantidade: '1',\n    opcaoImagem: 'adobe-stock', // 'adobe-stock' ou 'propria'\n    descricaoImagem: '',\n    codigoAdobeStock: '',\n    linkImagemAdobe: '',\n    informacoesImagemAdobe: '',\n    mensagem: '',\n    nome: '',\n    email: '',\n    telefone: ''\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    // Validação para Adobe Stock\n    if (formData.opcaoImagem === 'adobe-stock') {\n      const hasCode = formData.codigoAdobeStock.trim() !== '';\n      const hasLink = formData.linkImagemAdobe.trim() !== '';\n      const hasInfo = formData.informacoesImagemAdobe.trim() !== '';\n      \n      if (!hasCode && !hasLink && !hasInfo) {\n        alert('Para imagens do Adobe Stock, é obrigatório fornecer pelo menos um dos seguintes: código da imagem, link da imagem ou informações da imagem.');\n        return;\n      }\n    }\n    \n    let imagemInfo = '';\n    if (formData.opcaoImagem === 'adobe-stock') {\n      imagemInfo = `Adobe Stock:\n${formData.codigoAdobeStock ? `📝 Código: ${formData.codigoAdobeStock}` : ''}\n${formData.linkImagemAdobe ? `🔗 Link: ${formData.linkImagemAdobe}` : ''}\n${formData.informacoesImagemAdobe ? `ℹ️ Informações: ${formData.informacoesImagemAdobe}` : ''}\n${formData.descricaoImagem ? `📝 Descrição: ${formData.descricaoImagem}` : ''}`;\n    } else {\n      imagemInfo = `Imagem própria - ${formData.descricaoImagem}`;\n    }\n\n    const whatsappMessage = `Olá! Gostaria de um orçamento para papel de parede:\n    \n📐 Medidas: ${formData.largura}m x ${formData.altura}m\n📦 Quantidade: ${formData.quantidade} parede(s)\n🖼️ Imagem: ${imagemInfo}\n📞 Contacto: ${formData.nome} - ${formData.telefone}\n📧 Email: ${formData.email}\n💬 Mensagem: ${formData.mensagem}`;\n    \n    const encodedMessage = encodeURIComponent(whatsappMessage);\n    window.open(`https://wa.me/351930682725?text=${encodedMessage}`, '_blank');\n  };\n\n\n  const features = [\n    {\n      icon: <Grid className=\"w-6 h-6\" />,\n      title: \"Grande Variedade de Texturas\",\n      description: \"Vasta coleção constantemente atualizada com as últimas tendências\"\n    },\n    {\n      icon: <Search className=\"w-6 h-6\" />,\n      title: \"Múltiplas Categorias\",\n      description: \"Organização intuitiva para encontrar rapidamente o padrão ideal\"\n    },\n    {\n      icon: <Eye className=\"w-6 h-6\" />,\n      title: \"Visualização Real\",\n      description: \"Catálogo interativo que permite ver as texturas em tamanho real\"\n    },\n    {\n      icon: <Ruler className=\"w-6 h-6\" />,\n      title: \"Medidas Personalizadas\",\n      description: \"Cálculo automático de quantidades necessárias para o seu espaço\"\n    },\n    {\n      icon: <Palette className=\"w-6 h-6\" />,\n      title: \"Seleção Múltipla\",\n      description: \"Compare diferentes padrões lado a lado para decidir melhor\"\n    },\n    {\n      icon: <Home className=\"w-6 h-6\" />,\n      title: \"Simulação no Ambiente\",\n      description: \"Veja como ficará o papel na sua parede antes de comprar\"\n    }\n  ];\n\n  const process = [\n    {\n      step: \"01\",\n      title: \"Escolha da Imagem\",\n      description: \"Escolha das nossas texturas da loja ou visite Adobe Stock para selecionar uma imagem\"\n    },\n    {\n      step: \"02\", \n      title: \"Medidas Personalizadas\",\n      description: \"Forneça as dimensões exactas (largura x altura) do seu projeto\"\n    },\n    {\n      step: \"03\",\n      title: \"Medição do Espaço\", \n      description: \"Calculamos as quantidades exatas necessárias para o seu projeto\"\n    },\n    {\n      step: \"04\",\n      title: \"Orçamento Detalhado\",\n      description: \"Receba orçamento completo incluindo papel e aplicação\"\n    },\n    {\n      step: \"05\",\n      title: \"Entrega e Aplicação\",\n      description: \"Entregamos e aplicamos com garantia de qualidade profissional\"\n    }\n  ];\n\n  const benefits = [\n    \"Catálogo sempre atualizado\",\n    \"Visualização em tamanho real\", \n    \"Cálculo automático de quantidades\",\n    \"Aplicação profissional incluída\",\n    \"Garantia de qualidade\",\n    \"Suporte técnico especializado\"\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-black text-white\">\n      <Navigation />\n      \n      {/* Hero Section */}\n      <section className=\"pt-32 pb-16 bg-gradient-to-br from-black via-orange-900/20 to-black\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"max-w-4xl mx-auto text-center\">\n            <Badge className=\"bg-brand-coral text-white mb-6\">\n              <Wallpaper className=\"w-4 h-4 mr-2\" />\n              Papel de Parede Premium\n            </Badge>\n            \n            <h1 className=\"text-5xl md:text-6xl font-heading font-bold mb-6\">\n              <span className=\"text-brand-coral\">Grande Variedade de Texturas</span>\n              <br />\n              <span className=\"text-white\">em Catálogo Interativo</span>\n            </h1>\n            \n            <p className=\"text-xl text-gray-300 mb-8 leading-relaxed max-w-3xl mx-auto\">\n              Descubra a maior coleção de papéis de parede em Portugal. \n              Catálogo interativo com visualização em tamanho real e múltiplas categorias diferentes.\n            </p>\n            \n            <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n              <Button asChild className=\"bg-gradient-to-r from-brand-coral to-brand-yellow text-white font-bold px-8 py-6 text-lg\">\n                <Link href=\"/loja/papel-parede\">Explorar Catálogo de Texturas</Link>\n              </Button>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Features Grid */}\n      <section className=\"pt-0 pb-8 bg-gray-900/50\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-3xl md:text-4xl font-heading font-bold mb-4\">\n              <span className=\"text-brand-coral\">Catálogo</span> <span className=\"text-white\">Interativo</span>\n            </h2>\n            <p className=\"text-gray-400 text-lg max-w-2xl mx-auto\">\n              Tecnologia inovadora que permite explorar milhares de texturas de forma intuitiva\n            </p>\n          </div>\n          \n          <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            {features.map((feature, index) => (\n              <Card key={index} className=\"bg-black/50 border-gray-800 hover:border-brand-coral transition-all duration-300\">\n                <CardContent className=\"p-6\">\n                  <div className=\"text-brand-coral mb-4\">\n                    {feature.icon}\n                  </div>\n                  <h3 className=\"text-xl font-semibold mb-3 text-white\">{feature.title}</h3>\n                  <p className=\"text-gray-400\">{feature.description}</p>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </section>\n\n\n\n      {/* Process Section */}\n      <section className=\"py-16 bg-gray-900/30\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-3xl md:text-4xl font-heading font-bold mb-4\">\n              <span className=\"text-white\">Como</span> <span className=\"text-brand-turquoise\">Funciona</span>\n            </h2>\n            <p className=\"text-gray-400 text-lg max-w-2xl mx-auto\">\n              Escolha entre as nossas texturas da loja ou use <a href=\"https://stock.adobe.com/\" target=\"_blank\" rel=\"noopener noreferrer\" className=\"text-brand-turquoise hover:text-brand-yellow underline\">Adobe Stock</a>. Para imagens do Adobe Stock, recolha o número da imagem ou tire uma miniatura para enviar pelo formulário\n            </p>\n          </div>\n          \n          <div className=\"max-w-4xl mx-auto\">\n            {process.map((step, index) => (\n              <div key={index} className=\"flex gap-6 mb-8 last:mb-0\">\n                <div className=\"flex-shrink-0\">\n                  <div className=\"w-16 h-16 bg-gradient-to-br from-brand-coral to-brand-yellow rounded-full flex items-center justify-center text-white font-bold text-xl\">\n                    {step.step}\n                  </div>\n                </div>\n                <div className=\"flex-1 pb-8\">\n                  <h3 className=\"text-xl font-semibold mb-2 text-white\">{step.title}</h3>\n                  <p className=\"text-gray-400\">{step.description}</p>\n                  {index < process.length - 1 && (\n                    <div className=\"w-px h-8 bg-gray-700 ml-8 mt-4\"></div>\n                  )}\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Benefits Section */}\n      <section className=\"pt-0 pb-8 bg-black\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"max-w-4xl mx-auto\">\n            <div className=\"grid md:grid-cols-2 gap-12 items-center\">\n              <div>\n                <h2 className=\"text-3xl md:text-4xl font-heading font-bold mb-6\">\n                  <span className=\"text-brand-coral\">Vantagens</span> <span className=\"text-white\">Exclusivas</span>\n                </h2>\n                <p className=\"text-gray-400 mb-8 text-lg\">\n                  Mais que um simples catálogo, oferecemos uma experiência completa \n                  de seleção e aplicação de papel de parede.\n                </p>\n                <div className=\"space-y-4\">\n                  {benefits.map((benefit, index) => (\n                    <div key={index} className=\"flex items-center gap-3\">\n                      <CheckCircle className=\"w-6 h-6 text-brand-coral flex-shrink-0\" />\n                      <span className=\"text-white\">{benefit}</span>\n                    </div>\n                  ))}\n                </div>\n              </div>\n              \n              <div className=\"bg-gray-900/50 rounded-2xl p-8 border border-gray-800\">\n                <div className=\"text-center mb-6\">\n                  <Star className=\"w-12 h-12 text-brand-coral mx-auto mb-4\" />\n                  <h3 className=\"text-2xl font-semibold mb-2 text-white\">Serviço Completo</h3>\n                  <p className=\"text-gray-400\">\n                    Da seleção à aplicação, cuidamos de todo o processo\n                  </p>\n                </div>\n                \n                <div className=\"space-y-4\">\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-gray-400\">Texturas disponíveis</span>\n                    <span className=\"text-brand-coral font-semibold\">Grande variedade</span>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-gray-400\">Categorias</span>\n                    <span className=\"text-brand-coral font-semibold\">Múltiplas</span>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-gray-400\">Aplicação incluída</span>\n                    <span className=\"text-brand-coral font-semibold\">Sim</span>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-gray-400\">Garantia</span>\n                    <span className=\"text-brand-coral font-semibold\">2 anos</span>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Orçamento Personalizado */}\n      <section className=\"py-16 bg-gray-900/30\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"max-w-4xl mx-auto\">\n            <div className=\"text-center mb-12\">\n              <h2 className=\"text-3xl md:text-4xl font-heading font-bold mb-4\">\n                <span className=\"text-brand-coral\">Orçamento</span> <span className=\"text-white\">Personalizado</span>\n              </h2>\n              <p className=\"text-gray-400 text-lg\">\n                Escolha entre Adobe Stock ou envie sua própria imagem\n              </p>\n            </div>\n\n            {/* Formulário de Orçamento - Largura Total */}\n            <Card className=\"bg-black/50 border-gray-800 mb-8\">\n              <CardContent className=\"p-6\">\n                <form onSubmit={handleSubmit} className=\"space-y-4\">\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div>\n                        <Label htmlFor=\"largura\" className=\"text-white\">Largura (metros)</Label>\n                        <Input\n                          id=\"largura\"\n                          type=\"number\"\n                          step=\"0.1\"\n                          placeholder=\"Ex: 3.5\"\n                          value={formData.largura}\n                          onChange={(e) => setFormData({...formData, largura: e.target.value})}\n                          className=\"bg-gray-900 border-gray-700 text-white\"\n                          required\n                        />\n                      </div>\n                      <div>\n                        <Label htmlFor=\"altura\" className=\"text-white\">Altura (metros)</Label>\n                        <Input\n                          id=\"altura\"\n                          type=\"number\"\n                          step=\"0.1\"\n                          placeholder=\"Ex: 2.5\"\n                          value={formData.altura}\n                          onChange={(e) => setFormData({...formData, altura: e.target.value})}\n                          className=\"bg-gray-900 border-gray-700 text-white\"\n                          required\n                        />\n                      </div>\n                    </div>\n\n                    <div>\n                      <Label htmlFor=\"quantidade\" className=\"text-white\">Quantidade de Paredes</Label>\n                      <Input\n                        id=\"quantidade\"\n                        type=\"number\"\n                        min=\"1\"\n                        value={formData.quantidade}\n                        onChange={(e) => setFormData({...formData, quantidade: e.target.value})}\n                        className=\"bg-gray-900 border-gray-700 text-white\"\n                        required\n                      />\n                    </div>\n\n                    <div>\n                      <Label className=\"text-white\">Opção de Imagem</Label>\n                      <div className=\"flex gap-4 mt-2\">\n                        <label className=\"flex items-center text-white\">\n                          <input\n                            type=\"radio\"\n                            name=\"opcaoImagem\"\n                            value=\"adobe-stock\"\n                            checked={formData.opcaoImagem === 'adobe-stock'}\n                            onChange={(e) => setFormData({...formData, opcaoImagem: e.target.value})}\n                            className=\"mr-2\"\n                          />\n                          Adobe Stock\n                        </label>\n                        <label className=\"flex items-center text-white\">\n                          <input\n                            type=\"radio\"\n                            name=\"opcaoImagem\"\n                            value=\"propria\"\n                            checked={formData.opcaoImagem === 'propria'}\n                            onChange={(e) => setFormData({...formData, opcaoImagem: e.target.value})}\n                            className=\"mr-2\"\n                          />\n                          Imagem Própria\n                        </label>\n                      </div>\n                    </div>\n\n                    {formData.opcaoImagem === 'adobe-stock' ? (\n                      <div className=\"space-y-4\">\n                        <div>\n                          <Label htmlFor=\"codigoAdobeStock\" className=\"text-white\">Código Adobe Stock (se disponível)</Label>\n                          <Input\n                            id=\"codigoAdobeStock\"\n                            placeholder=\"Ex: 123456789\"\n                            value={formData.codigoAdobeStock}\n                            onChange={(e) => setFormData({...formData, codigoAdobeStock: e.target.value})}\n                            className=\"bg-gray-900 border-gray-700 text-white\"\n                          />\n                        </div>\n                        \n                        <div>\n                          <Label htmlFor=\"linkImagemAdobe\" className=\"text-white\">Link da imagem Adobe Stock (se disponível)</Label>\n                          <Input\n                            id=\"linkImagemAdobe\"\n                            type=\"url\"\n                            placeholder=\"https://stock.adobe.com/...\"\n                            value={formData.linkImagemAdobe}\n                            onChange={(e) => setFormData({...formData, linkImagemAdobe: e.target.value})}\n                            className=\"bg-gray-900 border-gray-700 text-white\"\n                          />\n                        </div>\n\n                        <div>\n                          <Label htmlFor=\"informacoesImagemAdobe\" className=\"text-white\">Informações da imagem (título, autor, etc.)</Label>\n                          <Textarea\n                            id=\"informacoesImagemAdobe\"\n                            placeholder=\"Ex: Título da imagem, nome do autor, palavras-chave...\"\n                            value={formData.informacoesImagemAdobe}\n                            onChange={(e) => setFormData({...formData, informacoesImagemAdobe: e.target.value})}\n                            className=\"bg-gray-900 border-gray-700 text-white\"\n                          />\n                        </div>\n\n                        <div>\n                          <Label htmlFor=\"descricaoImagem\" className=\"text-white\">Descrição adicional (opcional)</Label>\n                          <Textarea\n                            id=\"descricaoImagem\"\n                            placeholder=\"Ex: Preferências de cores, estilo, detalhes específicos...\"\n                            value={formData.descricaoImagem}\n                            onChange={(e) => setFormData({...formData, descricaoImagem: e.target.value})}\n                            className=\"bg-gray-900 border-gray-700 text-white\"\n                          />\n                        </div>\n\n                        <div className=\"bg-blue-900/20 border border-blue-700/50 rounded-lg p-4\">\n                          <p className=\"text-blue-300 text-sm\">\n                            💡 <strong>Dica:</strong> Forneça pelo menos um dos seguintes: código da imagem, link direto ou informações detalhadas (título + autor). Isto permite-nos localizar e fazer o download da imagem correta.\n                          </p>\n                        </div>\n                      </div>\n                    ) : (\n                      <div>\n                        <Label htmlFor=\"descricaoImagem\" className=\"text-white\">Descrição da sua imagem</Label>\n                        <Textarea\n                          id=\"descricaoImagem\"\n                          placeholder=\"Ex: Logo da empresa, foto de família, imagem específica...\"\n                          value={formData.descricaoImagem}\n                          onChange={(e) => setFormData({...formData, descricaoImagem: e.target.value})}\n                          className=\"bg-gray-900 border-gray-700 text-white\"\n                          required\n                        />\n                      </div>\n                    )}\n\n                    <div className=\"grid grid-cols-1 gap-4\">\n                      <div>\n                        <Label htmlFor=\"nome\" className=\"text-white\">Nome</Label>\n                        <Input\n                          id=\"nome\"\n                          value={formData.nome}\n                          onChange={(e) => setFormData({...formData, nome: e.target.value})}\n                          className=\"bg-gray-900 border-gray-700 text-white\"\n                          required\n                        />\n                      </div>\n                      <div>\n                        <Label htmlFor=\"email\" className=\"text-white\">Email</Label>\n                        <Input\n                          id=\"email\"\n                          type=\"email\"\n                          value={formData.email}\n                          onChange={(e) => setFormData({...formData, email: e.target.value})}\n                          className=\"bg-gray-900 border-gray-700 text-white\"\n                          required\n                        />\n                      </div>\n                      <div>\n                        <Label htmlFor=\"telefone\" className=\"text-white\">Telefone</Label>\n                        <Input\n                          id=\"telefone\"\n                          value={formData.telefone}\n                          onChange={(e) => setFormData({...formData, telefone: e.target.value})}\n                          className=\"bg-gray-900 border-gray-700 text-white\"\n                          required\n                        />\n                      </div>\n                    </div>\n\n                    <div>\n                      <Label htmlFor=\"mensagem\" className=\"text-white\">Mensagem Adicional</Label>\n                      <Textarea\n                        id=\"mensagem\"\n                        placeholder=\"Detalhes adicionais sobre o projeto...\"\n                        value={formData.mensagem}\n                        onChange={(e) => setFormData({...formData, mensagem: e.target.value})}\n                        className=\"bg-gray-900 border-gray-700 text-white\"\n                      />\n                    </div>\n\n                    <Button type=\"submit\" className=\"w-full bg-gradient-to-r from-brand-coral to-brand-yellow text-white\">\n                      <Calculator className=\"w-4 h-4 mr-2\" />\n                      Solicitar Orçamento\n                    </Button>\n                </form>\n              </CardContent>\n            </Card>\n\n            {/* Opções Rápidas - Lado a Lado */}\n            <div className=\"grid md:grid-cols-2 gap-6\">\n              <Card className=\"bg-black/50 border-gray-800 hover:border-brand-turquoise transition-all duration-300\">\n                <CardContent className=\"p-6 text-center\">\n                  <ShoppingCart className=\"w-12 h-12 text-brand-turquoise mx-auto mb-4\" />\n                  <h3 className=\"text-xl font-semibold mb-3 text-white\">Loja Online</h3>\n                  <p className=\"text-gray-400 mb-4\">\n                    Explore nossa seção de texturas na loja online\n                  </p>\n                  <Button asChild className=\"bg-brand-turquoise text-black hover:bg-brand-turquoise/80\">\n                    <Link href=\"/loja\">\n                      Ver Texturas na Loja\n                      <ArrowRight className=\"w-4 h-4 ml-2\" />\n                    </Link>\n                  </Button>\n                </CardContent>\n              </Card>\n\n              <Card className=\"bg-black/50 border-gray-800 hover:border-brand-coral transition-all duration-300\">\n                <CardContent className=\"p-6 text-center\">\n                  <Upload className=\"w-12 h-12 text-brand-coral mx-auto mb-4\" />\n                  <h3 className=\"text-xl font-semibold mb-3 text-white\">Envio de Imagens</h3>\n                  <p className=\"text-gray-400 mb-4\">\n                    Se escolheu \"Imagem Própria\", pode enviar após o orçamento\n                  </p>\n                  <Button asChild variant=\"outline\" className=\"border-brand-coral text-brand-coral hover:bg-brand-coral hover:text-white\">\n                    <a href=\"https://wa.me/351930682725?text=Olá!%20Quero%20enviar%20uma%20imagem%20para%20papel%20de%20parede\" target=\"_blank\">\n                      Enviar via WhatsApp\n                    </a>\n                  </Button>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* CTA Section */}\n      <section className=\"pt-0 pb-8 bg-gradient-to-r from-brand-coral/10 via-brand-yellow/10 to-brand-turquoise/10\">\n        <div className=\"container mx-auto px-4 text-center\">\n          <h2 className=\"text-3xl md:text-4xl font-heading font-bold mb-6\">\n            <span className=\"text-white\">Pronto para Transformar o Seu</span> <span className=\"text-brand-coral\">Espaço?</span>\n          </h2>\n          <p className=\"text-gray-300 text-lg mb-8 max-w-2xl mx-auto\">\n            Explore o nosso catálogo interativo e descubra milhares de possibilidades \n            para decorar as suas paredes com estilo e personalidade.\n          </p>\n          \n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n            <Button asChild className=\"bg-gradient-to-r from-brand-coral to-brand-yellow text-white font-bold px-8 py-6 text-lg\">\n              <Link href=\"/contactos#formulario\">\n                Agendar Consulta\n                <ArrowRight className=\"w-5 h-5 ml-2\" />\n              </Link>\n            </Button>\n            <Button asChild variant=\"outline\" className=\"border-brand-turquoise text-brand-turquoise hover:bg-brand-turquoise hover:text-black px-8 py-6 text-lg\">\n              <a href=\"https://wa.me/351930682725?text=Olá!%20Interessado%20em%20papel%20de%20parede.\" target=\"_blank\" rel=\"noopener noreferrer\">\n                WhatsApp Direto\n              </a>\n            </Button>\n          </div>\n        </div>\n      </section>\n\n      <Footer />\n    </div>\n  );\n}","size_bytes":26260},"client/src/pages/servico-telas-artisticas.tsx":{"content":"import Navigation from \"@/components/navigation\";\nimport Footer from \"@/components/footer\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Link } from \"wouter\";\nimport { \n  Image, \n  CheckCircle, \n  Star, \n  ArrowRight, \n  Frame,\n  Brush,\n  Camera,\n  Palette,\n  Award,\n  Shield\n} from \"lucide-react\";\nimport { useState } from \"react\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\n\nexport default function ServicoTelasArtisticas() {\n  const [formData, setFormData] = useState({\n    largura: '',\n    altura: '',\n    quantidade: '1',\n    opcaoImagem: 'adobe-stock', // 'adobe-stock' ou 'propria'\n    descricaoImagem: '',\n    codigoAdobeStock: '',\n    linkImagemAdobe: '',\n    informacoesImagemAdobe: '',\n    mensagem: '',\n    nome: '',\n    email: '',\n    telefone: ''\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    // Validação para Adobe Stock\n    if (formData.opcaoImagem === 'adobe-stock') {\n      const hasCode = formData.codigoAdobeStock.trim() !== '';\n      const hasLink = formData.linkImagemAdobe.trim() !== '';\n      const hasInfo = formData.informacoesImagemAdobe.trim() !== '';\n      \n      if (!hasCode && !hasLink && !hasInfo) {\n        alert('Para imagens do Adobe Stock, é obrigatório fornecer pelo menos um dos seguintes: código da imagem, link da imagem ou informações da imagem.');\n        return;\n      }\n    }\n    \n    let imagemInfo = '';\n    if (formData.opcaoImagem === 'adobe-stock') {\n      imagemInfo = `Adobe Stock:\n${formData.codigoAdobeStock ? `📝 Código: ${formData.codigoAdobeStock}` : ''}\n${formData.linkImagemAdobe ? `🔗 Link: ${formData.linkImagemAdobe}` : ''}\n${formData.informacoesImagemAdobe ? `ℹ️ Informações: ${formData.informacoesImagemAdobe}` : ''}\n${formData.descricaoImagem ? `📝 Descrição: ${formData.descricaoImagem}` : ''}`;\n    } else {\n      imagemInfo = `Imagem própria - ${formData.descricaoImagem}`;\n    }\n\n    const whatsappMessage = `Olá! Gostaria de um orçamento para tela artística:\n    \n📐 Medidas: ${formData.largura}cm x ${formData.altura}cm\n📦 Quantidade: ${formData.quantidade} tela(s)\n🖼️ Imagem: ${imagemInfo}\n📞 Contacto: ${formData.nome} - ${formData.telefone}\n📧 Email: ${formData.email}\n💬 Mensagem: ${formData.mensagem}`;\n    \n    const encodedMessage = encodeURIComponent(whatsappMessage);\n    window.open(`https://wa.me/351930682725?text=${encodedMessage}`, '_blank');\n  };\n  const features = [\n    {\n      icon: <Frame className=\"w-6 h-6\" />,\n      title: \"Canvas Premium\",\n      description: \"Telas de algodão de alta gramagem para máxima durabilidade e qualidade\"\n    },\n    {\n      icon: <Brush className=\"w-6 h-6\" />,\n      title: \"Impressão Artística\",\n      description: \"Tecnologia de impressão que reproduz fielmente cores e texturas\"\n    },\n    {\n      icon: <Camera className=\"w-6 h-6\" />,\n      title: \"Fotografias Personalizadas\",\n      description: \"Transforme as suas fotografias em obras de arte profissionais\"\n    },\n    {\n      icon: <Palette className=\"w-6 h-6\" />,\n      title: \"Arte Digital\",\n      description: \"Criação de arte digital exclusiva para a sua tela\"\n    },\n    {\n      icon: <Award className=\"w-6 h-6\" />,\n      title: \"Molduras Incluídas\",\n      description: \"Variedade de molduras elegantes incluídas no serviço\"\n    },\n    {\n      icon: <Shield className=\"w-6 h-6\" />,\n      title: \"Resistente ao Tempo\",\n      description: \"Tintas UV resistentes que mantêm as cores vibrantes por anos\"\n    }\n  ];\n\n  const sizes = [\n    \"20x30 cm\", \"30x40 cm\", \"40x50 cm\", \"50x70 cm\", \n    \"60x80 cm\", \"70x100 cm\", \"80x120 cm\", \"100x150 cm\"\n  ];\n\n  const applications = [\n    {\n      title: \"Decoração Residencial\",\n      description: \"Transforme a sua casa num espaço único com arte personalizada\",\n      examples: [\"Salas de estar\", \"Quartos\", \"Escritórios\", \"Corredores\"]\n    },\n    {\n      title: \"Espaços Comerciais\", \n      description: \"Crie ambientes profissionais inspiradores e memoráveis\",\n      examples: [\"Hotéis\", \"Restaurantes\", \"Consultórios\", \"Escritórios\"]\n    },\n    {\n      title: \"Presentes Especiais\",\n      description: \"Ofereça algo verdadeiramente único e pessoal\",\n      examples: [\"Casamentos\", \"Aniversários\", \"Formações\", \"Eventos\"]\n    }\n  ];\n\n  const process = [\n    {\n      step: \"01\",\n      title: \"Seleção da Imagem\",\n      description: \"Escolha das nossas texturas da loja ou visite o Adobe Stock para selecionar uma imagem. Para Adobe Stock, recolha o número da imagem ou tire uma miniatura\"\n    },\n    {\n      step: \"02\", \n      title: \"Preparação Digital\",\n      description: \"Otimizamos a imagem para garantir a melhor qualidade de impressão\"\n    },\n    {\n      step: \"03\",\n      title: \"Impressão em Canvas\", \n      description: \"Impressão de alta qualidade em tela de algodão premium\"\n    },\n    {\n      step: \"04\",\n      title: \"Montagem e Moldura\",\n      description: \"Esticamos a tela e aplicamos a moldura escolhida\"\n    },\n    {\n      step: \"05\",\n      title: \"Controlo de Qualidade\",\n      description: \"Inspeção final antes da entrega para garantir perfeição\"\n    }\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-[#0a0a0a] text-white\">\n      <Navigation />\n      \n      {/* Hero Section */}\n      <section className=\"pt-32 pb-16 bg-gradient-to-br from-black via-purple-900/20 to-black\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"max-w-4xl mx-auto text-center\">\n            <Badge className=\"bg-purple-600 text-white mb-6\">\n              <Image className=\"w-4 h-4 mr-2\" />\n              Telas Artísticas Premium\n            </Badge>\n            \n            <h1 className=\"text-5xl md:text-6xl font-heading font-bold mb-6\">\n              <span className=\"text-purple-400\">Transforme Fotografias</span>\n              <br />\n              <span className=\"text-white\">em Obras de Arte</span>\n            </h1>\n            \n            <p className=\"text-xl text-gray-300 mb-8 leading-relaxed max-w-3xl mx-auto\">\n              Impressão artística em canvas de alta qualidade. Transforme as suas memórias \n              mais preciosas ou criações artísticas em telas duradouras e elegantes.\n            </p>\n            \n            <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n              <Button asChild className=\"bg-gradient-to-r from-purple-600 to-brand-coral text-white font-bold px-8 py-6 text-lg\">\n                <Link href=\"/contactos#formulario\">Criar Minha Tela</Link>\n              </Button>\n              <Button variant=\"outline\" className=\"border-brand-yellow text-brand-yellow hover:bg-brand-yellow hover:text-black px-8 py-6 text-lg\">\n                Ver Exemplos\n              </Button>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Features Grid */}\n      <section className=\"pt-0 pb-8 bg-gray-900/50\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-3xl md:text-4xl font-heading font-bold mb-4\">\n              <span className=\"text-purple-400\">Qualidade</span> <span className=\"text-white\">Artística</span>\n            </h2>\n            <p className=\"text-gray-400 text-lg max-w-2xl mx-auto\">\n              Tecnologia de impressão artística que garante resultados dignos de galeria\n            </p>\n          </div>\n          \n          <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            {features.map((feature, index) => (\n              <Card key={index} className=\"bg-[#0a0a0a] border-[#333] hover:border-purple-400 transition-all duration-300\">\n                <CardContent className=\"p-6\">\n                  <div className=\"text-purple-400 mb-4\">\n                    {feature.icon}\n                  </div>\n                  <h3 className=\"text-xl font-semibold mb-3 text-white\">{feature.title}</h3>\n                  <p className=\"text-gray-400\">{feature.description}</p>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Sizes Section */}\n      <section className=\"pt-0 pb-8 bg-black\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-3xl md:text-4xl font-heading font-bold mb-4\">\n              <span className=\"text-white\">Tamanhos</span> <span className=\"text-brand-coral\">Disponíveis</span>\n            </h2>\n            <p className=\"text-gray-400 text-lg max-w-2xl mx-auto\">\n              Desde formatos compactos até grandes obras de parede\n            </p>\n          </div>\n          \n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-6 max-w-4xl mx-auto\">\n            {sizes.map((size, index) => (\n              <div key={index} className=\"bg-gray-900/50 border border-gray-800 rounded-lg p-6 text-center hover:border-brand-coral transition-all duration-300\">\n                <div className=\"text-2xl font-bold text-brand-coral mb-2\">{size}</div>\n                <div className=\"text-sm text-gray-400\">Formato padrão</div>\n              </div>\n            ))}\n          </div>\n          \n          <div className=\"text-center mt-8\">\n            <p className=\"text-gray-400 mb-4\">Precisa de um tamanho personalizado?</p>\n            <Button asChild variant=\"outline\" className=\"border-brand-turquoise text-brand-turquoise hover:bg-brand-turquoise hover:text-black\">\n              <Link href=\"/contactos#formulario\">Solicitar Medida Especial</Link>\n            </Button>\n          </div>\n        </div>\n      </section>\n\n      {/* Applications Section */}\n      <section className=\"pt-0 pb-8 bg-gray-900/30\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-3xl md:text-4xl font-heading font-bold mb-4\">\n              <span className=\"text-white\">Aplicações</span> <span className=\"text-brand-yellow\">Ideais</span>\n            </h2>\n            <p className=\"text-gray-400 text-lg max-w-2xl mx-auto\">\n              Perfeitas para qualquer ambiente que necessite de um toque artístico especial\n            </p>\n          </div>\n          \n          <div className=\"grid md:grid-cols-3 gap-8\">\n            {applications.map((application, index) => (\n              <Card key={index} className=\"bg-[#0a0a0a] border-[#333] hover:border-brand-yellow transition-all duration-300\">\n                <CardContent className=\"p-6\">\n                  <h3 className=\"text-xl font-semibold mb-3 text-brand-yellow\">{application.title}</h3>\n                  <p className=\"text-gray-400 mb-4\">{application.description}</p>\n                  <div>\n                    <span className=\"text-sm text-gray-500 mb-2 block\">Exemplos:</span>\n                    <div className=\"space-y-1\">\n                      {application.examples.map((example, exampleIndex) => (\n                        <div key={exampleIndex} className=\"flex items-center gap-2\">\n                          <div className=\"w-1.5 h-1.5 bg-brand-yellow rounded-full\"></div>\n                          <span className=\"text-sm text-gray-300\">{example}</span>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Process Section */}\n      <section className=\"py-16 bg-black\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-3xl md:text-4xl font-heading font-bold mb-4\">\n              <span className=\"text-white\">Processo de</span> <span className=\"text-purple-400\">Criação</span>\n            </h2>\n            <p className=\"text-gray-400 text-lg max-w-2xl mx-auto\">\n              Cada tela é cuidadosamente produzida para garantir qualidade artística excepcional\n            </p>\n          </div>\n          \n          <div className=\"max-w-4xl mx-auto\">\n            {process.map((step, index) => (\n              <div key={index} className=\"flex gap-6 mb-8 last:mb-0\">\n                <div className=\"flex-shrink-0\">\n                  <div className=\"w-16 h-16 bg-gradient-to-br from-purple-600 to-brand-coral rounded-full flex items-center justify-center text-white font-bold text-xl\">\n                    {step.step}\n                  </div>\n                </div>\n                <div className=\"flex-1 pb-8\">\n                  <h3 className=\"text-xl font-semibold mb-2 text-white\">{step.title}</h3>\n                  <p className=\"text-gray-400\">{step.description}</p>\n                  {index < process.length - 1 && (\n                    <div className=\"w-px h-8 bg-gray-700 ml-8 mt-4\"></div>\n                  )}\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Quality Section */}\n      <section className=\"py-16 bg-gray-900/50\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"max-w-4xl mx-auto\">\n            <div className=\"grid md:grid-cols-2 gap-12 items-center\">\n              <div>\n                <h2 className=\"text-3xl md:text-4xl font-heading font-bold mb-6\">\n                  <span className=\"text-purple-400\">Garantia de</span> <span className=\"text-white\">Qualidade</span>\n                </h2>\n                <p className=\"text-gray-400 mb-8 text-lg\">\n                  Utilizamos apenas materiais premium e tecnologia de impressão avançada \n                  para garantir que cada tela seja uma verdadeira obra de arte.\n                </p>\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center gap-3\">\n                    <CheckCircle className=\"w-6 h-6 text-purple-400 flex-shrink-0\" />\n                    <span className=\"text-white\">Canvas 100% algodão, 400g/m²</span>\n                  </div>\n                  <div className=\"flex items-center gap-3\">\n                    <CheckCircle className=\"w-6 h-6 text-purple-400 flex-shrink-0\" />\n                    <span className=\"text-white\">Tintas pigmentadas resistentes UV</span>\n                  </div>\n                  <div className=\"flex items-center gap-3\">\n                    <CheckCircle className=\"w-6 h-6 text-purple-400 flex-shrink-0\" />\n                    <span className=\"text-white\">Molduras de madeira certificada</span>\n                  </div>\n                  <div className=\"flex items-center gap-3\">\n                    <CheckCircle className=\"w-6 h-6 text-purple-400 flex-shrink-0\" />\n                    <span className=\"text-white\">Acabamento profissional</span>\n                  </div>\n                  <div className=\"flex items-center gap-3\">\n                    <CheckCircle className=\"w-6 h-6 text-purple-400 flex-shrink-0\" />\n                    <span className=\"text-white\">Pronto para pendurar</span>\n                  </div>\n                </div>\n              </div>\n              \n              <div className=\"bg-black/50 rounded-2xl p-8 border border-gray-800\">\n                <div className=\"text-center mb-6\">\n                  <Star className=\"w-12 h-12 text-purple-400 mx-auto mb-4\" />\n                  <h3 className=\"text-2xl font-semibold mb-2 text-white\">Qualidade Artística</h3>\n                  <p className=\"text-gray-400\">\n                    Cada tela é uma peça única criada com máximo cuidado\n                  </p>\n                </div>\n                \n                <div className=\"space-y-4\">\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-gray-400\">Durabilidade</span>\n                    <span className=\"text-purple-400 font-semibold\">50+ anos</span>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-gray-400\">Resolução mínima</span>\n                    <span className=\"text-purple-400 font-semibold\">300 DPI</span>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-gray-400\">Prazo de produção</span>\n                    <span className=\"text-purple-400 font-semibold\">3-7 dias</span>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-gray-400\">Garantia</span>\n                    <span className=\"text-purple-400 font-semibold\">Vida útil</span>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* CTA Section */}\n      <section className=\"pt-0 pb-8 bg-gradient-to-r from-purple-600/10 via-brand-coral/10 to-brand-yellow/10\">\n        <div className=\"container mx-auto px-4 text-center\">\n          <h2 className=\"text-3xl md:text-4xl font-heading font-bold mb-6\">\n            <span className=\"text-white\">Pronto para Criar a Sua</span> <span className=\"text-purple-400\">Obra de Arte?</span>\n          </h2>\n          <p className=\"text-gray-300 text-lg mb-8 max-w-2xl mx-auto\">\n            Transforme as suas fotografias favoritas ou criações artísticas em telas \n            profissionais que durarão para sempre.\n          </p>\n          \n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n            <Button asChild className=\"bg-gradient-to-r from-purple-600 to-brand-coral text-white font-bold px-8 py-6 text-lg\">\n              <Link href=\"/contactos#formulario\">\n                Criar Minha Tela\n                <ArrowRight className=\"w-5 h-5 ml-2\" />\n              </Link>\n            </Button>\n            <Button asChild variant=\"outline\" className=\"border-brand-yellow text-brand-yellow hover:bg-brand-yellow hover:text-black px-8 py-6 text-lg\">\n              <a href=\"https://wa.me/351930682725?text=Olá!%20Interessado%20em%20telas%20artísticas.\" target=\"_blank\" rel=\"noopener noreferrer\">\n                WhatsApp Direto\n              </a>\n            </Button>\n          </div>\n        </div>\n      </section>\n\n      <Footer />\n    </div>\n  );\n}","size_bytes":18387},"client/src/pages/servicos.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { ArrowRight, Palette, Printer, Wallpaper, Image, Sticker, Car, Building, Shield } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport Navigation from \"@/components/navigation\";\nimport Footer from \"@/components/footer\";\n\ninterface Service {\n  id: string;\n  title: string;\n  description: string;\n  features: string[];\n  icon: React.ReactNode;\n  color: string;\n  detailsLink?: string;\n}\n\nconst services: Service[] = [\n  {\n    id: \"design-grafico\",\n    title: \"Design Gráfico\",\n    description: \"Criação e desenvolvimento de identidade visual completa\",\n    features: [\n      \"Desenho vectorial\",\n      \"Maquetes 3D\",\n      \"Imagem corporativa\",\n      \"Logótipos únicos\",\n      \"Tratamento de imagens\",\n      \"Material publicitário\"\n    ],\n    icon: <Palette className=\"w-8 h-8\" />,\n    color: \"from-[#FFD700] to-[#FFA500]\",\n    detailsLink: \"/servico-design-grafico\"\n  },\n  {\n    id: \"impressao-digital\",\n    title: \"Impressão Digital\",\n    description: \"Impressão de alta qualidade em diversos materiais como vinil e lona\",\n    features: [\n      \"Vinil autocolante e decorativo\",\n      \"Lona publicitária\",\n      \"Impressão em grande formato\",\n      \"Materiais resistentes\",\n      \"Acabamentos profissionais\"\n    ],\n    icon: <Printer className=\"w-8 h-8\" />,\n    color: \"from-[#20B2AA] to-[#4169E1]\",\n    detailsLink: \"/servico-impressao-digital\"\n  },\n  {\n    id: \"papel-parede\",\n    title: \"Papel de Parede\",\n    description: \"Catálogo interativo com mais de 3000 texturas em 28 categorias\",\n    features: [\n      \"Mais de 3000 texturas\",\n      \"28 categorias diferentes\",\n      \"Visualização em tamanho real\",\n      \"Seleção múltipla\",\n      \"Medidas personalizadas\"\n    ],\n    icon: <Wallpaper className=\"w-8 h-8\" />,\n    color: \"from-[#FF6347] to-[#FFD700]\",\n    detailsLink: \"/servico-papel-parede\"\n  },\n  {\n    id: \"telas-artisticas\",\n    title: \"Telas Artísticas\",\n    description: \"Telas canvas personalizadas para decoração e arte\",\n    features: [\n      \"Canvas de alta qualidade\",\n      \"Impressão artística\",\n      \"Diversos tamanhos\",\n      \"Molduras incluídas\",\n      \"Resistente ao tempo\"\n    ],\n    icon: <Image className=\"w-8 h-8\" />,\n    color: \"from-[#9370DB] to-[#FF6347]\",\n    detailsLink: \"/servico-telas-artisticas\"\n  },\n  {\n    id: \"autocolantes\",\n    title: \"Autocolantes e Etiquetas\",\n    description: \"Autocolantes e etiquetas com corte de contorno personalizado\",\n    features: [\n      \"Corte de contorno preciso\",\n      \"Materiais duradouros\",\n      \"Design personalizado\",\n      \"Aplicação fácil\",\n      \"Resistentes a intempéries\"\n    ],\n    icon: <Sticker className=\"w-8 h-8\" />,\n    color: \"from-[#32CD32] to-[#20B2AA]\",\n    detailsLink: \"/servico-autocolantes\"\n  },\n  {\n    id: \"decoracao-viaturas\",\n    title: \"Decoração de Viaturas\",\n    description: \"Personalização completa de veículos particulares e comerciais\",\n    features: [\n      \"Viaturas particulares\",\n      \"Veículos comerciais\",\n      \"Máquinas de obras\",\n      \"Camiões e pesados\",\n      \"Motociclos\",\n      \"Viaturas de competição\"\n    ],\n    icon: <Car className=\"w-8 h-8\" />,\n    color: \"from-[#FFD700] to-[#FF6347]\",\n    detailsLink: \"/servico-decoracao-viaturas\"\n  },\n  {\n    id: \"espacos-comerciais\",\n    title: \"Decoração de Espaços Comerciais\",\n    description: \"Decoração e sinalização para espaços comerciais e empresariais\",\n    features: [\n      \"Montras atrativas\",\n      \"Painéis informativos\",\n      \"Reclames luminosos\",\n      \"Bandeiras e totens\",\n      \"Sinalização interior\",\n      \"Fachadas comerciais\"\n    ],\n    icon: <Building className=\"w-8 h-8\" />,\n    color: \"from-[#4169E1] to-[#9370DB]\",\n    detailsLink: \"/servico-espacos-comerciais\"\n  },\n  {\n    id: \"peliculas-protecao-solar\",\n    title: \"Películas de Proteção Solar\",\n    description: \"Películas para vidros que proporcionam conforto térmico e proteção UV\",\n    features: [\n      \"Proteção UV até 99%\",\n      \"Redução de calor até 78%\",\n      \"Economia de energia\",\n      \"Maior privacidade\",\n      \"Proteção de mobiliário\",\n      \"Conforto térmico\"\n    ],\n    icon: <Shield className=\"w-8 h-8\" />,\n    color: \"from-[#FFA500] to-[#FFD700]\",\n    detailsLink: \"/servico-peliculas-protecao-solar\"\n  }\n];\n\nexport default function Servicos() {\n  return (\n    <div className=\"min-h-screen bg-[#0a0a0a] text-white\">\n      <Navigation />\n      \n      {/* Hero Section */}\n      <section className=\"bg-gradient-to-br from-brand-yellow/10 via-brand-turquoise/5 to-brand-coral/10 py-20 mt-16\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"max-w-4xl mx-auto text-center\">\n            <h1 className=\"text-4xl md:text-6xl font-bold mb-4\">\n              Nossos <span className=\"text-brand-yellow\">Serviços</span>\n            </h1>\n            <p className=\"text-xl text-muted-foreground mb-6 leading-relaxed\">\n              Com 40 anos de experiência, oferecemos soluções completas em comunicação visual e publicidade, \n              desde impressão digital até decoração de espaços comerciais.\n            </p>\n          </div>\n        </div>\n      </section>\n\n      {/* Services Grid */}\n      <section className=\"pt-0 pb-8\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"max-w-6xl mx-auto\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8\">\n            {services.map((service, index) => (\n              <Card key={service.id} className=\"bg-[#111111] border-[#333] hover:border-[#FFD700] transition-all duration-300 group\">\n                <CardContent className=\"p-4 sm:p-6 md:p-8\">\n                  <div className=\"flex flex-col sm:flex-row items-start gap-4 sm:gap-6\">\n                    <div className={`w-12 h-12 sm:w-16 sm:h-16 bg-gradient-to-br ${service.color} rounded-xl flex items-center justify-center text-black flex-shrink-0`}>\n                      {service.icon}\n                    </div>\n                    \n                    <div className=\"flex-1 min-w-0 w-full\">\n                      <h3 className=\"text-xl sm:text-2xl font-bold mb-3 group-hover:text-[#FFD700] transition-colors\">\n                        {service.title}\n                      </h3>\n                      \n                      <p className=\"text-gray-400 mb-4 leading-relaxed text-sm sm:text-base\">\n                        {service.description}\n                      </p>\n                      \n                      <ul className=\"space-y-2 mb-6\">\n                        {service.features.map((feature, featureIndex) => (\n                          <li key={featureIndex} className=\"flex items-start text-xs sm:text-sm text-gray-300\">\n                            <div className=\"w-1.5 h-1.5 bg-[#FFD700] rounded-full mr-3 flex-shrink-0 mt-2\"></div>\n                            <span className=\"break-words\">{feature}</span>\n                          </li>\n                        ))}\n                      </ul>\n                      \n                      <div className=\"flex flex-col sm:flex-row gap-3\">\n                        <Button asChild className=\"bg-gradient-to-r from-[#FFD700] to-[#20B2AA] text-black font-bold hover:opacity-90 transition-opacity\">\n                          <Link href=\"/contactos#formulario\">Solicitar Orçamento</Link>\n                        </Button>\n                        <Button asChild variant=\"outline\" className=\"border-[#333] text-gray-300 hover:border-[#FFD700] hover:text-[#FFD700]\">\n                          <Link href={service.detailsLink || \"#\"}>\n                            Ver Mais\n                            <ArrowRight className=\"w-4 h-4 ml-2\" />\n                          </Link>\n                        </Button>\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* CTA Section */}\n      <section className=\"py-16 px-4 bg-[#111111]\">\n        <div className=\"max-w-4xl mx-auto text-center\">\n          <h2 className=\"text-3xl font-bold mb-4\">\n            Pronto para dar vida ao seu projeto?\n          </h2>\n          <p className=\"text-gray-300 mb-8 text-lg\">\n            Entre em contacto connosco e descubra como podemos transformar as suas ideias em realidade.\n          </p>\n          \n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n            <Button asChild className=\"bg-gradient-to-r from-[#FFD700] to-[#20B2AA] text-black font-bold hover:opacity-90 transition-opacity\">\n              <Link href=\"/contactos#formulario\">Iniciar Meu Projeto</Link>\n            </Button>\n            <Button asChild variant=\"outline\" className=\"border-[#20B2AA] text-[#20B2AA] hover:bg-[#20B2AA] hover:text-black\">\n              <Link href=\"/contactos#formulario\">Falar com Especialista</Link>\n            </Button>\n          </div>\n        </div>\n      </section>\n\n      <Footer />\n    </div>\n  );\n}","size_bytes":9083},"client/src/pages/sobre.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Link } from \"wouter\";\nimport Navigation from \"@/components/navigation\";\nimport Footer from \"@/components/footer\";\nimport { SEOHead } from \"@/components/seo-head\";\nimport { usePageConfig } from \"@/hooks/use-page-config\";\nimport sobreImage from \"@assets/Create a colorful im_1755881158641.png\";\nimport carlosCruzImage from \"@/assets/carlos-cruz.webp\";\n\nexport default function Sobre() {\n  const { getConfig, isLoading } = usePageConfig('about');\n\n  // Get content from config or use defaults\n  const pageTitle = getConfig('hero', 'title', 'Sobre Nós');\n  const heroDescription = getConfig('hero', 'description', 'Conhece a história por trás da Domrealce e a experiência de Carlos Cruz em 40 anos dedicados à comunicação visual e publicidade.');\n  const carlosTitle = getConfig('carlos', 'title', 'Carlos Cruz');\n  const carlosSubtitle = getConfig('carlos', 'subtitle', 'Fundador & Diretor Criativo');\n  const carlosStoryTitle = getConfig('carlos', 'story_title', 'A História do Carlos Cruz');\n  const carlosStory1 = getConfig('carlos', 'story_1', 'Com Experiência no setor da publicidade e comunicação visual, Carlos Cruz é o fundador e alma da Domrealce. A sua jornada começou numa época em que a criatividade e o trabalho manual eram a base de tudo.');\n  const carlosStory2 = getConfig('carlos', 'story_2', 'Ao longo dos anos, Carlos especializou-se em várias áreas da publicidade, incluindo decoração de espaços comerciais, serigrafia, tampografia e decoração de viaturas de competição. Esta vasta experiência permite-lhe compreender as necessidades específicas de cada cliente.');\n  const carlosStory3 = getConfig('carlos', 'story_3', 'Atualmente, a Domrealce foca-se na área de impressão digital e decoração, mantendo sempre os valores fundamentais de qualidade, pontualidade e honestidade que sempre caracterizaram o trabalho de Carlos Cruz.');\n  const companyText1 = getConfig('company', 'text_1', 'A Domrealce é uma empresa pequena, com um atelier que privilegia o atendimento personalizado. Esta abordagem permite-nos dedicar toda a atenção necessária a cada projeto, garantindo resultados únicos e adaptados às necessidades específicas de cada cliente.');\n  const companyText2 = getConfig('company', 'text_2', 'Ao contrário das grandes empresas, oferecemos um serviço próximo e humano, onde cada cliente é tratado de forma individual. Esta proximidade permite-nos compreender melhor as suas necessidades e entregar soluções verdadeiramente personalizadas.');\n  const companyQuote = getConfig('company', 'quote', 'Na Domrealce, não somos apenas um fornecedor, somos um parceiro criativo.');\n\n  return (\n    <div className=\"min-h-screen bg-[#0a0a0a] text-white\">\n      <SEOHead \n        title=\"Sobre Nós - Carlos Cruz e 40 Anos de Comunicação Visual\"\n        description=\"Conheça a história da DOMREALCE e Carlos Cruz, com 40 anos de experiência em comunicação visual, impressão digital e publicidade em Lisboa.\"\n        keywords=\"Carlos Cruz, DOMREALCE história, comunicação visual, 40 anos experiência, empresa publicidade\"\n        canonicalUrl=\"https://www.domrealce.com/sobre\"\n      />\n      <Navigation />\n\n      {/* Hero Section */}\n      <section className=\"pt-32 pb-12 px-4\">\n        <div className=\"max-w-4xl mx-auto text-center\">\n          <h1 className=\"text-4xl md:text-6xl font-bold mb-6\">\n            {pageTitle}\n          </h1>\n          <p className=\"text-xl text-gray-300 max-w-3xl mx-auto\">\n            {heroDescription}\n          </p>\n        </div>\n      </section>\n\n      {/* Carlos Cruz Section */}\n      <section className=\"pt-0 pb-8 px-4\">\n        <div className=\"max-w-6xl mx-auto\">\n          <div className=\"grid md:grid-cols-2 gap-12 items-center\">\n            <div>\n              <h2 className=\"text-3xl font-bold mb-4 text-[#FFD700]\">{carlosTitle}</h2>\n              <p className=\"text-lg text-gray-300 mb-6\">{carlosSubtitle}</p>\n\n              <h3 className=\"text-2xl font-bold mb-4\">{carlosStoryTitle}</h3>\n\n              <div className=\"space-y-4 text-gray-300\">\n                <p>{carlosStory1}</p>\n                <p>{carlosStory2}</p>\n                <p>{carlosStory3}</p>\n              </div>\n            </div>\n\n            {/* Imagem Ajustada sem caixilho preto */}\n            <div className=\"relative\">\n              <img \n                src={carlosCruzImage} \n                alt=\"Carlos Cruz - Fundador da DOMREALCE\"\n                className=\"w-full h-auto max-h-[500px] object-contain rounded-lg shadow-2xl\"\n                loading=\"lazy\"\n              />\n              <div className=\"absolute bottom-4 left-4 right-4 text-white text-center\">\n                <h4 className=\"text-xl font-bold mb-1\">Carlos Cruz</h4>\n                <p className=\"text-sm opacity-90\">Responsável de produção</p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n\n      {/* Values Section */}\n      <section className=\"pt-14 pb-8 px-4 bg-black\">\n        <div className=\"max-w-6xl mx-auto\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-3xl font-bold mb-4\">Nossos Valores</h2>\n            <p className=\"text-gray-300\">Os princípios que guiam o nosso trabalho.</p>\n          </div>\n\n          <div className=\"grid md:grid-cols-3 gap-8\">\n            <Card className=\"bg-[#0a0a0a] border-[#333] hover:border-[#FFD700] transition-colors\">\n              <CardContent className=\"p-6 text-center\">\n                <div className=\"w-16 h-16 bg-gradient-to-br from-[#FFD700] to-[#20B2AA] rounded-full mx-auto mb-4 flex items-center justify-center\">\n                  <span className=\"text-2xl\">⭐</span>\n                </div>\n                <h3 className=\"text-xl font-bold mb-3 text-[#FFD700]\">Qualidade</h3>\n                <p className=\"text-gray-300\">\n                  Compromisso com a excelência em cada projeto, utilizando os melhores materiais e técnicas.\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-[#0a0a0a] border-[#333] hover:border-[#20B2AA] transition-colors\">\n              <CardContent className=\"p-6 text-center\">\n                <div className=\"w-16 h-16 bg-gradient-to-br from-[#20B2AA] to-[#4169E1] rounded-full mx-auto mb-4 flex items-center justify-center\">\n                  <span className=\"text-2xl\">⏰</span>\n                </div>\n                <h3 className=\"text-xl font-bold mb-3 text-[#20B2AA]\">Pontualidade</h3>\n                <p className=\"text-gray-300\">\n                  Respeitamos os prazos estabelecidos e entregamos sempre dentro do tempo combinado.\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-[#0a0a0a] border-[#333] hover:border-[#FF6347] transition-colors\">\n              <CardContent className=\"p-6 text-center\">\n                <div className=\"w-16 h-16 bg-gradient-to-br from-[#FF6347] to-[#FFD700] rounded-full mx-auto mb-4 flex items-center justify-center\">\n                  <span className=\"text-2xl\">🤝</span>\n                </div>\n                <h3 className=\"text-xl font-bold mb-3 text-[#FF6347]\">Honestidade</h3>\n                <p className=\"text-gray-300\">\n                  Transparência total nos orçamentos e processos, construindo relações de confiança duradouras.\n                </p>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </section>\n\n      {/* Company Approach Section */}\n      <section className=\"py-16 px-4 bg-[#0a0a0a]\">\n        <div className=\"max-w-4xl mx-auto\">\n          <div className=\"text-center mb-12\">\n            <div className=\"space-y-6 text-gray-300\">\n              <p className=\"text-lg\">{companyText1}</p>\n              <p className=\"text-lg\">{companyText2}</p>\n            </div>\n\n            <div className=\"bg-gradient-to-r from-[#FFD700] to-[#20B2AA] p-8 rounded-lg mt-12\">\n              <blockquote className=\"text-xl font-bold text-black italic\">\n                \"{companyQuote}\"\n              </blockquote>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* CTA Section */}\n      <section className=\"py-16 px-4 bg-black\">\n        <div className=\"max-w-4xl mx-auto text-center\">\n          <h2 className=\"text-3xl font-bold mb-4\">Pronto para trabalhar connosco?</h2>\n          <p className=\"text-gray-300 mb-8 text-lg\">\n            Descubra como a nossa experiência e dedicação podem transformar o seu projeto em realidade.\n          </p>\n\n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n            <Button asChild className=\"bg-gradient-to-r from-[#FFD700] to-[#20B2AA] text-black font-bold hover:opacity-90 transition-opacity\">\n              <Link href=\"/contactos\">Contactar-nos</Link>\n            </Button>\n            <Button asChild variant=\"outline\" className=\"border-[#FFD700] text-[#FFD700] hover:bg-[#FFD700] hover:text-black\">\n              <Link href=\"/contactos\">Pedir Orçamento</Link>\n            </Button>\n          </div>\n        </div>\n      </section>\n\n      <Footer />\n    </div>\n  );\n}","size_bytes":9210},"client/src/pages/termos-condicoes.tsx":{"content":"import Navigation from \"@/components/navigation\";\nimport Footer from \"@/components/footer\";\n\nexport default function TermosCondicoes() {\n  return (\n    <div className=\"min-h-screen bg-[#0a0a0a] text-white\">\n      <Navigation />\n      \n      <div className=\"pt-32 pb-16 px-4\">\n        <div className=\"max-w-4xl mx-auto\">\n          <h1 className=\"text-4xl md:text-5xl font-bold mb-8 text-center\">\n            Termos e Condições\n          </h1>\n          \n          <div className=\"prose prose-invert prose-lg max-w-none\">\n            <p className=\"text-gray-300 mb-8 text-center\">\n              Última atualização: Agosto de 2025\n            </p>\n\n            <section className=\"mb-8\">\n              <h2 className=\"text-2xl font-bold mb-4 text-[#FFD700]\">1. Âmbito de Aplicação</h2>\n              <p className=\"text-gray-300 leading-relaxed mb-4\">\n                Os presentes termos e condições aplicam-se a todos os serviços prestados pela \n                DOMREALCE, incluindo design gráfico, impressão digital, decoração de viaturas, \n                papel de parede personalizado e outros serviços de comunicação visual.\n              </p>\n            </section>\n\n            <section className=\"mb-8\">\n              <h2 className=\"text-2xl font-bold mb-4 text-[#FFD700]\">2. Serviços Prestados</h2>\n              <p className=\"text-gray-300 leading-relaxed mb-4\">\n                A DOMREALCE presta serviços nas seguintes áreas:\n              </p>\n              <ul className=\"text-gray-300 space-y-2 ml-6\">\n                <li>• Design gráfico e criação de identidade visual</li>\n                <li>• Impressão digital em diversos materiais</li>\n                <li>• Decoração de viaturas e frotas comerciais</li>\n                <li>• Papel de parede personalizado</li>\n                <li>• Telas artísticas e canvas</li>\n                <li>• Autocolantes e etiquetas</li>\n                <li>• Decoração de espaços comerciais</li>\n              </ul>\n            </section>\n\n            <section className=\"mb-8\">\n              <h2 className=\"text-2xl font-bold mb-4 text-[#FFD700]\">3. Orçamentos e Contratação</h2>\n              <p className=\"text-gray-300 leading-relaxed mb-4\">\n                Todos os orçamentos são gratuitos e válidos por 30 dias. A contratação dos \n                serviços implica a aceitação expressa destes termos e condições. Os preços \n                apresentados incluem IVA à taxa legal em vigor.\n              </p>\n            </section>\n\n            <section className=\"mb-8\">\n              <h2 className=\"text-2xl font-bold mb-4 text-[#FFD700]\">4. Pagamento</h2>\n              <p className=\"text-gray-300 leading-relaxed mb-4\">\n                As condições de pagamento são acordadas caso a caso, podendo incluir:\n              </p>\n              <ul className=\"text-gray-300 space-y-2 ml-6\">\n                <li>• Pagamento antecipado de 50% para projetos de grande dimensão</li>\n                <li>• Pagamento à entrega para projetos standard</li>\n                <li>• Pagamento a 30 dias para clientes corporativos (sujeito a aprovação)</li>\n              </ul>\n            </section>\n\n            <section className=\"mb-8\">\n              <h2 className=\"text-2xl font-bold mb-4 text-[#FFD700]\">5. Prazos de Execução</h2>\n              <p className=\"text-gray-300 leading-relaxed mb-4\">\n                Os prazos de execução variam conforme o tipo de serviço e são sempre acordados \n                previamente com o cliente. A DOMREALCE compromete-se a cumprir os prazos estabelecidos, \n                salvo circunstâncias excecionais ou casos de força maior.\n              </p>\n            </section>\n\n            <section className=\"mb-8\">\n              <h2 className=\"text-2xl font-bold mb-4 text-[#FFD700]\">6. Propriedade Intelectual</h2>\n              <p className=\"text-gray-300 leading-relaxed mb-4\">\n                A propriedade intelectual dos trabalhos criados é transferida para o cliente \n                mediante o pagamento integral do serviço. A DOMREALCE reserva o direito de \n                utilizar os trabalhos realizados no seu portfólio, salvo acordo em contrário.\n              </p>\n            </section>\n\n            <section className=\"mb-8\">\n              <h2 className=\"text-2xl font-bold mb-4 text-[#FFD700]\">7. Produtos Personalizados e Trocas</h2>\n              <p className=\"text-gray-300 leading-relaxed mb-4\">\n                <strong>IMPORTANTE:</strong> Devido à natureza personalizada dos nossos produtos, aplicam-se as seguintes condições:\n              </p>\n              <ul className=\"text-gray-300 space-y-3 ml-6 mb-4\">\n                <li>• <strong>Produtos personalizados:</strong> Não são aceites trocas ou devoluções de produtos personalizados com logótipos, textos ou designs específicos do cliente</li>\n                <li>• <strong>Papel de parede personalizado:</strong> Uma vez cortado nas medidas solicitadas, não pode ser trocado ou devolvido</li>\n                <li>• <strong>Decoração de viaturas:</strong> Serviços já aplicados não são reversíveis nem reembolsáveis</li>\n                <li>• <strong>Impressões personalizadas:</strong> Produtos com design específico do cliente não podem ser reutilizados</li>\n              </ul>\n              <p className=\"text-gray-300 leading-relaxed mb-4\">\n                O cliente deve verificar cuidadosamente todos os detalhes (medidas, cores, textos, logótipos) \n                antes da aprovação final para produção.\n              </p>\n            </section>\n\n            <section className=\"mb-8\">\n              <h2 className=\"text-2xl font-bold mb-4 text-[#FFD700]\">8. Garantias e Defeitos</h2>\n              <p className=\"text-gray-300 leading-relaxed mb-4\">\n                A DOMREALCE garante:\n              </p>\n              <ul className=\"text-gray-300 space-y-2 ml-6 mb-4\">\n                <li>• Qualidade dos materiais utilizados</li>\n                <li>• Execução profissional dos trabalhos</li>\n                <li>• Correção gratuita de defeitos de fabrico no prazo de 30 dias</li>\n                <li>• Substituição gratuita em caso de erro da nossa responsabilidade</li>\n              </ul>\n              <p className=\"text-gray-300 leading-relaxed mb-4\">\n                <strong>Não cobertos pela garantia:</strong> Erros resultantes de informações incorretas \n                fornecidas pelo cliente ou aprovações de prova final incorretas.\n              </p>\n            </section>\n\n            <section className=\"mb-8\">\n              <h2 className=\"text-2xl font-bold mb-4 text-[#FFD700]\">9. Responsabilidades do Cliente</h2>\n              <p className=\"text-gray-300 leading-relaxed mb-4\">\n                O cliente é responsável por:\n              </p>\n              <ul className=\"text-gray-300 space-y-2 ml-6 mb-4\">\n                <li>• Fornecer informações precisas e completas (medidas, cores, textos)</li>\n                <li>• Verificar e aprovar todas as provas antes da produção</li>\n                <li>• Confirmar que possui direitos de utilização de logótipos e imagens fornecidos</li>\n                <li>• Aceitar que produtos personalizados não podem ser trocados ou devolvidos</li>\n                <li>• Disponibilizar acesso adequado para instalação/aplicação quando necessário</li>\n              </ul>\n              <p className=\"text-gray-300 leading-relaxed mb-4\">\n                A DOMREALCE não se responsabiliza por erros resultantes de informações \n                incorretas fornecidas pelo cliente ou por direitos de autor de materiais fornecidos.\n              </p>\n            </section>\n\n            <section className=\"mb-8\">\n              <h2 className=\"text-2xl font-bold mb-4 text-[#FFD700]\">10. Direito de Retratação</h2>\n              <p className=\"text-gray-300 leading-relaxed mb-4\">\n                De acordo com o Decreto-Lei nº 24/2014, o direito de retratação de 14 dias \n                <strong>não se aplica</strong> aos seguintes serviços da DOMREALCE:\n              </p>\n              <ul className=\"text-gray-300 space-y-2 ml-6 mb-4\">\n                <li>• Produtos personalizados com especificações do cliente</li>\n                <li>• Papel de parede cortado em medidas específicas</li>\n                <li>• Serviços de aplicação já executados</li>\n                <li>• Produtos com logótipos ou designs personalizados</li>\n              </ul>\n            </section>\n\n            <section className=\"mb-8\">\n              <h2 className=\"text-2xl font-bold mb-4 text-[#FFD700]\">11. Lei Aplicável</h2>\n              <p className=\"text-gray-300 leading-relaxed mb-4\">\n                Os presentes termos e condições regem-se pela lei portuguesa. \n                Qualquer litígio será resolvido pelos tribunais competentes de Portugal.\n              </p>\n            </section>\n\n            <section className=\"mb-8\">\n              <h2 className=\"text-2xl font-bold mb-4 text-[#FFD700]\">12. Contactos</h2>\n              <p className=\"text-gray-300 leading-relaxed mb-4\">\n                Para esclarecimentos sobre estes termos e condições:\n              </p>\n              <ul className=\"text-gray-300 space-y-2 ml-6\">\n                <li>• Email: info@domrealce.com</li>\n                <li>• Telefone: +351 930 682 725</li>\n                <li>• Website: www.domrealce.com</li>\n              </ul>\n            </section>\n          </div>\n        </div>\n      </div>\n\n      <Footer />\n    </div>\n  );\n}","size_bytes":9630},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"HOSTINGER_DOMAIN_SETUP.md":{"content":"# 🌐 Configuração do Domínio www.domrealce.com na Hostinger\n\n## 📋 **PASSO A PASSO COMPLETO**\n\n### 1. **Fazer Deploy no Replit**\n1. Clique no botão **\"Deploy\"** no canto superior direito do Replit\n2. Selecione **\"Static Site\"** ou **\"Web Service\"** \n3. Configure as definições básicas e faça deploy\n4. Anote o URL gerado pelo Replit (ex: `domrealce.replit.app`)\n\n### 2. **Configurar DNS na Hostinger**\nAcesse o painel da Hostinger → **Domínios** → **domrealce.com** → **Gerir DNS**\n\n**Adicionar/Editar estes registos DNS:**\n\n```\nTipo: CNAME\nNome: www\nDestino: [SEU_URL_REPLIT].replit.app\nTTL: 3600\n\nTipo: A (Redirect)  \nNome: @ (root domain)\nDestino: www.domrealce.com\nTTL: 3600\n```\n\n### 3. **Configurar no Replit Deployments**\n1. No dashboard do Replit, vá para **Deployments**\n2. Clique no seu deployment\n3. Vá para **Settings** → **Custom Domain**\n4. Adicione: `www.domrealce.com`\n5. Aguarde a verificação SSL (pode demorar até 24h)\n\n### 4. **Verificações de Funcionamento**\n\n**Teste os URLs:**\n- ✅ `https://www.domrealce.com` - Site principal\n- ✅ `https://domrealce.com` - Deve redirecionar para www\n- ✅ Certificado SSL ativo (ícone do cadeado)\n\n### 5. **Configurações Adicionais (Opcional)**\n\n**Email Forwarding na Hostinger:**\n```\ninfo@domrealce.com → [seu-email-atual]\ncontacto@domrealce.com → [seu-email-atual]\n```\n\n**Google Search Console:**\n1. Acesse: https://search.google.com/search-console\n2. Adicione propriedade: `https://www.domrealce.com`\n3. Verifique com meta tag ou DNS\n4. Submeta sitemap: `https://www.domrealce.com/sitemap.xml`\n\n### 6. **Monitorização**\n- Verifique funcionamento após 24-48h\n- Teste velocidade: https://pagespeed.web.dev/\n- Verifique SEO: https://search.google.com/test/mobile-friendly\n\n---\n\n## 🆘 **RESOLUÇÃO DE PROBLEMAS**\n\n**Problema:** Site não carrega\n**Solução:** Verificar se DNS propagou (pode demorar 24-48h)\n\n**Problema:** SSL não funciona  \n**Solução:** Aguardar configuração automática do Replit\n\n**Problema:** Emails não funcionam\n**Solução:** Configurar Email Forwarding na Hostinger\n\n---\n\n## 📞 **CONTACTOS DE APOIO**\n- **Hostinger Support**: Via painel de controlo\n- **Replit Support**: support@replit.com","size_bytes":2221},"client/src/components/seo-head.tsx":{"content":"import { useEffect } from 'react';\n\ninterface SEOHeadProps {\n  title?: string;\n  description?: string;\n  keywords?: string;\n  canonicalUrl?: string;\n  ogImage?: string;\n}\n\nexport function SEOHead({ \n  title, \n  description, \n  keywords,\n  canonicalUrl,\n  ogImage = \"https://www.domrealce.com/og-image.jpg\"\n}: SEOHeadProps) {\n  useEffect(() => {\n    // Update page title\n    if (title) {\n      document.title = `${title} | DOMREALCE`;\n    }\n\n    // Update meta description\n    if (description) {\n      let metaDesc = document.querySelector('meta[name=\"description\"]');\n      if (!metaDesc) {\n        metaDesc = document.createElement('meta');\n        metaDesc.setAttribute('name', 'description');\n        document.head.appendChild(metaDesc);\n      }\n      metaDesc.setAttribute('content', description);\n    }\n\n    // Update meta keywords\n    if (keywords) {\n      let metaKeywords = document.querySelector('meta[name=\"keywords\"]');\n      if (!metaKeywords) {\n        metaKeywords = document.createElement('meta');\n        metaKeywords.setAttribute('name', 'keywords');\n        document.head.appendChild(metaKeywords);\n      }\n      metaKeywords.setAttribute('content', keywords);\n    }\n\n    // Update canonical URL\n    if (canonicalUrl) {\n      let canonicalLink = document.querySelector('link[rel=\"canonical\"]');\n      if (!canonicalLink) {\n        canonicalLink = document.createElement('link');\n        canonicalLink.setAttribute('rel', 'canonical');\n        document.head.appendChild(canonicalLink);\n      }\n      canonicalLink.setAttribute('href', canonicalUrl);\n    }\n\n    // Update Open Graph tags\n    if (title) {\n      let ogTitle = document.querySelector('meta[property=\"og:title\"]');\n      if (!ogTitle) {\n        ogTitle = document.createElement('meta');\n        ogTitle.setAttribute('property', 'og:title');\n        document.head.appendChild(ogTitle);\n      }\n      ogTitle.setAttribute('content', title);\n    }\n\n    if (description) {\n      let ogDesc = document.querySelector('meta[property=\"og:description\"]');\n      if (!ogDesc) {\n        ogDesc = document.createElement('meta');\n        ogDesc.setAttribute('property', 'og:description');\n        document.head.appendChild(ogDesc);\n      }\n      ogDesc.setAttribute('content', description);\n    }\n\n    if (canonicalUrl) {\n      let ogUrl = document.querySelector('meta[property=\"og:url\"]');\n      if (!ogUrl) {\n        ogUrl = document.createElement('meta');\n        ogUrl.setAttribute('property', 'og:url');\n        document.head.appendChild(ogUrl);\n      }\n      ogUrl.setAttribute('content', canonicalUrl);\n    }\n\n  }, [title, description, keywords, canonicalUrl, ogImage]);\n\n  return null; // This component doesn't render anything\n}","size_bytes":2703},"server/db.ts":{"content":"import { drizzle } from \"drizzle-orm/neon-http\";\nimport { neon } from \"@neondatabase/serverless\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL environment variable is not set\");\n}\n\nconst sql = neon(process.env.DATABASE_URL);\nexport const db = drizzle(sql);","size_bytes":277},"client/src/config/site-config.ts":{"content":"// CONFIGURAÇÕES DO SITE DOMREALCE\n// Edite os valores abaixo para personalizar textos, cores e tamanhos\n\nexport const siteConfig = {\n  // INFORMAÇÕES BÁSICAS\n  empresa: {\n    nome: \"DOMREALCE\",\n    slogan: \"Comunicação Visual & Impressão Digital\",\n    telefone: \"+351 123 456 789\",\n    email: \"info@domrealce.com\",\n    endereco: \"Rua Example, 123, Porto, Portugal\"\n  },\n\n  // TEXTOS DA PÁGINA INICIAL\n  homepage: {\n    heroTitulo: \"Comunicação Visual\",\n    heroSubtitulo: \"& Impressão Digital\",\n    heroDescricao: \"Transformamos as suas ideias em comunicação visual de excelência. Design gráfico, impressão digital, papel de parede e soluções personalizadas para empresas e particulares.\",\n    botaoPrincipal: \"Explorar Serviços\",\n    botaoSecundario: \"Ver Portfolio\"\n  },\n\n  // CORES PRINCIPAIS (formato HSL)\n  cores: {\n    amarelo: \"47 96% 56%\",      // brand-yellow\n    turquesa: \"171 77% 64%\",    // brand-turquoise  \n    azul: \"217 71% 53%\",        // brand-blue\n    coral: \"14 86% 65%\",        // brand-coral\n    escuro: \"217 33% 17%\"       // brand-dark\n  },\n\n  // TAMANHOS DE TEXTO\n  tamanhos: {\n    tituloGrande: \"text-4xl md:text-6xl\",  // Títulos principais\n    tituloMedio: \"text-2xl md:text-4xl\",   // Títulos de seção\n    textoPequeno: \"text-sm\",               // Textos pequenos\n    textoNormal: \"text-base\",              // Texto normal\n    textoGrande: \"text-lg\"                 // Texto destacado\n  },\n\n  // IMAGENS PRINCIPAIS (URLs)\n  imagens: {\n    heroBackground: \"https://images.unsplash.com/photo-1496442226666-8d4d0e62e6e9?ixlib=rb-4.0.3&auto=format&fit=crop&w=1920&h=1080\",\n    logoEmpresa: \"/logo-domrealce.png\",\n    imagemSobre: \"https://images.unsplash.com/photo-1542744173-8e7e53415bb0?ixlib=rb-4.0.3&auto=format&fit=crop&w=1200&h=800\"\n  },\n\n  // REDES SOCIAIS\n  social: {\n    facebook: \"https://facebook.com/domrealce\",\n    instagram: \"https://instagram.com/domrealce\", \n    linkedin: \"https://linkedin.com/company/domrealce\",\n    whatsapp: \"https://wa.me/351930682725\"\n  },\n\n  // CONFIGURAÇÕES DE CONTACTO\n  contacto: {\n    mostrarWhatsapp: true,\n    mostrarTelefone: true,\n    mostrarEmail: true,\n    horarioFuncionamento: \"Seg-Sex: 9h-18h\"\n  }\n};\n\n// UTILITÁRIO PARA OBTER CORES CSS\nexport const getCSSColor = (cor: keyof typeof siteConfig.cores) => {\n  return `hsl(${siteConfig.cores[cor]})`;\n};","size_bytes":2357},"client/src/pages/servico-peliculas-protecao-solar.tsx":{"content":"import Navigation from \"@/components/navigation\";\nimport Footer from \"@/components/footer\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Link } from \"wouter\";\nimport { \n  Shield, \n  CheckCircle, \n  Star, \n  ArrowRight, \n  Sun,\n  Home,\n  Building,\n  Thermometer,\n  Eye,\n  Zap,\n  Award\n} from \"lucide-react\";\nimport buildingImage from \"@assets/generated_images/Building_with_solar_films_981bb10c.png\";\n\nexport default function ServicoPeliculasProtecaoSolar() {\n  const benefits = [\n    {\n      icon: <Sun className=\"w-6 h-6\" />,\n      title: \"Proteção UV\",\n      description: \"Bloqueia até 99% dos raios UV prejudiciais, protegendo móveis e pessoas\"\n    },\n    {\n      icon: <Thermometer className=\"w-6 h-6\" />,\n      title: \"Controlo Térmico\",\n      description: \"Reduz o calor interior até 78%, diminuindo custos de climatização\"\n    },\n    {\n      icon: <Eye className=\"w-6 h-6\" />,\n      title: \"Privacidade\",\n      description: \"Oferece privacidade sem bloquear completamente a luz natural\"\n    },\n    {\n      icon: <Zap className=\"w-6 h-6\" />,\n      title: \"Economia de Energia\",\n      description: \"Reduz significativamente os custos com ar condicionado e aquecimento\"\n    },\n    {\n      icon: <Shield className=\"w-6 h-6\" />,\n      title: \"Proteção de Mobiliário\",\n      description: \"Evita o desbotamento de móveis, tapetes e obras de arte\"\n    },\n    {\n      icon: <Award className=\"w-6 h-6\" />,\n      title: \"Maior Conforto\",\n      description: \"Elimina reflexos e pontos de calor excessivo no interior\"\n    }\n  ];\n\n\n  const peliculaEspelhada = {\n    name: \"Película Espelhada\",\n    description: \"Efeito espelho exterior mantendo visibilidade interior\",\n    protecao: \"99% UV\",\n    reducaoCalor: \"60-70%\",\n    privacidade: \"Alta (dia)\",\n    applications: [\"Escritórios\", \"Lojas\", \"Hospitais\", \"Edifícios comerciais\", \"Fachadas\"]\n  };\n\n  const aplicacoes = [\n    {\n      category: \"Residencial\",\n      icon: <Home className=\"w-6 h-6\" />,\n      items: [\"Janelas de sala\", \"Quartos\", \"Cozinhas\", \"Casas de banho\", \"Marquises\"]\n    },\n    {\n      category: \"Comercial\",\n      icon: <Building className=\"w-6 h-6\" />,\n      items: [\"Escritórios\", \"Lojas\", \"Restaurantes\", \"Hotéis\", \"Hospitais\"]\n    },\n    {\n      category: \"Industrial\",\n      icon: <Shield className=\"w-6 h-6\" />,\n      items: [\"Armazéns\", \"Fábricas\", \"Centros logísticos\", \"Laboratórios\", \"Salas de servidores\"]\n    }\n  ];\n\n  const process = [\n    {\n      step: \"01\",\n      title: \"Avaliação no Local\",\n      description: \"Visitamos o local para avaliar as necessidades e medir as superfícies\"\n    },\n    {\n      step: \"02\", \n      title: \"Seleção da Película\",\n      description: \"Recomendamos a película ideal baseada na orientação solar e necessidades\"\n    },\n    {\n      step: \"03\",\n      title: \"Preparação das Superfícies\", \n      description: \"Limpeza profissional dos vidros para garantir aderência perfeita\"\n    },\n    {\n      step: \"04\",\n      title: \"Aplicação Profissional\",\n      description: \"Instalação por técnicos certificados com ferramentas especializadas\"\n    },\n    {\n      step: \"05\",\n      title: \"Controlo Final\",\n      description: \"Inspeção de qualidade e orientações de manutenção\"\n    }\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-black text-white\">\n      <Navigation />\n      \n      {/* Hero Section */}\n      <section className=\"pt-32 pb-16 bg-gradient-to-br from-black via-blue-900/20 to-black\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"max-w-4xl mx-auto text-center\">\n            <Badge className=\"bg-blue-600 text-white mb-6\">\n              <Shield className=\"w-4 h-4 mr-2\" />\n              Películas de Proteção Solar\n            </Badge>\n            \n            <h1 className=\"text-5xl md:text-6xl font-heading font-bold mb-6\">\n              <span className=\"text-blue-400\">Proteção Solar</span>\n              <br />\n              <span className=\"text-white\">Inteligente</span>\n            </h1>\n            \n            <p className=\"text-xl text-gray-300 mb-8 leading-relaxed max-w-3xl mx-auto\">\n              Películas de proteção solar para interior e exterior que reduzem o calor, \n              protegem dos raios UV e proporcionam privacidade mantendo a luminosidade natural.\n            </p>\n            \n            <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n              <Button asChild className=\"bg-gradient-to-r from-blue-600 to-brand-turquoise text-white font-bold px-8 py-6 text-lg\">\n                <Link href=\"/contactos#formulario\">Solicitar Avaliação</Link>\n              </Button>\n              <Button variant=\"outline\" className=\"border-brand-yellow text-brand-yellow hover:bg-brand-yellow hover:text-black px-8 py-6 text-lg\">\n                Ver Benefícios\n              </Button>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Benefits Grid */}\n      <section className=\"pt-0 pb-8 bg-gray-900/50\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-3xl md:text-4xl font-heading font-bold mb-4\">\n              <span className=\"text-blue-400\">Benefícios</span> <span className=\"text-white\">Comprovados</span>\n            </h2>\n            <p className=\"text-gray-400 text-lg max-w-2xl mx-auto\">\n              Tecnologia avançada que oferece proteção, conforto e economia de energia\n            </p>\n          </div>\n          \n          <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            {benefits.map((benefit, index) => (\n              <Card key={index} className=\"bg-black/50 border-gray-800 hover:border-blue-400 transition-all duration-300\">\n                <CardContent className=\"p-6\">\n                  <div className=\"text-blue-400 mb-4\">\n                    {benefit.icon}\n                  </div>\n                  <h3 className=\"text-xl font-semibold mb-3 text-white\">{benefit.title}</h3>\n                  <p className=\"text-gray-400\">{benefit.description}</p>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Película Espelhada Section */}\n      <section className=\"py-16 bg-black\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"max-w-6xl mx-auto\">\n            <div className=\"grid lg:grid-cols-2 gap-12 items-center\">\n              {/* Image */}\n              <div className=\"order-2 lg:order-1\">\n                <img \n                  src={buildingImage} \n                  alt=\"Edifício com películas de proteção solar aplicadas\" \n                  className=\"w-full h-[400px] object-cover rounded-2xl border border-gray-800\"\n                />\n              </div>\n              \n              {/* Content */}\n              <div className=\"order-1 lg:order-2\">\n                <h2 className=\"text-3xl md:text-4xl font-heading font-bold mb-6\">\n                  <span className=\"text-white\">Película</span> <span className=\"text-orange-400\">Espelhada</span>\n                </h2>\n                \n                <p className=\"text-gray-400 text-lg mb-8\">\n                  {peliculaEspelhada.description}\n                </p>\n                \n                <div className=\"space-y-4 mb-8\">\n                  <div className=\"flex items-center justify-between p-4 bg-gray-900/50 rounded-lg border border-gray-800\">\n                    <span className=\"text-gray-300\">Proteção UV:</span>\n                    <span className=\"text-orange-400 font-semibold text-lg\">{peliculaEspelhada.protecao}</span>\n                  </div>\n                  <div className=\"flex items-center justify-between p-4 bg-gray-900/50 rounded-lg border border-gray-800\">\n                    <span className=\"text-gray-300\">Redução de calor:</span>\n                    <span className=\"text-orange-400 font-semibold text-lg\">{peliculaEspelhada.reducaoCalor}</span>\n                  </div>\n                  <div className=\"flex items-center justify-between p-4 bg-gray-900/50 rounded-lg border border-gray-800\">\n                    <span className=\"text-gray-300\">Privacidade:</span>\n                    <span className=\"text-orange-400 font-semibold text-lg\">{peliculaEspelhada.privacidade}</span>\n                  </div>\n                </div>\n                \n                <div className=\"mb-8\">\n                  <h4 className=\"text-white font-semibold mb-4\">Ideal para:</h4>\n                  <div className=\"flex flex-wrap gap-2\">\n                    {peliculaEspelhada.applications.map((app, index) => (\n                      <Badge key={index} variant=\"outline\" className=\"border-orange-400 text-orange-400\">\n                        {app}\n                      </Badge>\n                    ))}\n                  </div>\n                </div>\n                \n                <Button asChild className=\"bg-gradient-to-r from-orange-400 to-orange-600 text-white font-bold px-8 py-6 text-lg\">\n                  <Link href=\"/contactos#formulario\">\n                    Solicitar Orçamento\n                    <ArrowRight className=\"w-5 h-5 ml-2\" />\n                  </Link>\n                </Button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Applications Section */}\n      <section className=\"py-16 bg-black\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-3xl md:text-4xl font-heading font-bold mb-4\">\n              <span className=\"text-white\">Aplicações</span> <span className=\"text-brand-yellow\">Mais Comuns</span>\n            </h2>\n            <p className=\"text-gray-400 text-lg max-w-2xl mx-auto\">\n              Soluções adaptadas para diferentes tipos de espaços e necessidades\n            </p>\n          </div>\n          \n          <div className=\"grid md:grid-cols-3 gap-8\">\n            {aplicacoes.map((aplicacao, index) => (\n              <Card key={index} className=\"bg-gray-900/50 border-gray-800 hover:border-brand-yellow transition-all duration-300\">\n                <CardContent className=\"p-6\">\n                  <div className=\"text-brand-yellow mb-4\">\n                    {aplicacao.icon}\n                  </div>\n                  <h3 className=\"text-xl font-semibold mb-4 text-brand-yellow\">{aplicacao.category}</h3>\n                  <div className=\"space-y-2\">\n                    {aplicacao.items.map((item, itemIndex) => (\n                      <div key={itemIndex} className=\"flex items-center gap-2\">\n                        <div className=\"w-1.5 h-1.5 bg-brand-yellow rounded-full flex-shrink-0\"></div>\n                        <span className=\"text-sm text-gray-300\">{item}</span>\n                      </div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Process Section */}\n      <section className=\"py-16 bg-gray-900/50\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-3xl md:text-4xl font-heading font-bold mb-4\">\n              <span className=\"text-white\">Processo de</span> <span className=\"text-blue-400\">Instalação</span>\n            </h2>\n            <p className=\"text-gray-400 text-lg max-w-2xl mx-auto\">\n              Metodologia profissional que garante resultados duradouros e de qualidade\n            </p>\n          </div>\n          \n          <div className=\"max-w-4xl mx-auto\">\n            {process.map((step, index) => (\n              <div key={index} className=\"flex gap-6 mb-8 last:mb-0\">\n                <div className=\"flex-shrink-0\">\n                  <div className=\"w-16 h-16 bg-gradient-to-br from-blue-600 to-brand-turquoise rounded-full flex items-center justify-center text-white font-bold text-xl\">\n                    {step.step}\n                  </div>\n                </div>\n                <div className=\"flex-1 pb-8\">\n                  <h3 className=\"text-xl font-semibold mb-2 text-white\">{step.title}</h3>\n                  <p className=\"text-gray-400\">{step.description}</p>\n                  {index < process.length - 1 && (\n                    <div className=\"w-px h-8 bg-gray-700 ml-8 mt-4\"></div>\n                  )}\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Warranty Section */}\n      <section className=\"py-16 bg-black\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"max-w-4xl mx-auto\">\n            <div className=\"grid md:grid-cols-2 gap-12 items-center\">\n              <div>\n                <h2 className=\"text-3xl md:text-4xl font-heading font-bold mb-6\">\n                  <span className=\"text-blue-400\">Garantia e</span> <span className=\"text-white\">Qualidade</span>\n                </h2>\n                <p className=\"text-gray-400 mb-8 text-lg\">\n                  Utilizamos apenas películas de marcas reconhecidas mundialmente \n                  com garantia de fábrica e instalação profissional certificada.\n                </p>\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center gap-3\">\n                    <CheckCircle className=\"w-6 h-6 text-blue-400 flex-shrink-0\" />\n                    <span className=\"text-white\">Garantia de instalação: 2 anos</span>\n                  </div>\n                  <div className=\"flex items-center gap-3\">\n                    <CheckCircle className=\"w-6 h-6 text-blue-400 flex-shrink-0\" />\n                    <span className=\"text-white\">Películas com garantia de fábrica: 5-15 anos</span>\n                  </div>\n                  <div className=\"flex items-center gap-3\">\n                    <CheckCircle className=\"w-6 h-6 text-blue-400 flex-shrink-0\" />\n                    <span className=\"text-white\">Marcas premium: 3M, SolarGard, LLumar</span>\n                  </div>\n                  <div className=\"flex items-center gap-3\">\n                    <CheckCircle className=\"w-6 h-6 text-blue-400 flex-shrink-0\" />\n                    <span className=\"text-white\">Instaladores certificados</span>\n                  </div>\n                  <div className=\"flex items-center gap-3\">\n                    <CheckCircle className=\"w-6 h-6 text-blue-400 flex-shrink-0\" />\n                    <span className=\"text-white\">Avaliação e orçamento gratuitos</span>\n                  </div>\n                </div>\n              </div>\n              \n              <div className=\"bg-gray-900/50 rounded-2xl p-8 border border-gray-800\">\n                <div className=\"text-center mb-6\">\n                  <Star className=\"w-12 h-12 text-blue-400 mx-auto mb-4\" />\n                  <h3 className=\"text-2xl font-semibold mb-2 text-white\">Economia Comprovada</h3>\n                  <p className=\"text-gray-400\">\n                    Redução imediata nos custos de climatização\n                  </p>\n                </div>\n                \n                <div className=\"space-y-4\">\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-gray-400\">Proteção UV</span>\n                    <span className=\"text-blue-400 font-semibold\">Até 99%</span>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-gray-400\">Redução do calor</span>\n                    <span className=\"text-blue-400 font-semibold\">Até 78%</span>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-gray-400\">Economia energia</span>\n                    <span className=\"text-blue-400 font-semibold\">30-50%</span>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-gray-400\">Prazo instalação</span>\n                    <span className=\"text-blue-400 font-semibold\">1-3 dias</span>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* CTA Section */}\n      <section className=\"pt-0 pb-8 bg-gradient-to-r from-blue-600/10 via-brand-turquoise/10 to-brand-yellow/10\">\n        <div className=\"container mx-auto px-4 text-center\">\n          <h2 className=\"text-3xl md:text-4xl font-heading font-bold mb-6\">\n            <span className=\"text-white\">Pronto para Economizar com</span> <span className=\"text-blue-400\">Proteção Solar?</span>\n          </h2>\n          <p className=\"text-gray-300 text-lg mb-8 max-w-2xl mx-auto\">\n            Solicite uma avaliação gratuita e descubra quanto pode economizar \n            com as nossas películas de proteção solar.\n          </p>\n          \n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n            <Button asChild className=\"bg-gradient-to-r from-blue-600 to-brand-turquoise text-white font-bold px-8 py-6 text-lg\">\n              <Link href=\"/contactos#formulario\">\n                Avaliação Gratuita\n                <ArrowRight className=\"w-5 h-5 ml-2\" />\n              </Link>\n            </Button>\n            <Button asChild variant=\"outline\" className=\"border-brand-yellow text-brand-yellow hover:bg-brand-yellow hover:text-black px-8 py-6 text-lg\">\n              <a href=\"https://wa.me/351930682725?text=Olá!%20Interessado%20em%20películas%20de%20proteção%20solar.\" target=\"_blank\" rel=\"noopener noreferrer\">\n                WhatsApp Direto\n              </a>\n            </Button>\n          </div>\n        </div>\n      </section>\n\n      <Footer />\n    </div>\n  );\n}","size_bytes":17901},"client/src/pages/admin-contactos.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Download, Mail, Phone, Building2, Calendar, MessageSquare } from \"lucide-react\";\nimport Navigation from \"@/components/navigation\";\nimport Footer from \"@/components/footer\";\nimport { type Contact } from \"@shared/schema\";\n\nexport default function AdminContactos() {\n  const [contacts, setContacts] = useState<Contact[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [exporting, setExporting] = useState(false);\n\n  useEffect(() => {\n    fetchContacts();\n  }, []);\n\n  const fetchContacts = async () => {\n    try {\n      const response = await fetch('/api/admin/contacts');\n      const data = await response.json();\n      setContacts(data.contacts || []);\n    } catch (error) {\n      console.error('Error fetching contacts:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const exportToCsv = async () => {\n    setExporting(true);\n    try {\n      const response = await fetch('/api/admin/contacts/export');\n      const blob = await response.blob();\n      \n      // Create download link\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = 'contactos-domrealce.csv';\n      document.body.appendChild(a);\n      a.click();\n      window.URL.revokeObjectURL(url);\n      document.body.removeChild(a);\n    } catch (error) {\n      console.error('Error exporting contacts:', error);\n    } finally {\n      setExporting(false);\n    }\n  };\n\n  const formatDate = (date: Date | null) => {\n    if (!date) return 'N/A';\n    return new Date(date).toLocaleDateString('pt-PT', {\n      day: '2-digit',\n      month: '2-digit',\n      year: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  };\n\n  const getEmailStats = () => {\n    const uniqueEmails = new Set(contacts.map(c => c.email)).size;\n    const withPhone = contacts.filter(c => c.telefone).length;\n    const withCompany = contacts.filter(c => c.empresa).length;\n    \n    return { total: contacts.length, uniqueEmails, withPhone, withCompany };\n  };\n\n  const stats = getEmailStats();\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen bg-[#0a0a0a] text-white\">\n        <Navigation />\n        <div className=\"container mx-auto px-4 py-16 mt-16\">\n          <div className=\"text-center\">\n            <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-[#FFD700] mx-auto\"></div>\n            <p className=\"mt-4 text-gray-400\">A carregar contactos...</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-[#0a0a0a] text-white\">\n      <Navigation />\n      \n      {/* Header */}\n      <div className=\"bg-[#111111] border-b border-[#333] mt-16\">\n        <div className=\"container mx-auto px-4 py-8\">\n          <div className=\"flex justify-between items-center\">\n            <div>\n              <h1 className=\"text-4xl font-bold text-white mb-4\">\n                Base de Dados de <span className=\"text-[#FFD700]\">Contactos</span>\n              </h1>\n              <p className=\"text-gray-300 text-lg\">\n                Gestão e exportação para email marketing\n              </p>\n            </div>\n            <Button \n              onClick={exportToCsv}\n              disabled={exporting || contacts.length === 0}\n              className=\"bg-[#20B2AA] text-black hover:bg-[#20B2AA]/90 px-6 py-3\"\n            >\n              {exporting ? (\n                <>\n                  <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-black mr-2\"></div>\n                  A exportar...\n                </>\n              ) : (\n                <>\n                  <Download className=\"h-4 w-4 mr-2\" />\n                  Exportar CSV\n                </>\n              )}\n            </Button>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"container mx-auto px-4 py-8\">\n        \n        {/* Statistics Cards */}\n        <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 mb-8\">\n          <Card className=\"bg-[#111111] border-[#333]\">\n            <CardContent className=\"p-4 text-center\">\n              <div className=\"text-2xl font-bold text-[#FFD700]\">{stats.total}</div>\n              <div className=\"text-sm text-gray-400\">Total Contactos</div>\n            </CardContent>\n          </Card>\n          <Card className=\"bg-[#111111] border-[#333]\">\n            <CardContent className=\"p-4 text-center\">\n              <div className=\"text-2xl font-bold text-[#20B2AA]\">{stats.uniqueEmails}</div>\n              <div className=\"text-sm text-gray-400\">Emails Únicos</div>\n            </CardContent>\n          </Card>\n          <Card className=\"bg-[#111111] border-[#333]\">\n            <CardContent className=\"p-4 text-center\">\n              <div className=\"text-2xl font-bold text-[#FF6347]\">{stats.withPhone}</div>\n              <div className=\"text-sm text-gray-400\">Com Telefone</div>\n            </CardContent>\n          </Card>\n          <Card className=\"bg-[#111111] border-[#333]\">\n            <CardContent className=\"p-4 text-center\">\n              <div className=\"text-2xl font-bold text-[#FFD700]\">{stats.withCompany}</div>\n              <div className=\"text-sm text-gray-400\">Com Empresa</div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Contacts Table */}\n        {contacts.length === 0 ? (\n          <Card className=\"bg-[#111111] border-[#333]\">\n            <CardContent className=\"p-8 text-center\">\n              <Mail className=\"h-16 w-16 text-gray-600 mx-auto mb-4\" />\n              <h3 className=\"text-xl font-bold text-gray-400 mb-2\">Nenhum contacto encontrado</h3>\n              <p className=\"text-gray-500\">\n                Os contactos aparecerão aqui quando os clientes submeterem o formulário\n              </p>\n            </CardContent>\n          </Card>\n        ) : (\n          <Card className=\"bg-[#111111] border-[#333]\">\n            <CardHeader>\n              <CardTitle className=\"text-[#FFD700] flex items-center gap-2\">\n                <Mail className=\"h-5 w-5\" />\n                Lista de Contactos para Email Marketing\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"p-0\">\n              <div className=\"overflow-x-auto\">\n                <Table>\n                  <TableHeader>\n                    <TableRow className=\"border-[#333]\">\n                      <TableHead className=\"text-gray-300\">Nome</TableHead>\n                      <TableHead className=\"text-gray-300\">Email</TableHead>\n                      <TableHead className=\"text-gray-300\">Telefone</TableHead>\n                      <TableHead className=\"text-gray-300\">Empresa</TableHead>\n                      <TableHead className=\"text-gray-300\">Data</TableHead>\n                      <TableHead className=\"text-gray-300\">Mensagem</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {contacts.map((contact) => (\n                      <TableRow key={contact.id} className=\"border-[#333] hover:bg-[#1a1a1a]\">\n                        <TableCell className=\"font-medium text-white\">\n                          {contact.nome}\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"flex items-center gap-2\">\n                            <Mail className=\"h-4 w-4 text-[#20B2AA]\" />\n                            <span className=\"text-[#20B2AA]\">{contact.email}</span>\n                          </div>\n                        </TableCell>\n                        <TableCell>\n                          {contact.telefone ? (\n                            <div className=\"flex items-center gap-2\">\n                              <Phone className=\"h-4 w-4 text-[#FF6347]\" />\n                              <span className=\"text-gray-300\">{contact.telefone}</span>\n                            </div>\n                          ) : (\n                            <span className=\"text-gray-500\">N/A</span>\n                          )}\n                        </TableCell>\n                        <TableCell>\n                          {contact.empresa ? (\n                            <div className=\"flex items-center gap-2\">\n                              <Building2 className=\"h-4 w-4 text-[#FFD700]\" />\n                              <span className=\"text-gray-300\">{contact.empresa}</span>\n                            </div>\n                          ) : (\n                            <span className=\"text-gray-500\">N/A</span>\n                          )}\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"flex items-center gap-2\">\n                            <Calendar className=\"h-4 w-4 text-gray-400\" />\n                            <span className=\"text-gray-300 text-sm\">\n                              {formatDate(contact.createdAt)}\n                            </span>\n                          </div>\n                        </TableCell>\n                        <TableCell className=\"max-w-xs\">\n                          <div className=\"flex items-start gap-2\">\n                            <MessageSquare className=\"h-4 w-4 text-gray-400 mt-1 flex-shrink-0\" />\n                            <span className=\"text-gray-300 text-sm truncate\">\n                              {contact.mensagem.length > 50 \n                                ? `${contact.mensagem.substring(0, 50)}...` \n                                : contact.mensagem\n                              }\n                            </span>\n                          </div>\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Marketing Tips */}\n        <Card className=\"bg-gradient-to-r from-[#FFD700]/10 to-[#20B2AA]/10 border-[#FFD700] mt-8\">\n          <CardContent className=\"p-6\">\n            <h3 className=\"text-xl font-bold text-[#FFD700] mb-4\">💡 Dicas para Email Marketing</h3>\n            <div className=\"grid md:grid-cols-2 gap-6 text-sm\">\n              <div>\n                <h4 className=\"font-bold text-white mb-2\">📊 Como usar os dados:</h4>\n                <ul className=\"text-gray-300 space-y-1\">\n                  <li>• Exporte CSV para importar no Mailchimp, Sendinblue, etc.</li>\n                  <li>• Segmente por empresa (B2B vs particular)</li>\n                  <li>• Use telefone para remarketing por WhatsApp</li>\n                  <li>• Analise mensagens para identificar necessidades</li>\n                </ul>\n              </div>\n              <div>\n                <h4 className=\"font-bold text-white mb-2\">✉️ Estratégias recomendadas:</h4>\n                <ul className=\"text-gray-300 space-y-1\">\n                  <li>• Newsletter mensal com novos produtos</li>\n                  <li>• Campanhas sazonais (Natal, verão, etc.)</li>\n                  <li>• Follow-up de orçamentos após 1 semana</li>\n                  <li>• Promoções exclusivas para base de dados</li>\n                </ul>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n      </div>\n\n      <Footer />\n    </div>\n  );\n}","size_bytes":11578},"client/src/pages/teste-cores.tsx":{"content":"import { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { toast } from '@/hooks/use-toast';\n\nexport default function TesteCores() {\n  const [bgColor, setBgColor] = useState('#ffffff');\n  const [textColor, setTextColor] = useState('#000000');\n  const [borderColor, setBorderColor] = useState('#000000');\n  const [customCSS, setCustomCSS] = useState('');\n\n  const testarToast = () => {\n    const toastStyle = {\n      backgroundColor: bgColor,\n      color: textColor,\n      border: `2px solid ${borderColor}`,\n      ...parseCustomCSS(customCSS)\n    };\n\n    toast({\n      title: \"✅ Referência Multibanco gerada\",\n      description: `🏦 Entidade: 11249 | 🔢 Referência: 123456789 | 💰 Valor: €43,05`,\n      style: toastStyle,\n      duration: 8000,\n    });\n  };\n\n  const parseCustomCSS = (css: string) => {\n    const styles: any = {};\n    if (!css) return styles;\n    \n    const rules = css.split(';').filter(rule => rule.trim());\n    rules.forEach(rule => {\n      const [property, value] = rule.split(':').map(s => s.trim());\n      if (property && value) {\n        const camelCase = property.replace(/-([a-z])/g, (g) => g[1].toUpperCase());\n        styles[camelCase] = value;\n      }\n    });\n    return styles;\n  };\n\n  const copiarCSS = () => {\n    const cssCompleto = `\nbackgroundColor: '${bgColor}',\ncolor: '${textColor}',\nborder: '2px solid ${borderColor}',\n${customCSS ? Object.entries(parseCustomCSS(customCSS)).map(([k, v]) => `${k}: '${v}'`).join(',\\n') : ''}\n    `.trim();\n    navigator.clipboard.writeText(cssCompleto);\n    alert('CSS copiado!');\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-100 p-8\">\n      <div className=\"max-w-4xl mx-auto\">\n        <h1 className=\"text-3xl font-bold mb-8 text-center\">🎨 Teste de Cores para Toasts</h1>\n        \n        <div className=\"grid md:grid-cols-2 gap-8\">\n          {/* Controlos */}\n          <div className=\"bg-white p-6 rounded-lg shadow\">\n            <h2 className=\"text-xl font-semibold mb-4\">Controlos de Cor</h2>\n            \n            <div className=\"space-y-4\">\n              <div>\n                <label className=\"block text-sm font-medium mb-2\">Cor de Fundo:</label>\n                <div className=\"flex gap-2\">\n                  <input \n                    type=\"color\" \n                    value={bgColor} \n                    onChange={(e) => setBgColor(e.target.value)}\n                    className=\"w-12 h-10 rounded border\"\n                  />\n                  <input \n                    type=\"text\" \n                    value={bgColor} \n                    onChange={(e) => setBgColor(e.target.value)}\n                    className=\"flex-1 p-2 border rounded\"\n                    placeholder=\"#ffffff\"\n                  />\n                </div>\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium mb-2\">Cor do Texto:</label>\n                <div className=\"flex gap-2\">\n                  <input \n                    type=\"color\" \n                    value={textColor} \n                    onChange={(e) => setTextColor(e.target.value)}\n                    className=\"w-12 h-10 rounded border\"\n                  />\n                  <input \n                    type=\"text\" \n                    value={textColor} \n                    onChange={(e) => setTextColor(e.target.value)}\n                    className=\"flex-1 p-2 border rounded\"\n                    placeholder=\"#000000\"\n                  />\n                </div>\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium mb-2\">Cor da Borda:</label>\n                <div className=\"flex gap-2\">\n                  <input \n                    type=\"color\" \n                    value={borderColor} \n                    onChange={(e) => setBorderColor(e.target.value)}\n                    className=\"w-12 h-10 rounded border\"\n                  />\n                  <input \n                    type=\"text\" \n                    value={borderColor} \n                    onChange={(e) => setBorderColor(e.target.value)}\n                    className=\"flex-1 p-2 border rounded\"\n                    placeholder=\"#000000\"\n                  />\n                </div>\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium mb-2\">CSS Personalizado:</label>\n                <textarea \n                  value={customCSS}\n                  onChange={(e) => setCustomCSS(e.target.value)}\n                  className=\"w-full p-2 border rounded h-24\"\n                  placeholder=\"font-weight: bold; font-size: 16px; text-shadow: 1px 1px 1px #000\"\n                />\n                <p className=\"text-xs text-gray-500 mt-1\">\n                  Formato: propriedade: valor; (ex: font-weight: bold; font-size: 18px;)\n                </p>\n              </div>\n            </div>\n\n            <div className=\"flex gap-2 mt-6\">\n              <Button onClick={testarToast} className=\"flex-1\">\n                🧪 Testar Toast\n              </Button>\n              <Button onClick={copiarCSS} variant=\"outline\">\n                📋 Copiar CSS\n              </Button>\n            </div>\n          </div>\n\n          {/* Preview */}\n          <div className=\"bg-white p-6 rounded-lg shadow\">\n            <h2 className=\"text-xl font-semibold mb-4\">Pré-visualização</h2>\n            \n            <div \n              className=\"p-4 rounded border-2 mb-4\"\n              style={{\n                backgroundColor: bgColor,\n                color: textColor,\n                border: `2px solid ${borderColor}`,\n                ...parseCustomCSS(customCSS)\n              }}\n            >\n              <div className=\"font-semibold mb-2\">✅ Referência Multibanco gerada</div>\n              <div>🏦 Entidade: 11249 | 🔢 Referência: 123456789 | 💰 Valor: €43,05</div>\n            </div>\n\n            <div className=\"bg-gray-50 p-3 rounded text-sm\">\n              <strong>CSS Actual:</strong>\n              <pre className=\"mt-2 text-xs overflow-auto\">\n{`style: {\n  backgroundColor: '${bgColor}',\n  color: '${textColor}',\n  border: '2px solid ${borderColor}',\n${customCSS ? Object.entries(parseCustomCSS(customCSS)).map(([k, v]) => `  ${k}: '${v}'`).join(',\\n') + ',' : ''}\n}`}\n              </pre>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"mt-8 bg-blue-50 p-4 rounded\">\n          <h3 className=\"font-semibold mb-2\">💡 Dicas:</h3>\n          <ul className=\"list-disc list-inside space-y-1 text-sm\">\n            <li>Usa <code>!important</code> no CSS personalizado se as cores não aparecerem</li>\n            <li>Exemplo: <code>color: #000000 !important; background-color: #ffffff !important</code></li>\n            <li>Testa com diferentes combinações até encontrares a que funciona</li>\n            <li>Copia o CSS final e aplica no código</li>\n          </ul>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":6958},"client/src/components/seo.tsx":{"content":"import { useEffect } from 'react';\nimport { useLocation } from 'wouter';\n\ninterface SEOProps {\n  title?: string;\n  description?: string;\n  image?: string;\n  type?: 'website' | 'article' | 'product';\n  keywords?: string[];\n  noIndex?: boolean;\n}\n\ninterface PageSEOData {\n  [key: string]: SEOProps;\n}\n\nconst pageSEOData: PageSEOData = {\n  '/': {\n    title: 'DOMREALCE | Design Gráfico, Impressão Digital e Papel de Parede em Portugal',\n    description: 'Comunicação visual, impressão digital e aplicação de papel de parede. Orçamentos rápidos, qualidade e alto acabamento. Fale com a DOMREALCE.',\n    keywords: ['comunicação visual', 'impressão digital', 'papel de parede', 'design gráfico', 'Lisboa', 'Portugal', 'DOMREALCE', 'orçamento', 'qualidade'],\n    type: 'website'\n  },\n  '/servicos': {\n    title: 'Serviços de Comunicação Visual | DOMREALCE Lisboa',\n    description: 'Descubra todos os nossos serviços: design gráfico, impressão digital, papel de parede, decoração de viaturas, telas artísticas e sinalética comercial.',\n    keywords: ['serviços', 'design gráfico', 'impressão', 'decoração viaturas', 'sinalética'],\n    type: 'website'\n  },\n  '/servico-design-grafico': {\n    title: 'Design Gráfico Profissional | DOMREALCE Lisboa',\n    description: 'Criação de logótipos, material publicitário, branding e identidade visual. Design gráfico profissional com 40 anos de experiência.',\n    keywords: ['design gráfico', 'logótipo', 'branding', 'identidade visual', 'publicidade'],\n    type: 'website'\n  },\n  '/servico-impressao-digital': {\n    title: 'Impressão Digital de Alta Qualidade | DOMREALCE Lisboa',\n    description: 'Impressão digital profissional em grande formato. Banners, cartazes, vinil adesivo, papel de parede e muito mais.',\n    keywords: ['impressão digital', 'grande formato', 'banners', 'cartazes', 'vinil'],\n    type: 'website'\n  },\n  '/servico-papel-parede': {\n    title: 'Papel de Parede Personalizado | DOMREALCE Lisboa',\n    description: 'Papel de parede personalizado com as suas imagens. Texturas exclusivas, medidas personalizadas e aplicação profissional.',\n    keywords: ['papel de parede', 'personalizado', 'texturas', 'decoração interior'],\n    type: 'website'\n  },\n  '/servico-decoracao-viaturas': {\n    title: 'Decoração de Viaturas Profissional | DOMREALCE Lisboa',\n    description: 'Decoração completa de viaturas, frotas comerciais e veículos publicitários. Vinil de qualidade premium e aplicação profissional.',\n    keywords: ['decoração viaturas', 'publicidade móvel', 'frotas', 'vinil automóvel'],\n    type: 'website'\n  },\n  '/loja': {\n    title: 'Loja Online DOMREALCE | Produtos de Comunicação Visual',\n    description: 'Compre online produtos de comunicação visual. Papel de parede personalizado, impressões digitais e muito mais.',\n    keywords: ['loja online', 'comprar', 'papel de parede', 'impressão digital'],\n    type: 'website'\n  },\n  '/loja-papel-parede': {\n    title: 'Papel de Parede Online - Texturas e Medidas Personalizadas | DOMREALCE',\n    description: 'Escolha entre centenas de texturas de papel de parede. Calculadora automática de medidas e preços transparentes.',\n    keywords: ['papel de parede online', 'texturas', 'comprar papel parede', 'medidas'],\n    type: 'website'\n  },\n  '/portfolio': {\n    title: 'Portfolio DOMREALCE - Projetos de Comunicação Visual | Lisboa',\n    description: 'Explore o nosso portfolio com mais de 200 projetos realizados. Trabalhos de design, impressão, decoração e sinalética.',\n    keywords: ['portfolio', 'projetos', 'trabalhos realizados', 'referências'],\n    type: 'website'\n  },\n  '/contactos': {\n    title: 'Contactos DOMREALCE Lisboa | Orçamentos Gratuitos',\n    description: 'Entre em contacto connosco para orçamentos gratuitos. Telefone, email, WhatsApp e morada em Lisboa.',\n    keywords: ['contactos', 'orçamentos', 'Lisboa', 'telefone', 'WhatsApp'],\n    type: 'website'\n  },\n  '/sobre': {\n    title: 'Sobre a DOMREALCE | 40 Anos de Experiência em Comunicação Visual',\n    description: 'Conheça a história da DOMREALCE. Mais de 40 anos de experiência em comunicação visual e impressão digital em Lisboa.',\n    keywords: ['sobre', 'história', 'experiência', 'empresa', 'comunicação visual'],\n    type: 'website'\n  },\n  '/noticias': {\n    title: 'Notícias e Novidades | DOMREALCE Lisboa',\n    description: 'Fique a par das últimas novidades, projetos e inovações da DOMREALCE. Blog com dicas e tendências de comunicação visual.',\n    keywords: ['notícias', 'novidades', 'blog', 'tendências', 'comunicação visual'],\n    type: 'website'\n  },\n  '/servico-telas-artisticas': {\n    title: 'Telas Artísticas Personalizadas | DOMREALCE Lisboa',\n    description: 'Impressão de telas artísticas em alta qualidade. Canvas personalizado, reproduções de arte e impressões decorativas.',\n    keywords: ['telas artísticas', 'canvas', 'impressão arte', 'decoração'],\n    type: 'website'\n  },\n  '/servico-autocolantes': {\n    title: 'Autocolantes e Vinil Adesivo | DOMREALCE Lisboa',\n    description: 'Autocolantes personalizados, vinil adesivo para decoração e publicidade. Corte automático e aplicação profissional.',\n    keywords: ['autocolantes', 'vinil adesivo', 'corte automático', 'personalização'],\n    type: 'website'\n  },\n  '/servico-espacos-comerciais': {\n    title: 'Sinalética Comercial e Decoração de Espaços | DOMREALCE',\n    description: 'Sinalética para espaços comerciais, decoração de montras e ambientes corporativos. Soluções completas de comunicação visual.',\n    keywords: ['sinalética comercial', 'decoração espaços', 'montras', 'empresas'],\n    type: 'website'\n  },\n  '/servico-peliculas-protecao-solar': {\n    title: 'Películas de Proteção Solar | DOMREALCE Lisboa',\n    description: 'Películas de proteção solar para janelas. Redução de calor, proteção UV e maior privacidade para casa e escritório.',\n    keywords: ['películas solares', 'proteção UV', 'janelas', 'isolamento'],\n    type: 'website'\n  },\n  '/como-aplicar-papel-parede': {\n    title: 'Como Aplicar Papel de Parede - Guia Completo | DOMREALCE',\n    description: 'Guia passo a passo para aplicar papel de parede. Dicas profissionais, ferramentas necessárias e técnicas de aplicação.',\n    keywords: ['aplicar papel parede', 'tutorial', 'guia', 'dicas'],\n    type: 'article'\n  },\n  '/politica-privacidade': {\n    title: 'Política de Privacidade | DOMREALCE',\n    description: 'Política de privacidade da DOMREALCE. Como protegemos e utilizamos os seus dados pessoais.',\n    keywords: ['política privacidade', 'dados pessoais', 'RGPD'],\n    type: 'website',\n    noIndex: false\n  },\n  '/termos-condicoes': {\n    title: 'Termos e Condições | DOMREALCE',\n    description: 'Termos e condições de utilização dos serviços DOMREALCE. Regulamentos e políticas comerciais.',\n    keywords: ['termos condições', 'regulamento', 'políticas'],\n    type: 'website',\n    noIndex: false\n  },\n  '/politica-cookies': {\n    title: 'Política de Cookies | DOMREALCE',\n    description: 'Política de utilização de cookies no site DOMREALCE. Informações sobre cookies e preferências.',\n    keywords: ['política cookies', 'privacidade', 'navegação'],\n    type: 'website',\n    noIndex: false\n  },\n  '/aviso-legal': {\n    title: 'Aviso Legal | DOMREALCE',\n    description: 'Aviso legal do site DOMREALCE. Informações legais, propriedade intelectual e responsabilidades.',\n    keywords: ['aviso legal', 'informações legais', 'propriedade intelectual'],\n    type: 'website',\n    noIndex: false\n  }\n};\n\nexport default function SEO({ title, description, image, type = 'website', keywords = [], noIndex = false }: SEOProps) {\n  const [location] = useLocation();\n  \n  useEffect(() => {\n    // Get page-specific SEO data or use provided props\n    const pageData = pageSEOData[location] || {};\n    const finalTitle = title || pageData.title || 'DOMREALCE - Comunicação Visual | Lisboa';\n    const finalDescription = description || pageData.description || 'Especialista em comunicação visual e impressão digital em Lisboa.';\n    const finalKeywords = [...(pageData.keywords || []), ...keywords];\n    const finalType = type || pageData.type || 'website';\n    const finalImage = image || pageData.image || 'https://www.domrealce.com/og-image.jpg';\n    \n    // Update document title\n    document.title = finalTitle;\n    \n    // Update meta description\n    updateMetaTag('description', finalDescription);\n    \n    // Update keywords\n    if (finalKeywords.length > 0) {\n      updateMetaTag('keywords', finalKeywords.join(', '));\n    }\n    \n    // Update robots\n    updateMetaTag('robots', noIndex ? 'noindex, nofollow' : 'index, follow');\n    \n    // Update canonical URL\n    updateLinkTag('canonical', `https://www.domrealce.com${location}`);\n    \n    // Update Open Graph tags\n    updateMetaProperty('og:title', finalTitle);\n    updateMetaProperty('og:description', finalDescription);\n    updateMetaProperty('og:type', finalType);\n    updateMetaProperty('og:url', `https://www.domrealce.com${location}`);\n    updateMetaProperty('og:image', finalImage);\n    \n    // Update Twitter Card tags\n    updateMetaName('twitter:card', 'summary_large_image');\n    updateMetaName('twitter:title', finalTitle);\n    updateMetaName('twitter:description', finalDescription);\n    updateMetaName('twitter:image', finalImage);\n    \n    // Update additional SEO tags\n    updateMetaName('author', 'DOMREALCE');\n    updateMetaProperty('og:locale', 'pt_PT');\n    updateMetaProperty('og:site_name', 'DOMREALCE');\n    \n    // Add preconnect for performance\n    addPreconnectLink('https://fonts.googleapis.com');\n    addPreconnectLink('https://fonts.gstatic.com');\n    addPreconnectLink('https://www.google-analytics.com');\n    \n  }, [location, title, description, image, type, keywords, noIndex]);\n  \n  return null;\n}\n\nfunction updateMetaTag(name: string, content: string) {\n  let meta = document.querySelector(`meta[name=\"${name}\"]`);\n  if (!meta) {\n    meta = document.createElement('meta');\n    meta.setAttribute('name', name);\n    document.head.appendChild(meta);\n  }\n  meta.setAttribute('content', content);\n}\n\nfunction updateMetaProperty(property: string, content: string) {\n  let meta = document.querySelector(`meta[property=\"${property}\"]`);\n  if (!meta) {\n    meta = document.createElement('meta');\n    meta.setAttribute('property', property);\n    document.head.appendChild(meta);\n  }\n  meta.setAttribute('content', content);\n}\n\nfunction updateMetaName(name: string, content: string) {\n  let meta = document.querySelector(`meta[name=\"${name}\"]`);\n  if (!meta) {\n    meta = document.createElement('meta');\n    meta.setAttribute('name', name);\n    document.head.appendChild(meta);\n  }\n  meta.setAttribute('content', content);\n}\n\nfunction updateLinkTag(rel: string, href: string) {\n  let link = document.querySelector(`link[rel=\"${rel}\"]`);\n  if (!link) {\n    link = document.createElement('link');\n    link.setAttribute('rel', rel);\n    document.head.appendChild(link);\n  }\n  link.setAttribute('href', href);\n}\n\nfunction addPreconnectLink(href: string) {\n  if (!document.querySelector(`link[href=\"${href}\"][rel=\"preconnect\"]`)) {\n    const link = document.createElement('link');\n    link.setAttribute('rel', 'preconnect');\n    link.setAttribute('href', href);\n    link.setAttribute('crossorigin', 'anonymous');\n    document.head.appendChild(link);\n  }\n}","size_bytes":11463},"client/src/components/structured-data.tsx":{"content":"import { useEffect } from 'react';\nimport { useLocation } from 'wouter';\n\ninterface ProductStructuredData {\n  name: string;\n  description: string;\n  price?: number;\n  currency?: string;\n  image?: string;\n  category?: string;\n  brand?: string;\n}\n\ninterface ServiceStructuredData {\n  name: string;\n  description: string;\n  provider: string;\n  areaServed: string;\n  serviceType: string;\n}\n\nexport default function StructuredData() {\n  const [location] = useLocation();\n  \n  useEffect(() => {\n    // Remove existing structured data\n    const existingScript = document.querySelector('script[data-structured-data=\"page\"]');\n    if (existingScript) {\n      existingScript.remove();\n    }\n    \n    // Add page-specific structured data\n    const structuredData = getStructuredDataForPage(location);\n    if (structuredData) {\n      const script = document.createElement('script');\n      script.type = 'application/ld+json';\n      script.setAttribute('data-structured-data', 'page');\n      script.textContent = JSON.stringify(structuredData, null, 2);\n      document.head.appendChild(script);\n    }\n  }, [location]);\n  \n  return null;\n}\n\nfunction getStructuredDataForPage(path: string): any {\n  const baseUrl = 'https://www.domrealce.com';\n  \n  switch (path) {\n    case '/':\n      return {\n        \"@context\": \"https://schema.org\",\n        \"@type\": \"LocalBusiness\",\n        \"name\": \"DOMREALCE\",\n        \"url\": baseUrl,\n        \"description\": \"Comunicação visual, impressão digital e aplicação de papel de parede em Portugal.\",\n        \"image\": `${baseUrl}/og-image.jpg`,\n        \"logo\": `${baseUrl}/logo.png`,\n        \"telephone\": \"+351930682725\",\n        \"email\": \"carloscruz@domrealce.com\",\n        \"priceRange\": \"€€\",\n        \"paymentAccepted\": \"MB WAY, Multibanco, PayShop, Transferência Bancária\",\n        \"currenciesAccepted\": \"EUR\",\n        \"openingHours\": [\n          \"Mo-Fr 09:00-18:00\",\n          \"Sa 09:00-13:00\"\n        ],\n        \"address\": {\n          \"@type\": \"PostalAddress\",\n          \"streetAddress\": \"Rua de Rebolido, 42\",\n          \"addressLocality\": \"Gondalães, Paredes\",\n          \"postalCode\": \"4580-402\",\n          \"addressCountry\": \"PT\",\n          \"addressRegion\": \"Porto\"\n        },\n        \"geo\": {\n          \"@type\": \"GeoCoordinates\",\n          \"latitude\": 41.2033,\n          \"longitude\": -8.3867\n        },\n        \"contactPoint\": [\n          {\n            \"@type\": \"ContactPoint\",\n            \"telephone\": \"+351930682725\",\n            \"contactType\": \"Customer Service\",\n            \"areaServed\": \"PT\",\n            \"availableLanguage\": [\"Portuguese\"]\n          },\n          {\n            \"@type\": \"ContactPoint\",\n            \"email\": \"carloscruz@domrealce.com\",\n            \"contactType\": \"Customer Service\"\n          }\n        ],\n        \"sameAs\": [\n          \"https://www.facebook.com/DomrealcePublicidade/\",\n          \"https://www.linkedin.com/company/51830077/\"\n        ],\n        \"serviceArea\": {\n          \"@type\": \"Country\",\n          \"name\": \"Portugal\"\n        },\n        \"hasOfferCatalog\": {\n          \"@type\": \"OfferCatalog\",\n          \"name\": \"Serviços DOMREALCE\",\n          \"itemListElement\": [\n            {\n              \"@type\": \"Offer\",\n              \"itemOffered\": {\n                \"@type\": \"Service\",\n                \"name\": \"Design Gráfico\",\n                \"description\": \"Criação de logótipos e material publicitário\"\n              }\n            },\n            {\n              \"@type\": \"Offer\",\n              \"itemOffered\": {\n                \"@type\": \"Service\",\n                \"name\": \"Impressão Digital\",\n                \"description\": \"Impressão em grande formato e vinil\"\n              }\n            },\n            {\n              \"@type\": \"Offer\",\n              \"itemOffered\": {\n                \"@type\": \"Service\",\n                \"name\": \"Papel de Parede Personalizado\",\n                \"description\": \"Papel de parede com as suas imagens\"\n              }\n            },\n            {\n              \"@type\": \"Offer\",\n              \"itemOffered\": {\n                \"@type\": \"Service\",\n                \"name\": \"Decoração de Viaturas\",\n                \"description\": \"Publicidade móvel e decoração de frotas\"\n              }\n            }\n          ]\n        },\n        \"potentialAction\": {\n          \"@type\": \"SearchAction\",\n          \"target\": {\n            \"@type\": \"EntryPoint\",\n            \"urlTemplate\": `${baseUrl}/loja?q={search_term_string}`\n          },\n          \"query-input\": \"required name=search_term_string\"\n        }\n      };\n      \n    case '/servico-design-grafico':\n      return {\n        \"@context\": \"https://schema.org\",\n        \"@type\": \"Service\",\n        \"serviceType\": \"Design Gráfico\",\n        \"name\": \"Serviços de Design Gráfico Profissional\",\n        \"description\": \"Criação de logótipos, material publicitário, branding e identidade visual profissional\",\n        \"provider\": {\n          \"@type\": \"Organization\",\n          \"name\": \"DOMREALCE\",\n          \"url\": baseUrl\n        },\n        \"areaServed\": {\n          \"@type\": \"Place\",\n          \"name\": \"Paredes, Portugal\"\n        },\n        \"hasOfferCatalog\": {\n          \"@type\": \"OfferCatalog\",\n          \"name\": \"Serviços de Design Gráfico\",\n          \"itemListElement\": [\n            {\n              \"@type\": \"Offer\",\n              \"itemOffered\": {\n                \"@type\": \"Service\",\n                \"name\": \"Criação de Logótipos\"\n              }\n            },\n            {\n              \"@type\": \"Offer\",\n              \"itemOffered\": {\n                \"@type\": \"Service\",\n                \"name\": \"Material Publicitário\"\n              }\n            }\n          ]\n        }\n      };\n      \n    case '/servico-papel-parede':\n      return {\n        \"@context\": \"https://schema.org\",\n        \"@type\": \"Service\",\n        \"serviceType\": \"Papel de Parede Personalizado\",\n        \"name\": \"Papel de Parede Personalizado\",\n        \"description\": \"Papel de parede personalizado com as suas imagens, texturas exclusivas e aplicação profissional\",\n        \"provider\": {\n          \"@type\": \"Organization\",\n          \"name\": \"DOMREALCE\",\n          \"url\": baseUrl\n        },\n        \"areaServed\": {\n          \"@type\": \"Place\",\n          \"name\": \"Paredes, Portugal\"\n        },\n        \"offers\": {\n          \"@type\": \"Offer\",\n          \"priceCurrency\": \"EUR\",\n          \"priceSpecification\": {\n            \"@type\": \"PriceSpecification\",\n            \"minPrice\": 25.00,\n            \"priceCurrency\": \"EUR\",\n            \"unitText\": \"m²\"\n          }\n        }\n      };\n      \n    case '/loja/papel-parede':\n      return {\n        \"@context\": \"https://schema.org\",\n        \"@type\": \"Product\",\n        \"name\": \"Papel de Parede Personalizado\",\n        \"description\": \"Papel de parede personalizado com centenas de texturas disponíveis. Medidas e designs personalizados.\",\n        \"brand\": {\n          \"@type\": \"Brand\",\n          \"name\": \"DOMREALCE\"\n        },\n        \"category\": \"Decoração Interior\",\n        \"offers\": {\n          \"@type\": \"AggregateOffer\",\n          \"priceCurrency\": \"EUR\",\n          \"lowPrice\": 25.00,\n          \"highPrice\": 45.00,\n          \"offerCount\": 50,\n          \"availability\": \"https://schema.org/InStock\",\n          \"seller\": {\n            \"@type\": \"Organization\",\n            \"name\": \"DOMREALCE\"\n          }\n        },\n        \"aggregateRating\": {\n          \"@type\": \"AggregateRating\",\n          \"ratingValue\": \"4.8\",\n          \"ratingCount\": \"127\",\n          \"bestRating\": \"5\"\n        }\n      };\n      \n    case '/contactos':\n      return {\n        \"@context\": \"https://schema.org\",\n        \"@type\": \"ContactPage\",\n        \"mainEntity\": {\n          \"@type\": \"Organization\",\n          \"name\": \"DOMREALCE\",\n          \"telephone\": \"+351930682725\",\n          \"email\": \"info@domrealce.com\",\n          \"address\": {\n            \"@type\": \"PostalAddress\",\n            \"addressCountry\": \"PT\",\n            \"addressLocality\": \"Paredes\"\n          },\n          \"openingHours\": [\n            \"Mo-Fr 09:00-18:00\"\n          ],\n          \"contactPoint\": [\n            {\n              \"@type\": \"ContactPoint\",\n              \"telephone\": \"+351930682725\",\n              \"contactType\": \"Customer Service\"\n            },\n            {\n              \"@type\": \"ContactPoint\",\n              \"email\": \"info@domrealce.com\",\n              \"contactType\": \"Customer Service\"\n            }\n          ]\n        }\n      };\n      \n    case '/noticias':\n      return {\n        \"@context\": \"https://schema.org\",\n        \"@type\": \"Blog\",\n        \"name\": \"Notícias DOMREALCE\",\n        \"description\": \"Últimas notícias, projetos e inovações da DOMREALCE\",\n        \"url\": `${baseUrl}/noticias`,\n        \"publisher\": {\n          \"@type\": \"Organization\",\n          \"name\": \"DOMREALCE\",\n          \"url\": baseUrl\n        },\n        \"mainEntityOfPage\": {\n          \"@type\": \"WebPage\",\n          \"@id\": `${baseUrl}/noticias`\n        }\n      };\n      \n    default:\n      return null;\n  }\n}","size_bytes":8922},"client/src/components/hero-overlay.tsx":{"content":"interface HeroOverlayProps {\n  children: React.ReactNode;\n  className?: string;\n  style?: React.CSSProperties;\n}\n\nexport default function HeroOverlay({\n  children,\n  className = \"\",\n  style = {},\n}: HeroOverlayProps) {\n  return (\n    <section\n      className={`relative bg-cover bg-center ${className}`}\n      style={{\n        backgroundSize: \"cover\",\n        backgroundPosition: \"center\",\n        ...style,\n      }}\n    >\n      {children}\n    </section>\n  );\n}\n","size_bytes":462},"client/src/components/performance-optimizer.tsx":{"content":"import { useEffect } from 'react';\n\nexport default function PerformanceOptimizer() {\n  useEffect(() => {\n    // Preload critical resources\n    const preloadCriticalResources = () => {\n      // Preload hero image if it exists\n      const heroSection = document.querySelector('section[style*=\"background-image\"], .hero, [class*=\"hero\"]');\n      if (heroSection) {\n        const bgImage = getComputedStyle(heroSection).backgroundImage;\n        const imageUrl = bgImage.match(/url\\([\"']?([^\"')]+)[\"']?\\)/)?.[1];\n        \n        if (imageUrl) {\n          const link = document.createElement('link');\n          link.rel = 'preload';\n          link.as = 'image';\n          link.href = imageUrl;\n          document.head.appendChild(link);\n        }\n      }\n\n      // Preload fonts if not already done\n      const fontPreloads = [\n        'https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap',\n        'https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600;700&display=swap'\n      ];\n\n      fontPreloads.forEach(fontUrl => {\n        if (!document.querySelector(`link[href=\"${fontUrl}\"]`)) {\n          const link = document.createElement('link');\n          link.rel = 'preload';\n          link.as = 'style';\n          link.href = fontUrl;\n          link.onload = function() { \n            (this as any).onload = null; \n            (this as any).rel = 'stylesheet'; \n          };\n          document.head.appendChild(link);\n        }\n      });\n\n      // Preconnect to external domains\n      const preconnectDomains = [\n        'https://www.google-analytics.com',\n        'https://fonts.googleapis.com', \n        'https://fonts.gstatic.com'\n      ];\n\n      preconnectDomains.forEach(domain => {\n        if (!document.querySelector(`link[href=\"${domain}\"][rel=\"preconnect\"]`)) {\n          const link = document.createElement('link');\n          link.rel = 'preconnect';\n          link.href = domain;\n          link.crossOrigin = 'anonymous';\n          document.head.appendChild(link);\n        }\n      });\n    };\n\n    // Optimize images for performance\n    const optimizeImages = () => {\n      const images = document.querySelectorAll('img');\n      images.forEach(img => {\n        // Add decoding=\"async\" for better performance\n        if (!img.hasAttribute('decoding')) {\n          img.setAttribute('decoding', 'async');\n        }\n\n        // Add loading=\"lazy\" for below-the-fold images\n        if (!img.hasAttribute('loading')) {\n          const rect = img.getBoundingClientRect();\n          if (rect.top < window.innerHeight && rect.bottom > 0) {\n            img.setAttribute('fetchpriority', 'high');\n            img.setAttribute('loading', 'eager');\n          } else {\n            img.setAttribute('loading', 'lazy');\n          }\n        }\n\n        // Add error handling for broken images\n        img.onerror = function() {\n          this.style.display = 'none';\n          console.warn('Failed to load image:', this.src);\n        };\n      });\n    };\n\n    // Defer non-critical resources\n    const deferNonCriticalResources = () => {\n      // Defer analytics and tracking scripts\n      const scripts = document.querySelectorAll('script[src*=\"analytics\"], script[src*=\"gtag\"], script[src*=\"tracking\"]');\n      scripts.forEach(script => {\n        if (!script.hasAttribute('defer') && !script.hasAttribute('async')) {\n          script.setAttribute('defer', 'true');\n        }\n      });\n    };\n\n    // Run optimizations after DOM is ready\n    if (document.readyState === 'loading') {\n      document.addEventListener('DOMContentLoaded', () => {\n        preloadCriticalResources();\n        optimizeImages();\n        deferNonCriticalResources();\n      });\n    } else {\n      preloadCriticalResources();\n      optimizeImages();\n      deferNonCriticalResources();\n    }\n\n    // Run image optimization again after a short delay to catch dynamically loaded images\n    const timeout = setTimeout(() => {\n      optimizeImages();\n    }, 1000);\n\n    // Optimize images when new ones are added to the DOM\n    const imageObserver = new MutationObserver((mutations) => {\n      mutations.forEach((mutation) => {\n        if (mutation.type === 'childList') {\n          const addedImages = Array.from(mutation.addedNodes)\n            .filter(node => node.nodeType === 1)\n            .flatMap(node => {\n              const element = node as Element;\n              return element.tagName === 'IMG' ? [element] : Array.from(element.querySelectorAll('img'));\n            });\n          \n          if (addedImages.length > 0) {\n            setTimeout(optimizeImages, 100);\n          }\n        }\n      });\n    });\n\n    imageObserver.observe(document.body, {\n      childList: true,\n      subtree: true\n    });\n\n    return () => {\n      clearTimeout(timeout);\n      imageObserver.disconnect();\n    };\n  }, []);\n\n  return null;\n}","size_bytes":4832},"client/src/components/whatsapp-fab.tsx":{"content":"import { MessageCircle } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\n\nexport default function WhatsAppFAB() {\n  const whatsappUrl = \"https://wa.me/351930682725?text=Olá!%20Quero%20um%20orçamento%20DOMREALCE\";\n\n  return (\n    <a\n      href={whatsappUrl}\n      target=\"_blank\"\n      rel=\"noopener noreferrer\"\n      className=\"fixed right-4 bottom-4 z-50 md:right-6 md:bottom-6 group\"\n      aria-label=\"Fale connosco no WhatsApp\"\n      data-testid=\"whatsapp-fab\"\n    >\n      <Button\n        size=\"lg\"\n        className=\"\n          w-14 h-14 rounded-full\n          bg-[#25D366] hover:bg-[#20B955] \n          text-white shadow-lg hover:shadow-xl\n          transform transition-all duration-300 ease-out\n          hover:scale-110 active:scale-95\n          animate-whatsapp-pulse hover:animate-none\n          ring-2 ring-[#25D366]/20 hover:ring-[#25D366]/40\n          backdrop-blur-sm will-change-transform\n          focus:outline-none focus:ring-4 focus:ring-[#25D366]/30\n        \"\n      >\n        <MessageCircle size={24} />\n        <span className=\"sr-only\">WhatsApp</span>\n      </Button>\n      \n      {/* Tooltip */}\n      <div className=\"\n        absolute right-16 bottom-2 \n        opacity-0 group-hover:opacity-100\n        transform translate-x-2 group-hover:translate-x-0\n        transition-all duration-300 ease-out\n        pointer-events-none\n        bg-gray-900 text-white text-sm\n        px-3 py-2 rounded-lg shadow-lg\n        whitespace-nowrap\n        before:content-[''] before:absolute before:left-[-6px] before:top-1/2 before:transform before:-translate-y-1/2\n        before:border-t-[6px] before:border-b-[6px] before:border-r-[6px]\n        before:border-transparent before:border-r-gray-900\n      \">\n        Fale connosco!\n      </div>\n    </a>\n  );\n}","size_bytes":1791},"client/src/hooks/use-lazy-images.tsx":{"content":"import { useEffect } from 'react';\n\nexport function useLazyImages() {\n  useEffect(() => {\n    // Add lazy loading to images that don't have it\n    const images = document.querySelectorAll('img:not([loading])');\n    images.forEach(img => {\n      img.setAttribute('loading', 'lazy');\n    });\n\n    // Add alt text fallback for accessibility\n    const imagesWithoutAlt = document.querySelectorAll('img:not([alt])');\n    imagesWithoutAlt.forEach((img, index) => {\n      const src = (img.getAttribute('src') || '').split('/').pop() || `imagem-${index + 1}`;\n      const altText = src.replace(/[-_]/g, ' ').replace(/\\..+$/, '').trim();\n      img.setAttribute('alt', altText);\n    });\n\n    // Intersection Observer for better lazy loading control\n    if ('IntersectionObserver' in window) {\n      const lazyImageObserver = new IntersectionObserver((entries) => {\n        entries.forEach((entry) => {\n          if (entry.isIntersecting) {\n            const img = entry.target as HTMLImageElement;\n            \n            // Add fade-in animation when image loads\n            img.style.opacity = '0';\n            img.style.transition = 'opacity 0.3s ease';\n            \n            img.onload = () => {\n              img.style.opacity = '1';\n            };\n            \n            lazyImageObserver.unobserve(img);\n          }\n        });\n      });\n\n      // Observe all lazy images\n      document.querySelectorAll('img[loading=\"lazy\"]').forEach((img) => {\n        lazyImageObserver.observe(img);\n      });\n\n      // Cleanup observer on component unmount\n      return () => {\n        lazyImageObserver.disconnect();\n      };\n    }\n  }, []);\n}","size_bytes":1634},"client/src/components/skip-link.tsx":{"content":"// DOMREALCE: Skip link for accessibility\n\nexport default function SkipLink() {\n  return (\n    <a \n      href=\"#conteudo\" \n      className=\"skip-link sr-only focus:not-sr-only focus:absolute focus:top-2 focus:left-2 focus:z-50 focus:bg-black focus:text-white focus:px-4 focus:py-2 focus:rounded\"\n    >\n      Saltar para o conteúdo\n    </a>\n  );\n}","size_bytes":347},"client/src/components/social-proof.tsx":{"content":"// DOMREALCE: Social proof section below hero\n\nexport default function SocialProof() {\n  return (\n    <section className=\"bg-gray-50 dark:bg-gray-900 py-8 border-t border-gray-200 dark:border-gray-700\">\n      <div className=\"container mx-auto px-4\">\n        <div className=\"flex flex-col md:flex-row items-center justify-center gap-8\">\n          {/* Years of experience */}\n          <div className=\"text-center\">\n            <div className=\"text-3xl md:text-4xl font-bold text-brand-yellow mb-2\">\n              40+\n            </div>\n            <div className=\"text-sm md:text-base text-gray-600 dark:text-gray-300 font-medium\">\n              Anos de Experiência\n            </div>\n          </div>\n          \n          {/* Separator */}\n          <div className=\"hidden md:block w-px h-16 bg-gray-300 dark:bg-gray-600\"></div>\n          \n          {/* Projects completed */}\n          <div className=\"text-center\">\n            <div className=\"text-3xl md:text-4xl font-bold text-brand-turquoise mb-2\">\n              1000+\n            </div>\n            <div className=\"text-sm md:text-base text-gray-600 dark:text-gray-300 font-medium\">\n              Projetos Realizados\n            </div>\n          </div>\n          \n          {/* Separator */}\n          <div className=\"hidden md:block w-px h-16 bg-gray-300 dark:bg-gray-600\"></div>\n          \n          {/* Trust badge */}\n          <div className=\"text-center\">\n            <div className=\"text-2xl md:text-3xl mb-2\">🏆</div>\n            <div className=\"text-sm md:text-base text-gray-600 dark:text-gray-300 font-medium\">\n              Qualidade Garantida\n            </div>\n          </div>\n          \n          {/* Separator */}\n          <div className=\"hidden md:block w-px h-16 bg-gray-300 dark:bg-gray-600\"></div>\n          \n          {/* Location */}\n          <div className=\"text-center\">\n            <div className=\"text-2xl md:text-3xl mb-2\">📍</div>\n            <div className=\"text-sm md:text-base text-gray-600 dark:text-gray-300 font-medium\">\n              Lisboa, Portugal\n            </div>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}","size_bytes":2135},"client/src/lib/analytics.ts":{"content":"// DOMREALCE: Analytics utilities for enhanced tracking\n\ndeclare global {\n  interface Window {\n    dataLayer: any[];\n    gtag: (...args: any[]) => void;\n  }\n}\n\n// DOMREALCE: GA4 form submit tracking\nexport function trackFormSubmit(formId: string, additionalData?: Record<string, any>) {\n  if (typeof window === 'undefined') return;\n  \n  window.dataLayer = window.dataLayer || [];\n  window.dataLayer.push({\n    event: 'form_submit',\n    form_id: formId,\n    page_path: window.location.pathname,\n    page_title: document.title,\n    timestamp: new Date().toISOString(),\n    ...additionalData\n  });\n  \n  console.log('📊 DOMREALCE: Form submit tracked:', formId);\n}\n\n// DOMREALCE: Enhanced WhatsApp click tracking with origin\nexport function trackWhatsAppClick(origin: string, phoneNumber?: string) {\n  if (typeof window === 'undefined') return;\n  \n  window.dataLayer = window.dataLayer || [];\n  window.dataLayer.push({\n    event: 'whatsapp_click',\n    click_origin: origin,\n    page_path: window.location.pathname,\n    page_title: document.title,\n    phone_number: phoneNumber || '+351930682725',\n    timestamp: new Date().toISOString()\n  });\n  \n  console.log('📱 DOMREALCE: WhatsApp click tracked:', origin);\n}\n\n// DOMREALCE: Page view tracking for SPA\nexport function trackPageView(path: string, title?: string) {\n  if (typeof window === 'undefined' || !window.gtag) return;\n  \n  window.gtag('config', 'GA_MEASUREMENT_ID', {\n    page_path: path,\n    page_title: title || document.title\n  });\n  \n  console.log('📄 DOMREALCE: Page view tracked:', path);\n}\n\n// DOMREALCE: Conversion tracking\nexport function trackConversion(action: string, category: string, value?: number) {\n  if (typeof window === 'undefined') return;\n  \n  window.dataLayer = window.dataLayer || [];\n  window.dataLayer.push({\n    event: 'conversion',\n    event_category: category,\n    event_action: action,\n    event_value: value,\n    page_path: window.location.pathname,\n    timestamp: new Date().toISOString()\n  });\n  \n  console.log('🎯 DOMREALCE: Conversion tracked:', action, category);\n}","size_bytes":2064},"client/src/components/Slider.css":{"content":"/* Slider ocupa tela cheia */\n.slider {\n  position: relative;\n  width: 100%;\n  height: 100vh; /* 100% da altura da tela */\n  overflow: hidden;\n}\n\n.slide {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-size: cover;\n  background-position: center;\n  opacity: 0;\n  transition: opacity 1s ease-in-out;\n}\n\n.slide.active {\n  opacity: 1;\n}\n\n.text-overlay {\n  position: absolute;\n  top: 55%; /* Ligeiramente mais abaixo */\n  left: 50%;\n  transform: translate(-50%, -50%);\n  text-align: center;\n  color: white;\n  padding: 0.5rem;\n  max-width: 85%; /* Mais espaço nas laterais */\n  width: 100%;\n}\n\n/* --- Mobile --- */\n.text-overlay h1 {\n  font-size: 1.2rem; /* Mais compacto */\n  font-weight: 700;\n  color: #FFD700;\n  line-height: 1.1;\n  margin: 0 auto 0.6rem auto;\n  max-width: 90%;\n}\n\n/* Mobile específico */\n@media (max-width: 767px) {\n  .text-overlay h1 {\n    font-size: 1.1rem; /* Ainda menor */\n  }\n  \n  .text-overlay p {\n    font-size: 0.75rem; /* Texto mais pequeno */\n    margin-bottom: 0.8rem;\n    line-height: 1.3;\n  }\n}\n\n.text-overlay p {\n  font-size: 0.75rem; /* Ainda mais compacto */\n  line-height: 1.3;\n  margin-bottom: 0.8rem;\n  color: #fff;\n  max-width: 90%;\n  margin-left: auto;\n  margin-right: auto;\n}\n\n.text-overlay .buttons {\n  display: flex;\n  gap: 0.8rem;\n  justify-content: center;\n  flex-wrap: nowrap;\n}\n\n.text-overlay .btn {\n  padding: 0.8rem 1.6rem;\n  font-size: 0.95rem;\n  font-weight: 600;\n  white-space: nowrap;\n  border-radius: 8px;\n  background: #FFD700;\n  color: #000;\n  transition: all 0.3s;\n}\n\n.text-overlay .btn:hover {\n  opacity: 0.9;\n}\n\n.text-overlay .btn-outline {\n  border: 2px solid #fff;\n  background: transparent;\n  color: #fff;\n}\n\n/* --- Tablet --- */\n@media (min-width: 768px) {\n  .text-overlay h1 {\n    font-size: 1.8rem; /* Mais compacto */\n  }\n\n  .text-overlay p {\n    font-size: 0.9rem;\n    margin-bottom: 1.2rem;\n  }\n}\n\n/* --- Desktop --- */\n@media (min-width: 1024px) {\n  .text-overlay h1 {\n    font-size: 2.8rem; /* Reduzido */\n  }\n\n  .text-overlay p {\n    font-size: 1.1rem; /* Reduzido */\n    margin-bottom: 1.5rem;\n  }\n}\n\n/* Navigation dots */\n.slider-dots {\n  position: absolute;\n  bottom: 20px;\n  width: 100%;\n  display: flex;\n  justify-content: center;\n  gap: 0.5rem;\n}\n\n.dot {\n  width: 12px;\n  height: 12px;\n  border-radius: 50%;\n  border: none;\n  background: #ccc;\n  cursor: pointer;\n  transition: background 0.3s;\n}\n\n.dot.active {\n  background: #FFD700;\n}\n","size_bytes":2451},"client/src/components/Slider.tsx":{"content":"// Admin utilities placeholder file\nexport const adminUtils = {\n  placeholder: true\n};","size_bytes":86},"client/src/pages/admin-portfolio.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport Navigation from \"@/components/navigation\";\nimport { ArrowLeft, Upload, Trash2, Search, FolderOpen, Image, AlertCircle } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface GalleryImage {\n  filename: string;\n  url: string;\n  category: string;\n  title: string;\n  description: string;\n}\n\nexport default function AdminPortfolio() {\n  const { toast } = useToast();\n  const [images, setImages] = useState<GalleryImage[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [selectedCategory, setSelectedCategory] = useState<string>(\"todas\");\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [deleting, setDeleting] = useState<string[]>([]);\n\n  useEffect(() => {\n    fetchImages();\n  }, []);\n\n  const fetchImages = async () => {\n    try {\n      setLoading(true);\n      const response = await fetch('/api/gallery/images');\n      const data = await response.json();\n      \n      const processedImages: GalleryImage[] = data.images.map((filename: string) => ({\n        filename,\n        url: `/public-objects/${filename}`,\n        category: getCategoryFromPath(filename),\n        title: generateTitle(filename),\n        description: `Projeto realizado pela DOMREALCE - ${generateTitle(filename)}`\n      }));\n      \n      setImages(processedImages);\n    } catch (error) {\n      console.error('Error fetching images:', error);\n      toast({\n        title: \"Erro\",\n        description: \"Falha ao carregar imagens do portfólio\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const getCategoryFromPath = (filename: string): string => {\n    const parts = filename.split('/');\n    if (parts.length >= 2) {\n      return parts[1]; // portfolio/Categoria/file.jpg -> Categoria\n    }\n    return \"Outros\";\n  };\n\n  const generateTitle = (filename: string): string => {\n    const parts = filename.split('/');\n    const name = parts[parts.length - 1];\n    return name.replace(/\\.(jpg|jpeg|png|gif|webp)$/i, '').replace(/[_-]/g, ' ');\n  };\n\n  const deleteImage = async (filename: string) => {\n    if (!confirm(`Tem certeza que deseja remover a imagem \"${generateTitle(filename)}\"?`)) {\n      return;\n    }\n\n    setDeleting(prev => [...prev, filename]);\n    \n    try {\n      const response = await fetch('/api/admin/portfolio/delete', {\n        method: 'DELETE',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ filename }),\n      });\n\n      if (response.ok) {\n        setImages(prev => prev.filter(img => img.filename !== filename));\n        toast({\n          title: \"Sucesso\",\n          description: \"Imagem removida com sucesso\",\n        });\n      } else {\n        throw new Error('Falha ao remover imagem');\n      }\n    } catch (error) {\n      console.error('Error deleting image:', error);\n      toast({\n        title: \"Erro\",\n        description: \"Falha ao remover imagem\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setDeleting(prev => prev.filter(f => f !== filename));\n    }\n  };\n\n  const getCategories = () => {\n    const categories = Array.from(new Set(images.map(img => img.category)));\n    return [\"todas\", ...categories.sort()];\n  };\n\n  const filteredImages = images.filter(img => {\n    const matchesCategory = selectedCategory === \"todas\" || img.category === selectedCategory;\n    const matchesSearch = img.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         img.category.toLowerCase().includes(searchTerm.toLowerCase());\n    return matchesCategory && matchesSearch;\n  });\n\n  const getCategoryStats = () => {\n    const stats: Record<string, number> = {};\n    images.forEach(img => {\n      stats[img.category] = (stats[img.category] || 0) + 1;\n    });\n    return stats;\n  };\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen bg-[#0a0a0a] text-white\">\n        <Navigation />\n        <div className=\"container mx-auto px-4 py-16 mt-16\">\n          <div className=\"text-center\">\n            <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-[#FFD700] mx-auto\"></div>\n            <p className=\"mt-4 text-gray-400\">A carregar portfólio...</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  const stats = getCategoryStats();\n\n  return (\n    <div className=\"min-h-screen bg-[#0a0a0a] text-white\">\n      <Navigation />\n      \n      {/* Header */}\n      <div className=\"bg-[#111111] border-b border-[#333] mt-16\">\n        <div className=\"container mx-auto px-4 py-8\">\n          <div className=\"flex items-center gap-4 mb-6\">\n            <Link href=\"/portfolio\">\n              <Button variant=\"outline\" size=\"sm\" className=\"gap-2 border-[#FFD700] text-[#FFD700] hover:bg-[#FFD700] hover:text-black\">\n                <ArrowLeft className=\"h-4 w-4\" />\n                Voltar ao Portfólio\n              </Button>\n            </Link>\n          </div>\n          <h1 className=\"text-4xl font-bold text-white mb-4\">\n            Administração do <span className=\"text-[#FFD700]\">Portfólio</span>\n          </h1>\n          <p className=\"text-gray-300 text-lg\">\n            Gere as imagens do portfólio da DOMREALCE\n          </p>\n        </div>\n      </div>\n\n      {/* Stats */}\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-8\">\n          <Card className=\"bg-[#111111] border-[#333]\">\n            <CardContent className=\"p-6 text-center\">\n              <Image className=\"h-8 w-8 text-[#FFD700] mx-auto mb-2\" />\n              <div className=\"text-2xl font-bold text-white\">{images.length}</div>\n              <div className=\"text-sm text-gray-400\">Total de Imagens</div>\n            </CardContent>\n          </Card>\n          \n          <Card className=\"bg-[#111111] border-[#333]\">\n            <CardContent className=\"p-6 text-center\">\n              <FolderOpen className=\"h-8 w-8 text-[#00d4aa] mx-auto mb-2\" />\n              <div className=\"text-2xl font-bold text-white\">{Object.keys(stats).length}</div>\n              <div className=\"text-sm text-gray-400\">Categorias</div>\n            </CardContent>\n          </Card>\n          \n          <Card className=\"bg-[#111111] border-[#333]\">\n            <CardContent className=\"p-6 text-center\">\n              <AlertCircle className=\"h-8 w-8 text-[#ff6b6b] mx-auto mb-2\" />\n              <div className=\"text-2xl font-bold text-white\">{Math.max(...Object.values(stats), 0)}</div>\n              <div className=\"text-sm text-gray-400\">Maior Categoria</div>\n            </CardContent>\n          </Card>\n          \n          <Card className=\"bg-[#111111] border-[#333]\">\n            <CardContent className=\"p-6 text-center\">\n              <Upload className=\"h-8 w-8 text-[#4dabf7] mx-auto mb-2\" />\n              <div className=\"text-2xl font-bold text-white\">Object Storage</div>\n              <div className=\"text-sm text-gray-400\">Localização</div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Controls */}\n        <Card className=\"bg-[#111111] border-[#333] mb-8\">\n          <CardHeader>\n            <CardTitle className=\"text-[#FFD700]\">Filtros e Pesquisa</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"search\" className=\"text-white mb-2 block\">Pesquisar</Label>\n                <div className=\"relative\">\n                  <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400\" />\n                  <Input\n                    id=\"search\"\n                    placeholder=\"Pesquisar por nome ou categoria...\"\n                    value={searchTerm}\n                    onChange={(e) => setSearchTerm(e.target.value)}\n                    className=\"pl-10 bg-[#222] border-[#444] text-white\"\n                  />\n                </div>\n              </div>\n              \n              <div>\n                <Label className=\"text-white mb-2 block\">Categoria</Label>\n                <select\n                  value={selectedCategory}\n                  onChange={(e) => setSelectedCategory(e.target.value)}\n                  className=\"w-full p-2 bg-[#222] border border-[#444] rounded-md text-white\"\n                >\n                  {getCategories().map(category => (\n                    <option key={category} value={category}>\n                      {category === \"todas\" ? \"Todas as Categorias\" : `${category} (${stats[category] || 0})`}\n                    </option>\n                  ))}\n                </select>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Upload Info */}\n        <Card className=\"bg-[#111111] border-[#333] mb-8\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-start gap-4\">\n              <div className=\"bg-[#FFD700] p-3 rounded-lg\">\n                <Upload className=\"h-6 w-6 text-black\" />\n              </div>\n              <div>\n                <h3 className=\"text-lg font-semibold text-white mb-2\">Como adicionar novas imagens</h3>\n                <p className=\"text-gray-300 mb-4\">\n                  Para adicionar novas imagens ao portfólio, vá ao Object Storage do Replit e crie/use a pasta \"portfolio\" dentro de \"public\".\n                </p>\n                <div className=\"bg-[#222] p-4 rounded-lg\">\n                  <p className=\"text-sm text-gray-400\">\n                    <strong>Estrutura recomendada:</strong><br />\n                    public/portfolio/NomeCategoria/imagem.jpg\n                  </p>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Images Grid */}\n        <Card className=\"bg-[#111111] border-[#333]\">\n          <CardHeader>\n            <CardTitle className=\"text-[#FFD700]\">\n              Imagens do Portfólio \n              <Badge variant=\"secondary\" className=\"ml-2 bg-[#FFD700] text-black\">\n                {filteredImages.length} imagens\n              </Badge>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            {filteredImages.length === 0 ? (\n              <div className=\"text-center py-12\">\n                <Image className=\"h-16 w-16 text-gray-400 mx-auto mb-4\" />\n                <p className=\"text-gray-400 text-lg\">Nenhuma imagem encontrada</p>\n                <p className=\"text-gray-500 text-sm\">Ajuste os filtros ou adicione imagens ao portfólio</p>\n              </div>\n            ) : (\n              <div className=\"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6\">\n                {filteredImages.map((image) => (\n                  <div key={image.filename} className=\"bg-[#222] rounded-lg overflow-hidden border border-[#333] hover:border-[#FFD700] transition-colors\">\n                    <div className=\"aspect-square relative\">\n                      <img \n                        src={image.url} \n                        alt={image.title}\n                        className=\"w-full h-full object-cover\"\n                        loading=\"lazy\"\n                      />\n                      <div className=\"absolute top-2 right-2\">\n                        <Button\n                          size=\"sm\"\n                          variant=\"destructive\"\n                          className=\"h-8 w-8 p-0\"\n                          onClick={() => deleteImage(image.filename)}\n                          disabled={deleting.includes(image.filename)}\n                        >\n                          {deleting.includes(image.filename) ? (\n                            <div className=\"h-4 w-4 animate-spin rounded-full border-2 border-white border-t-transparent\"></div>\n                          ) : (\n                            <Trash2 className=\"h-4 w-4\" />\n                          )}\n                        </Button>\n                      </div>\n                    </div>\n                    <div className=\"p-4\">\n                      <Badge variant=\"outline\" className=\"mb-2 border-[#FFD700] text-[#FFD700]\">\n                        {image.category}\n                      </Badge>\n                      <h3 className=\"text-white font-medium text-sm mb-1 truncate\">\n                        {image.title}\n                      </h3>\n                      <p className=\"text-gray-400 text-xs\">\n                        {image.filename.split('/').pop()}\n                      </p>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":12943},"client/src/pages/admin-dashboard.tsx":{"content":"import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport Navigation from \"@/components/navigation\";\nimport { ArrowLeft, Monitor, Package, FileText, Image, Users, Palette, Store, FolderOpen, Wand2 } from \"lucide-react\";\nimport { Link } from \"wouter\";\n\nconst adminSections = [\n  {\n    title: \"Slider Homepage\",\n    description: \"Gere as imagens e textos do slider principal\",\n    href: \"/admin/slider\",\n    icon: Monitor,\n    color: \"text-[#FFD700]\",\n    bg: \"hover:bg-[#FFD700]/10\",\n  },\n  {\n    title: \"Configurações de Páginas\",\n    description: \"Edite textos, cores, tamanhos e imagens de todas as páginas\",\n    href: \"/admin/pages\",\n    icon: Palette,\n    color: \"text-[#e84b5e]\",\n    bg: \"hover:bg-[#e84b5e]/10\",\n  },\n  {\n    title: \"Produtos em Destaque\",\n    description: \"Administre os produtos exibidos na homepage\",\n    href: \"/admin/produtos\",\n    icon: Package,\n    color: \"text-[#00d4aa]\",\n    bg: \"hover:bg-[#00d4aa]/10\",\n  },\n  {\n    title: \"Notícias & Artigos\",\n    description: \"Crie e edite notícias para o site\",\n    href: \"/admin/noticias\",\n    icon: FileText,\n    color: \"text-[#4dabf7]\",\n    bg: \"hover:bg-[#4dabf7]/10\",\n  },\n  {\n    title: \"Portfólio\",\n    description: \"Gerencie imagens do portfólio por categoria\",\n    href: \"/admin/portfolio\",\n    icon: Image,\n    color: \"text-[#ff6b35]\",\n    bg: \"hover:bg-[#ff6b35]/10\",\n  },\n  {\n    title: \"Contactos\",\n    description: \"Visualize mensagens de contacto recebidas\",\n    href: \"/admin/contactos\",\n    icon: Users,\n    color: \"text-purple-400\",\n    bg: \"hover:bg-purple-400/10\",\n  },\n  {\n    title: \"Loja Online\",\n    description: \"Administre produtos e texturas da loja\",\n    href: \"/admin/loja\",\n    icon: Store,\n    color: \"text-pink-400\",\n    bg: \"hover:bg-pink-400/10\",\n  },\n  {\n    title: \"Editor Visual\",\n    description: \"Editor WYSIWYG para criar páginas com drag & drop\",\n    href: \"/admin/editor\",\n    icon: Wand2,\n    color: \"text-[#FFD700]\",\n    bg: \"hover:bg-[#FFD700]/10\",\n  },\n  {\n    title: \"Gestor de Mídia\",\n    description: \"Centralize e organize todas as imagens do site\",\n    href: \"/admin/media\",\n    icon: FolderOpen,\n    color: \"text-[#4dabf7]\",\n    bg: \"hover:bg-[#4dabf7]/10\",\n  },\n];\n\nexport default function AdminDashboard() {\n  return (\n    <div className=\"min-h-screen bg-[#0a0a0a] text-white\">\n      <Navigation />\n      \n      {/* Header */}\n      <div className=\"bg-[#111111] border-b border-[#333] mt-16\">\n        <div className=\"container mx-auto px-4 py-8\">\n          <div className=\"flex items-center gap-4 mb-6\">\n            <Link href=\"/\">\n              <Button variant=\"outline\" size=\"sm\" className=\"gap-2 border-[#FFD700] text-[#FFD700] hover:bg-[#FFD700] hover:text-black\">\n                <ArrowLeft className=\"h-4 w-4\" />\n                Voltar à Homepage\n              </Button>\n            </Link>\n          </div>\n          <div className=\"text-center\">\n            <h1 className=\"text-4xl md:text-6xl font-bold text-white mb-4\">\n              Administração <span className=\"text-[#FFD700]\">DOMREALCE</span>\n            </h1>\n            <p className=\"text-gray-300 text-lg max-w-2xl mx-auto\">\n              Central de gestão de conteúdo do site. Gerencie todas as secções numa só plataforma.\n            </p>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"container mx-auto px-4 py-12\">\n        {/* Stats Overview */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-12\">\n          <Card className=\"bg-[#111111] border-[#333]\">\n            <CardContent className=\"p-6 text-center\">\n              <Monitor className=\"h-8 w-8 text-[#FFD700] mx-auto mb-2\" />\n              <div className=\"text-2xl font-bold text-white\">3</div>\n              <div className=\"text-sm text-gray-400\">Slides Ativos</div>\n            </CardContent>\n          </Card>\n          \n          <Card className=\"bg-[#111111] border-[#333]\">\n            <CardContent className=\"p-6 text-center\">\n              <Image className=\"h-8 w-8 text-[#00d4aa] mx-auto mb-2\" />\n              <div className=\"text-2xl font-bold text-white\">160+</div>\n              <div className=\"text-sm text-gray-400\">Imagens Portfólio</div>\n            </CardContent>\n          </Card>\n          \n          <Card className=\"bg-[#111111] border-[#333]\">\n            <CardContent className=\"p-6 text-center\">\n              <Package className=\"h-8 w-8 text-[#4dabf7] mx-auto mb-2\" />\n              <div className=\"text-2xl font-bold text-white\">12</div>\n              <div className=\"text-sm text-gray-400\">Produtos Destaque</div>\n            </CardContent>\n          </Card>\n          \n          <Card className=\"bg-[#111111] border-[#333]\">\n            <CardContent className=\"p-6 text-center\">\n              <FileText className=\"h-8 w-8 text-[#ff6b35] mx-auto mb-2\" />\n              <div className=\"text-2xl font-bold text-white\">8</div>\n              <div className=\"text-sm text-gray-400\">Notícias Ativas</div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Admin Sections Grid */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {adminSections.map((section) => {\n            const IconComponent = section.icon;\n            return (\n              <Link key={section.href} href={section.href}>\n                <Card className={`bg-[#111111] border-[#333] transition-all duration-300 cursor-pointer ${section.bg} hover:border-[#555] hover:scale-105`}>\n                  <CardHeader className=\"pb-4\">\n                    <div className=\"flex items-center gap-3\">\n                      <IconComponent className={`h-8 w-8 ${section.color}`} />\n                      <div>\n                        <CardTitle className=\"text-white text-lg\">{section.title}</CardTitle>\n                      </div>\n                    </div>\n                  </CardHeader>\n                  <CardContent>\n                    <CardDescription className=\"text-gray-400 leading-relaxed\">\n                      {section.description}\n                    </CardDescription>\n                    <Button \n                      variant=\"outline\" \n                      className=\"mt-4 w-full border-[#333] text-gray-300 hover:bg-[#222]\"\n                    >\n                      Aceder\n                    </Button>\n                  </CardContent>\n                </Card>\n              </Link>\n            );\n          })}\n        </div>\n\n        {/* Quick Actions */}\n        <div className=\"mt-12\">\n          <Card className=\"bg-[#111111] border-[#333]\">\n            <CardHeader>\n              <CardTitle className=\"text-[#FFD700]\">Acções Rápidas</CardTitle>\n              <CardDescription className=\"text-gray-400\">\n                Operações frequentes para gestão do conteúdo\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-4\">\n                <Link href=\"/admin/editor\">\n                  <Button variant=\"outline\" className=\"w-full gap-2 border-[#FFD700] text-[#FFD700] hover:bg-[#FFD700] hover:text-black\">\n                    <Wand2 className=\"h-4 w-4\" />\n                    Editor Visual\n                  </Button>\n                </Link>\n                \n                <Link href=\"/admin/pages\">\n                  <Button variant=\"outline\" className=\"w-full gap-2 border-[#e84b5e] text-[#e84b5e] hover:bg-[#e84b5e] hover:text-black\">\n                    <Palette className=\"h-4 w-4\" />\n                    Config. Páginas\n                  </Button>\n                </Link>\n                \n                <Link href=\"/admin/media\">\n                  <Button variant=\"outline\" className=\"w-full gap-2 border-[#4dabf7] text-[#4dabf7] hover:bg-[#4dabf7] hover:text-black\">\n                    <FolderOpen className=\"h-4 w-4\" />\n                    Gestor Mídia\n                  </Button>\n                </Link>\n                \n                <Link href=\"/admin/slider\">\n                  <Button variant=\"outline\" className=\"w-full gap-2 border-[#00d4aa] text-[#00d4aa] hover:bg-[#00d4aa] hover:text-black\">\n                    <Monitor className=\"h-4 w-4\" />\n                    Novo Slide\n                  </Button>\n                </Link>\n                \n                <Link href=\"/admin/produtos\">\n                  <Button variant=\"outline\" className=\"w-full gap-2 border-[#ff6b35] text-[#ff6b35] hover:bg-[#ff6b35] hover:text-black\">\n                    <Package className=\"h-4 w-4\" />\n                    Novo Produto\n                  </Button>\n                </Link>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":8797},"client/src/pages/admin-noticias.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport Navigation from \"@/components/navigation\";\nimport { ArrowLeft, Plus, Edit, Trash2, Save, X, FileText, Calendar, Tag } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { News } from \"@shared/schema\";\n\ninterface NewsForm {\n  titulo: string;\n  descricao: string;\n  categoria: string;\n  imagem: string;\n  data: string;\n}\n\nexport default function AdminNoticias() {\n  const { toast } = useToast();\n  const [noticias, setNoticias] = useState<News[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [editingId, setEditingId] = useState<string | null>(null);\n  const [editForm, setEditForm] = useState<NewsForm>({\n    titulo: \"\", descricao: \"\", categoria: \"\", imagem: \"\", data: \"\"\n  });\n\n  useEffect(() => {\n    fetchNoticias();\n  }, []);\n\n  const fetchNoticias = async () => {\n    try {\n      setLoading(true);\n      const response = await fetch('/api/admin/noticias');\n      const data = await response.json();\n      setNoticias(data.noticias || []);\n    } catch (error) {\n      console.error('Error fetching noticias:', error);\n      toast({\n        title: \"Erro\",\n        description: \"Falha ao carregar notícias\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const saveNoticia = async (noticiaData: NewsForm, noticiaId?: string) => {\n    try {\n      const url = noticiaId ? `/api/admin/noticias/${noticiaId}` : '/api/admin/noticias';\n      const method = noticiaId ? 'PUT' : 'POST';\n      \n      const response = await fetch(url, {\n        method,\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          ...noticiaData,\n          data: new Date(noticiaData.data).toISOString()\n        }),\n      });\n\n      if (response.ok) {\n        await fetchNoticias();\n        setEditingId(null);\n        resetForm();\n        toast({\n          title: \"Sucesso\",\n          description: noticiaId ? \"Notícia atualizada\" : \"Notícia criada\",\n        });\n      } else {\n        throw new Error('Falha ao salvar notícia');\n      }\n    } catch (error) {\n      console.error('Error saving noticia:', error);\n      toast({\n        title: \"Erro\",\n        description: \"Falha ao salvar notícia\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const deleteNoticia = async (noticiaId: string) => {\n    if (!confirm('Tem certeza que deseja remover esta notícia?')) return;\n\n    try {\n      const response = await fetch(`/api/admin/noticias/${noticiaId}`, {\n        method: 'DELETE',\n      });\n\n      if (response.ok) {\n        await fetchNoticias();\n        toast({\n          title: \"Sucesso\",\n          description: \"Notícia removida\",\n        });\n      } else {\n        throw new Error('Falha ao remover notícia');\n      }\n    } catch (error) {\n      console.error('Error deleting noticia:', error);\n      toast({\n        title: \"Erro\",\n        description: \"Falha ao remover notícia\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const resetForm = () => {\n    setEditForm({\n      titulo: \"\", descricao: \"\", categoria: \"\", imagem: \"\", data: \"\"\n    });\n  };\n\n  const startEdit = (noticia: News) => {\n    setEditingId(noticia.id);\n    setEditForm({\n      titulo: noticia.titulo,\n      descricao: noticia.descricao,\n      categoria: noticia.categoria,\n      imagem: noticia.imagem,\n      data: noticia.data ? new Date(noticia.data).toISOString().split('T')[0] : \"\"\n    });\n  };\n\n  const cancelEdit = () => {\n    setEditingId(null);\n    resetForm();\n  };\n\n  const formatDate = (date: Date | null) => {\n    if (!date) return 'N/A';\n    return new Date(date).toLocaleDateString('pt-PT');\n  };\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen bg-[#0a0a0a] text-white\">\n        <Navigation />\n        <div className=\"container mx-auto px-4 py-16 mt-16\">\n          <div className=\"text-center\">\n            <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-[#FFD700] mx-auto\"></div>\n            <p className=\"mt-4 text-gray-400\">A carregar notícias...</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-[#0a0a0a] text-white\">\n      <Navigation />\n      \n      {/* Header */}\n      <div className=\"bg-[#111111] border-b border-[#333] mt-16\">\n        <div className=\"container mx-auto px-4 py-8\">\n          <div className=\"flex items-center gap-4 mb-6\">\n            <Link href=\"/noticias\">\n              <Button variant=\"outline\" size=\"sm\" className=\"gap-2 border-[#FFD700] text-[#FFD700] hover:bg-[#FFD700] hover:text-black\">\n                <ArrowLeft className=\"h-4 w-4\" />\n                Voltar às Notícias\n              </Button>\n            </Link>\n          </div>\n          <h1 className=\"text-4xl font-bold text-white mb-4\">\n            Administração de <span className=\"text-[#FFD700]\">Notícias</span>\n          </h1>\n          <p className=\"text-gray-300 text-lg\">\n            Gere as notícias e artigos do site\n          </p>\n        </div>\n      </div>\n\n      <div className=\"container mx-auto px-4 py-8\">\n        {/* Stats */}\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-8\">\n          <Card className=\"bg-[#111111] border-[#333]\">\n            <CardContent className=\"p-6 text-center\">\n              <FileText className=\"h-8 w-8 text-[#FFD700] mx-auto mb-2\" />\n              <div className=\"text-2xl font-bold text-white\">{noticias.length}</div>\n              <div className=\"text-sm text-gray-400\">Total Notícias</div>\n            </CardContent>\n          </Card>\n          \n          <Card className=\"bg-[#111111] border-[#333]\">\n            <CardContent className=\"p-6 text-center\">\n              <Calendar className=\"h-8 w-8 text-[#00d4aa] mx-auto mb-2\" />\n              <div className=\"text-2xl font-bold text-white\">\n                {noticias.filter(n => n.data && new Date(n.data) > new Date(Date.now() - 30 * 24 * 60 * 60 * 1000)).length}\n              </div>\n              <div className=\"text-sm text-gray-400\">Últimos 30 dias</div>\n            </CardContent>\n          </Card>\n          \n          <Card className=\"bg-[#111111] border-[#333]\">\n            <CardContent className=\"p-6 text-center\">\n              <Tag className=\"h-8 w-8 text-[#4dabf7] mx-auto mb-2\" />\n              <div className=\"text-2xl font-bold text-white\">\n                {new Set(noticias.map(n => n.categoria)).size}\n              </div>\n              <div className=\"text-sm text-gray-400\">Categorias</div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Add New News */}\n        {editingId === \"new\" && (\n          <Card className=\"bg-[#111111] border-[#333] mb-8\">\n            <CardHeader>\n              <CardTitle className=\"text-[#FFD700]\">Nova Notícia</CardTitle>\n            </CardHeader>\n            <CardContent className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"new-titulo\" className=\"text-white\">Título</Label>\n                <Input\n                  id=\"new-titulo\"\n                  value={editForm.titulo}\n                  onChange={(e) => setEditForm({ ...editForm, titulo: e.target.value })}\n                  placeholder=\"Título da notícia\"\n                  className=\"bg-[#222] border-[#444] text-white mt-1\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"new-categoria\" className=\"text-white\">Categoria</Label>\n                <Input\n                  id=\"new-categoria\"\n                  value={editForm.categoria}\n                  onChange={(e) => setEditForm({ ...editForm, categoria: e.target.value })}\n                  placeholder=\"Categoria da notícia\"\n                  className=\"bg-[#222] border-[#444] text-white mt-1\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"new-data\" className=\"text-white\">Data</Label>\n                <Input\n                  id=\"new-data\"\n                  type=\"date\"\n                  value={editForm.data}\n                  onChange={(e) => setEditForm({ ...editForm, data: e.target.value })}\n                  className=\"bg-[#222] border-[#444] text-white mt-1\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"new-imagem\" className=\"text-white\">URL da Imagem</Label>\n                <Input\n                  id=\"new-imagem\"\n                  value={editForm.imagem}\n                  onChange={(e) => setEditForm({ ...editForm, imagem: e.target.value })}\n                  placeholder=\"https://exemplo.com/noticia.jpg\"\n                  className=\"bg-[#222] border-[#444] text-white mt-1\"\n                />\n              </div>\n              <div className=\"md:col-span-2\">\n                <Label htmlFor=\"new-descricao\" className=\"text-white\">Descrição</Label>\n                <Textarea\n                  id=\"new-descricao\"\n                  value={editForm.descricao}\n                  onChange={(e) => setEditForm({ ...editForm, descricao: e.target.value })}\n                  placeholder=\"Conteúdo da notícia\"\n                  rows={6}\n                  className=\"bg-[#222] border-[#444] text-white mt-1\"\n                />\n              </div>\n              <div className=\"md:col-span-2 flex gap-2\">\n                <Button \n                  onClick={() => saveNoticia(editForm)}\n                  className=\"bg-[#FFD700] text-black hover:bg-yellow-400\"\n                >\n                  <Save className=\"w-4 h-4 mr-2\" />\n                  Salvar Notícia\n                </Button>\n                <Button onClick={cancelEdit} variant=\"outline\">\n                  <X className=\"w-4 h-4 mr-2\" />\n                  Cancelar\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Add Button */}\n        {editingId !== \"new\" && (\n          <Card className=\"bg-[#111111] border-[#333] mb-8\">\n            <CardContent className=\"p-6 text-center\">\n              <Button \n                onClick={() => setEditingId(\"new\")}\n                className=\"bg-[#FFD700] text-black hover:bg-yellow-400\"\n              >\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Adicionar Nova Notícia\n              </Button>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* News List */}\n        <Card className=\"bg-[#111111] border-[#333]\">\n          <CardHeader>\n            <CardTitle className=\"text-[#FFD700]\">\n              Notícias\n              <Badge variant=\"secondary\" className=\"ml-2 bg-[#FFD700] text-black\">\n                {noticias.length} notícias\n              </Badge>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            {noticias.length === 0 ? (\n              <div className=\"text-center py-12\">\n                <FileText className=\"h-16 w-16 text-gray-400 mx-auto mb-4\" />\n                <p className=\"text-gray-400 text-lg\">Nenhuma notícia encontrada</p>\n                <p className=\"text-gray-500 text-sm\">Adicione notícias para o site</p>\n              </div>\n            ) : (\n              <div className=\"space-y-6\">\n                {noticias.map((noticia) => (\n                  <div key={noticia.id} className=\"bg-[#222] rounded-lg border border-[#333] overflow-hidden\">\n                    {editingId === noticia.id ? (\n                      <div className=\"p-6 space-y-4\">\n                        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                          <div>\n                            <Label className=\"text-white\">Título</Label>\n                            <Input\n                              value={editForm.titulo}\n                              onChange={(e) => setEditForm({ ...editForm, titulo: e.target.value })}\n                              className=\"bg-[#333] border-[#444] text-white mt-1\"\n                            />\n                          </div>\n                          <div>\n                            <Label className=\"text-white\">Categoria</Label>\n                            <Input\n                              value={editForm.categoria}\n                              onChange={(e) => setEditForm({ ...editForm, categoria: e.target.value })}\n                              className=\"bg-[#333] border-[#444] text-white mt-1\"\n                            />\n                          </div>\n                          <div>\n                            <Label className=\"text-white\">Data</Label>\n                            <Input\n                              type=\"date\"\n                              value={editForm.data}\n                              onChange={(e) => setEditForm({ ...editForm, data: e.target.value })}\n                              className=\"bg-[#333] border-[#444] text-white mt-1\"\n                            />\n                          </div>\n                          <div>\n                            <Label className=\"text-white\">URL da Imagem</Label>\n                            <Input\n                              value={editForm.imagem}\n                              onChange={(e) => setEditForm({ ...editForm, imagem: e.target.value })}\n                              className=\"bg-[#333] border-[#444] text-white mt-1\"\n                            />\n                          </div>\n                        </div>\n                        <div>\n                          <Label className=\"text-white\">Descrição</Label>\n                          <Textarea\n                            value={editForm.descricao}\n                            onChange={(e) => setEditForm({ ...editForm, descricao: e.target.value })}\n                            rows={4}\n                            className=\"bg-[#333] border-[#444] text-white mt-1\"\n                          />\n                        </div>\n                        <div className=\"flex gap-2\">\n                          <Button \n                            onClick={() => saveNoticia(editForm, noticia.id)}\n                            className=\"bg-[#FFD700] text-black hover:bg-yellow-400\"\n                          >\n                            <Save className=\"w-4 h-4 mr-2\" />\n                            Salvar\n                          </Button>\n                          <Button onClick={cancelEdit} variant=\"outline\">\n                            <X className=\"w-4 h-4 mr-2\" />\n                            Cancelar\n                          </Button>\n                        </div>\n                      </div>\n                    ) : (\n                      <div className=\"flex\">\n                        <div className=\"w-48 h-32 flex-shrink-0\">\n                          <img \n                            src={noticia.imagem} \n                            alt={noticia.titulo}\n                            className=\"w-full h-full object-cover\"\n                          />\n                        </div>\n                        <div className=\"flex-1 p-6\">\n                          <div className=\"flex items-start justify-between\">\n                            <div className=\"flex-1\">\n                              <div className=\"flex items-center gap-2 mb-2\">\n                                <Badge variant=\"outline\" className=\"border-[#FFD700] text-[#FFD700]\">\n                                  {noticia.categoria}\n                                </Badge>\n                                <Badge variant=\"secondary\" className=\"bg-[#333] text-gray-300\">\n                                  <Calendar className=\"w-3 h-3 mr-1\" />\n                                  {formatDate(noticia.data)}\n                                </Badge>\n                              </div>\n                              <h3 className=\"text-white font-medium text-lg mb-2\">\n                                {noticia.titulo}\n                              </h3>\n                              <p className=\"text-gray-400 text-sm line-clamp-2\">\n                                {noticia.descricao}\n                              </p>\n                            </div>\n                            <div className=\"flex gap-2 ml-4\">\n                              <Button\n                                size=\"sm\"\n                                variant=\"outline\"\n                                onClick={() => startEdit(noticia)}\n                              >\n                                <Edit className=\"h-4 w-4\" />\n                              </Button>\n                              <Button\n                                size=\"sm\"\n                                variant=\"destructive\"\n                                onClick={() => deleteNoticia(noticia.id)}\n                              >\n                                <Trash2 className=\"h-4 w-4\" />\n                              </Button>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    )}\n                  </div>\n                ))}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":17423},"client/src/pages/admin-produtos.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport Navigation from \"@/components/navigation\";\nimport { ArrowLeft, Plus, Edit, Trash2, Save, X, Package, Star, Euro } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { Product } from \"@shared/schema\";\n\ninterface ProductForm {\n  titulo: string;\n  descricao: string;\n  preco: string;\n  imagem: string;\n  categoria: string;\n  destaque: boolean;\n}\n\nexport default function AdminProdutos() {\n  const { toast } = useToast();\n  const [produtos, setProdutos] = useState<Product[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [editingId, setEditingId] = useState<string | null>(null);\n  const [editForm, setEditForm] = useState<ProductForm>({\n    titulo: \"\", descricao: \"\", preco: \"\", imagem: \"\", categoria: \"\", destaque: false\n  });\n\n  useEffect(() => {\n    fetchProdutos();\n  }, []);\n\n  const fetchProdutos = async () => {\n    try {\n      setLoading(true);\n      const response = await fetch('/api/admin/produtos');\n      const data = await response.json();\n      setProdutos(data.produtos || []);\n    } catch (error) {\n      console.error('Error fetching produtos:', error);\n      toast({\n        title: \"Erro\",\n        description: \"Falha ao carregar produtos\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const saveProduto = async (produtoData: ProductForm, produtoId?: string) => {\n    try {\n      const url = produtoId ? `/api/admin/produtos/${produtoId}` : '/api/admin/produtos';\n      const method = produtoId ? 'PUT' : 'POST';\n      \n      const response = await fetch(url, {\n        method,\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(produtoData),\n      });\n\n      if (response.ok) {\n        await fetchProdutos();\n        setEditingId(null);\n        resetForm();\n        toast({\n          title: \"Sucesso\",\n          description: produtoId ? \"Produto atualizado\" : \"Produto criado\",\n        });\n      } else {\n        throw new Error('Falha ao salvar produto');\n      }\n    } catch (error) {\n      console.error('Error saving produto:', error);\n      toast({\n        title: \"Erro\",\n        description: \"Falha ao salvar produto\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const deleteProduto = async (produtoId: string) => {\n    if (!confirm('Tem certeza que deseja remover este produto?')) return;\n\n    try {\n      const response = await fetch(`/api/admin/produtos/${produtoId}`, {\n        method: 'DELETE',\n      });\n\n      if (response.ok) {\n        await fetchProdutos();\n        toast({\n          title: \"Sucesso\",\n          description: \"Produto removido\",\n        });\n      } else {\n        throw new Error('Falha ao remover produto');\n      }\n    } catch (error) {\n      console.error('Error deleting produto:', error);\n      toast({\n        title: \"Erro\",\n        description: \"Falha ao remover produto\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const resetForm = () => {\n    setEditForm({\n      titulo: \"\", descricao: \"\", preco: \"\", imagem: \"\", categoria: \"\", destaque: false\n    });\n  };\n\n  const startEdit = (produto: Product) => {\n    setEditingId(produto.id);\n    setEditForm({\n      titulo: produto.titulo,\n      descricao: produto.descricao,\n      preco: produto.preco,\n      imagem: produto.imagem,\n      categoria: produto.categoria,\n      destaque: produto.destaque || false\n    });\n  };\n\n  const cancelEdit = () => {\n    setEditingId(null);\n    resetForm();\n  };\n\n  const featuredCount = produtos.filter(p => p.destaque).length;\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen bg-[#0a0a0a] text-white\">\n        <Navigation />\n        <div className=\"container mx-auto px-4 py-16 mt-16\">\n          <div className=\"text-center\">\n            <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-[#FFD700] mx-auto\"></div>\n            <p className=\"mt-4 text-gray-400\">A carregar produtos...</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-[#0a0a0a] text-white\">\n      <Navigation />\n      \n      {/* Header */}\n      <div className=\"bg-[#111111] border-b border-[#333] mt-16\">\n        <div className=\"container mx-auto px-4 py-8\">\n          <div className=\"flex items-center gap-4 mb-6\">\n            <Link href=\"/\">\n              <Button variant=\"outline\" size=\"sm\" className=\"gap-2 border-[#FFD700] text-[#FFD700] hover:bg-[#FFD700] hover:text-black\">\n                <ArrowLeft className=\"h-4 w-4\" />\n                Voltar à Homepage\n              </Button>\n            </Link>\n          </div>\n          <h1 className=\"text-4xl font-bold text-white mb-4\">\n            Administração de <span className=\"text-[#FFD700]\">Produtos</span>\n          </h1>\n          <p className=\"text-gray-300 text-lg\">\n            Gere os produtos em destaque da homepage\n          </p>\n        </div>\n      </div>\n\n      <div className=\"container mx-auto px-4 py-8\">\n        {/* Stats */}\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-8\">\n          <Card className=\"bg-[#111111] border-[#333]\">\n            <CardContent className=\"p-6 text-center\">\n              <Package className=\"h-8 w-8 text-[#FFD700] mx-auto mb-2\" />\n              <div className=\"text-2xl font-bold text-white\">{produtos.length}</div>\n              <div className=\"text-sm text-gray-400\">Total Produtos</div>\n            </CardContent>\n          </Card>\n          \n          <Card className=\"bg-[#111111] border-[#333]\">\n            <CardContent className=\"p-6 text-center\">\n              <Star className=\"h-8 w-8 text-[#00d4aa] mx-auto mb-2\" />\n              <div className=\"text-2xl font-bold text-white\">{featuredCount}</div>\n              <div className=\"text-sm text-gray-400\">Em Destaque</div>\n            </CardContent>\n          </Card>\n          \n          <Card className=\"bg-[#111111] border-[#333]\">\n            <CardContent className=\"p-6 text-center\">\n              <Euro className=\"h-8 w-8 text-[#4dabf7] mx-auto mb-2\" />\n              <div className=\"text-2xl font-bold text-white\">\n                {new Set(produtos.map(p => p.categoria)).size}\n              </div>\n              <div className=\"text-sm text-gray-400\">Categorias</div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Add New Product */}\n        {editingId === \"new\" && (\n          <Card className=\"bg-[#111111] border-[#333] mb-8\">\n            <CardHeader>\n              <CardTitle className=\"text-[#FFD700]\">Novo Produto</CardTitle>\n            </CardHeader>\n            <CardContent className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"new-titulo\" className=\"text-white\">Título</Label>\n                <Input\n                  id=\"new-titulo\"\n                  value={editForm.titulo}\n                  onChange={(e) => setEditForm({ ...editForm, titulo: e.target.value })}\n                  placeholder=\"Nome do produto\"\n                  className=\"bg-[#222] border-[#444] text-white mt-1\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"new-categoria\" className=\"text-white\">Categoria</Label>\n                <Input\n                  id=\"new-categoria\"\n                  value={editForm.categoria}\n                  onChange={(e) => setEditForm({ ...editForm, categoria: e.target.value })}\n                  placeholder=\"Categoria do produto\"\n                  className=\"bg-[#222] border-[#444] text-white mt-1\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"new-preco\" className=\"text-white\">Preço</Label>\n                <Input\n                  id=\"new-preco\"\n                  value={editForm.preco}\n                  onChange={(e) => setEditForm({ ...editForm, preco: e.target.value })}\n                  placeholder=\"€ 99.00\"\n                  className=\"bg-[#222] border-[#444] text-white mt-1\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"new-imagem\" className=\"text-white\">URL da Imagem</Label>\n                <Input\n                  id=\"new-imagem\"\n                  value={editForm.imagem}\n                  onChange={(e) => setEditForm({ ...editForm, imagem: e.target.value })}\n                  placeholder=\"https://exemplo.com/produto.jpg\"\n                  className=\"bg-[#222] border-[#444] text-white mt-1\"\n                />\n              </div>\n              <div className=\"md:col-span-2\">\n                <Label htmlFor=\"new-descricao\" className=\"text-white\">Descrição</Label>\n                <Textarea\n                  id=\"new-descricao\"\n                  value={editForm.descricao}\n                  onChange={(e) => setEditForm({ ...editForm, descricao: e.target.value })}\n                  placeholder=\"Descrição detalhada do produto\"\n                  className=\"bg-[#222] border-[#444] text-white mt-1\"\n                />\n              </div>\n              <div className=\"md:col-span-2 flex items-center space-x-2\">\n                <Checkbox\n                  id=\"new-destaque\"\n                  checked={editForm.destaque}\n                  onCheckedChange={(checked) => setEditForm({ ...editForm, destaque: !!checked })}\n                />\n                <Label htmlFor=\"new-destaque\" className=\"text-white\">Produto em destaque na homepage</Label>\n              </div>\n              <div className=\"md:col-span-2 flex gap-2\">\n                <Button \n                  onClick={() => saveProduto(editForm)}\n                  className=\"bg-[#FFD700] text-black hover:bg-yellow-400\"\n                >\n                  <Save className=\"w-4 h-4 mr-2\" />\n                  Salvar Produto\n                </Button>\n                <Button onClick={cancelEdit} variant=\"outline\">\n                  <X className=\"w-4 h-4 mr-2\" />\n                  Cancelar\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Add Button */}\n        {editingId !== \"new\" && (\n          <Card className=\"bg-[#111111] border-[#333] mb-8\">\n            <CardContent className=\"p-6 text-center\">\n              <Button \n                onClick={() => setEditingId(\"new\")}\n                className=\"bg-[#FFD700] text-black hover:bg-yellow-400\"\n              >\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Adicionar Novo Produto\n              </Button>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Products List */}\n        <Card className=\"bg-[#111111] border-[#333]\">\n          <CardHeader>\n            <CardTitle className=\"text-[#FFD700]\">\n              Produtos\n              <Badge variant=\"secondary\" className=\"ml-2 bg-[#FFD700] text-black\">\n                {produtos.length} produtos\n              </Badge>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            {produtos.length === 0 ? (\n              <div className=\"text-center py-12\">\n                <Package className=\"h-16 w-16 text-gray-400 mx-auto mb-4\" />\n                <p className=\"text-gray-400 text-lg\">Nenhum produto encontrado</p>\n                <p className=\"text-gray-500 text-sm\">Adicione produtos para a homepage</p>\n              </div>\n            ) : (\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                {produtos.map((produto) => (\n                  <div key={produto.id} className=\"bg-[#222] rounded-lg border border-[#333] overflow-hidden\">\n                    {editingId === produto.id ? (\n                      <div className=\"p-6 space-y-4\">\n                        <div>\n                          <Label className=\"text-white\">Título</Label>\n                          <Input\n                            value={editForm.titulo}\n                            onChange={(e) => setEditForm({ ...editForm, titulo: e.target.value })}\n                            className=\"bg-[#333] border-[#444] text-white mt-1\"\n                          />\n                        </div>\n                        <div>\n                          <Label className=\"text-white\">Categoria</Label>\n                          <Input\n                            value={editForm.categoria}\n                            onChange={(e) => setEditForm({ ...editForm, categoria: e.target.value })}\n                            className=\"bg-[#333] border-[#444] text-white mt-1\"\n                          />\n                        </div>\n                        <div>\n                          <Label className=\"text-white\">Preço</Label>\n                          <Input\n                            value={editForm.preco}\n                            onChange={(e) => setEditForm({ ...editForm, preco: e.target.value })}\n                            className=\"bg-[#333] border-[#444] text-white mt-1\"\n                          />\n                        </div>\n                        <div>\n                          <Label className=\"text-white\">URL da Imagem</Label>\n                          <Input\n                            value={editForm.imagem}\n                            onChange={(e) => setEditForm({ ...editForm, imagem: e.target.value })}\n                            className=\"bg-[#333] border-[#444] text-white mt-1\"\n                          />\n                        </div>\n                        <div>\n                          <Label className=\"text-white\">Descrição</Label>\n                          <Textarea\n                            value={editForm.descricao}\n                            onChange={(e) => setEditForm({ ...editForm, descricao: e.target.value })}\n                            className=\"bg-[#333] border-[#444] text-white mt-1\"\n                          />\n                        </div>\n                        <div className=\"flex items-center space-x-2\">\n                          <Checkbox\n                            checked={editForm.destaque}\n                            onCheckedChange={(checked) => setEditForm({ ...editForm, destaque: !!checked })}\n                          />\n                          <Label className=\"text-white\">Produto em destaque</Label>\n                        </div>\n                        <div className=\"flex gap-2\">\n                          <Button \n                            onClick={() => saveProduto(editForm, produto.id)}\n                            className=\"bg-[#FFD700] text-black hover:bg-yellow-400\"\n                          >\n                            <Save className=\"w-4 h-4 mr-2\" />\n                            Salvar\n                          </Button>\n                          <Button onClick={cancelEdit} variant=\"outline\">\n                            <X className=\"w-4 h-4 mr-2\" />\n                            Cancelar\n                          </Button>\n                        </div>\n                      </div>\n                    ) : (\n                      <>\n                        <div className=\"h-48 relative\">\n                          <img \n                            src={produto.imagem} \n                            alt={produto.titulo}\n                            className=\"w-full h-full object-cover\"\n                          />\n                          {produto.destaque && (\n                            <Badge className=\"absolute top-2 right-2 bg-[#FFD700] text-black\">\n                              <Star className=\"w-3 h-3 mr-1\" />\n                              Destaque\n                            </Badge>\n                          )}\n                        </div>\n                        <div className=\"p-6\">\n                          <div className=\"flex items-start justify-between mb-2\">\n                            <Badge variant=\"outline\" className=\"border-[#FFD700] text-[#FFD700]\">\n                              {produto.categoria}\n                            </Badge>\n                            <div className=\"flex gap-2\">\n                              <Button\n                                size=\"sm\"\n                                variant=\"outline\"\n                                onClick={() => startEdit(produto)}\n                              >\n                                <Edit className=\"h-4 w-4\" />\n                              </Button>\n                              <Button\n                                size=\"sm\"\n                                variant=\"destructive\"\n                                onClick={() => deleteProduto(produto.id)}\n                              >\n                                <Trash2 className=\"h-4 w-4\" />\n                              </Button>\n                            </div>\n                          </div>\n                          <h3 className=\"text-white font-medium text-lg mb-2\">\n                            {produto.titulo}\n                          </h3>\n                          <p className=\"text-gray-400 text-sm mb-3 line-clamp-2\">\n                            {produto.descricao}\n                          </p>\n                          <div className=\"text-[#FFD700] font-bold text-xl\">\n                            {produto.preco}\n                          </div>\n                        </div>\n                      </>\n                    )}\n                  </div>\n                ))}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":17778},"client/src/pages/admin-slider.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport Navigation from \"@/components/navigation\";\nimport { ArrowLeft, Plus, Edit, Trash2, Save, X, Image, Monitor } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { ImageSelector } from \"@/components/ImageSelector\";\n\ninterface SlideData {\n  id: number;\n  image: string;\n  title: string;\n  text: string;\n}\n\nexport default function AdminSlider() {\n  const { toast } = useToast();\n  const [slides, setSlides] = useState<SlideData[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [editingId, setEditingId] = useState<number | null>(null);\n  const [editForm, setEditForm] = useState({ image: \"\", title: \"\", text: \"\" });\n\n  useEffect(() => {\n    fetchSlides();\n  }, []);\n\n  const fetchSlides = async () => {\n    try {\n      setLoading(true);\n      const response = await fetch('/api/admin/slider');\n      const data = await response.json();\n      setSlides(data.slides || []);\n    } catch (error) {\n      console.error('Error fetching slides:', error);\n      toast({\n        title: \"Erro\",\n        description: \"Falha ao carregar slides\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const syncSliderImages = async () => {\n    try {\n      setLoading(true);\n      const response = await fetch('/api/slider/images');\n      if (response.ok) {\n        await fetchSlides();\n        toast({\n          title: \"Sucesso\",\n          description: \"Imagens sincronizadas automaticamente\",\n        });\n      } else {\n        throw new Error('Falha na sincronização');\n      }\n    } catch (error) {\n      console.error('Error syncing images:', error);\n      toast({\n        title: \"Erro\",\n        description: \"Falha ao sincronizar imagens\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const saveSlide = async (slideData: Omit<SlideData, 'id'>, slideId?: number) => {\n    try {\n      const url = slideId ? `/api/admin/slider/${slideId}` : '/api/admin/slider';\n      const method = slideId ? 'PUT' : 'POST';\n      \n      const response = await fetch(url, {\n        method,\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(slideData),\n      });\n\n      if (response.ok) {\n        await fetchSlides();\n        setEditingId(null);\n        setEditForm({ image: \"\", title: \"\", text: \"\" });\n        toast({\n          title: \"Sucesso\",\n          description: slideId ? \"Slide atualizado\" : \"Slide criado\",\n        });\n      } else {\n        throw new Error('Falha ao salvar slide');\n      }\n    } catch (error) {\n      console.error('Error saving slide:', error);\n      toast({\n        title: \"Erro\",\n        description: \"Falha ao salvar slide\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const deleteSlide = async (slideId: number) => {\n    if (!confirm('Tem certeza que deseja remover este slide?')) return;\n\n    try {\n      const response = await fetch(`/api/admin/slider/${slideId}`, {\n        method: 'DELETE',\n      });\n\n      if (response.ok) {\n        await fetchSlides();\n        toast({\n          title: \"Sucesso\",\n          description: \"Slide removido\",\n        });\n      } else {\n        throw new Error('Falha ao remover slide');\n      }\n    } catch (error) {\n      console.error('Error deleting slide:', error);\n      toast({\n        title: \"Erro\",\n        description: \"Falha ao remover slide\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const startEdit = (slide: SlideData) => {\n    setEditingId(slide.id);\n    setEditForm({ image: slide.image, title: slide.title, text: slide.text });\n  };\n\n  const cancelEdit = () => {\n    setEditingId(null);\n    setEditForm({ image: \"\", title: \"\", text: \"\" });\n  };\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen bg-[#0a0a0a] text-white\">\n        <Navigation />\n        <div className=\"container mx-auto px-4 py-16 mt-16\">\n          <div className=\"text-center\">\n            <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-[#FFD700] mx-auto\"></div>\n            <p className=\"mt-4 text-gray-400\">A carregar slides...</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-[#0a0a0a] text-white\">\n      <Navigation />\n      \n      {/* Header */}\n      <div className=\"bg-[#111111] border-b border-[#333] mt-16\">\n        <div className=\"container mx-auto px-4 py-8\">\n          <div className=\"flex items-center gap-4 mb-6\">\n            <Link href=\"/\">\n              <Button variant=\"outline\" size=\"sm\" className=\"gap-2 border-[#FFD700] text-[#FFD700] hover:bg-[#FFD700] hover:text-black\">\n                <ArrowLeft className=\"h-4 w-4\" />\n                Voltar à Homepage\n              </Button>\n            </Link>\n          </div>\n          <h1 className=\"text-4xl font-bold text-white mb-4\">\n            Administração do <span className=\"text-[#FFD700]\">Slider</span>\n          </h1>\n          <p className=\"text-gray-300 text-lg\">\n            Gere as imagens e textos do slider da página inicial\n          </p>\n        </div>\n      </div>\n\n      <div className=\"container mx-auto px-4 py-8\">\n        {/* Stats */}\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-8\">\n          <Card className=\"bg-[#111111] border-[#333]\">\n            <CardContent className=\"p-6 text-center\">\n              <Monitor className=\"h-8 w-8 text-[#FFD700] mx-auto mb-2\" />\n              <div className=\"text-2xl font-bold text-white\">{slides.length}</div>\n              <div className=\"text-sm text-gray-400\">Slides Ativos</div>\n            </CardContent>\n          </Card>\n          \n          <Card className=\"bg-[#111111] border-[#333]\">\n            <CardContent className=\"p-6 text-center\">\n              <Image className=\"h-8 w-8 text-[#00d4aa] mx-auto mb-2\" />\n              <div className=\"text-2xl font-bold text-white\">5s</div>\n              <div className=\"text-sm text-gray-400\">Tempo por Slide</div>\n            </CardContent>\n          </Card>\n          \n          <Card className=\"bg-[#111111] border-[#333]\">\n            <CardContent className=\"p-6 text-center\">\n              <Plus className=\"h-8 w-8 text-[#4dabf7] mx-auto mb-2\" />\n              <div className=\"text-2xl font-bold text-white\">100vh</div>\n              <div className=\"text-sm text-gray-400\">Altura Total</div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Action Buttons */}\n        <div className=\"flex gap-4 mb-8\">\n          <Button \n            onClick={() => setEditingId(-1)}\n            className=\"bg-[#FFD700] text-black hover:bg-yellow-400\"\n            disabled={loading}\n          >\n            <Plus className=\"h-4 w-4 mr-2\" />\n            Adicionar Novo Slide\n          </Button>\n          \n          <Button \n            onClick={syncSliderImages}\n            variant=\"outline\"\n            className=\"border-[#00d4aa] text-[#00d4aa] hover:bg-[#00d4aa] hover:text-black\"\n            disabled={loading}\n          >\n            <Image className=\"h-4 w-4 mr-2\" />\n            Detectar Imagens Automaticamente\n          </Button>\n        </div>\n\n        {/* Add New Slide */}\n        {editingId === -1 && (\n          <Card className=\"bg-[#111111] border-[#333] mb-8\">\n            <CardHeader>\n              <CardTitle className=\"text-[#FFD700]\">Novo Slide</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div>\n                <Label className=\"text-white\">Imagem do Slide</Label>\n                <div className=\"mt-2\">\n                  <ImageSelector \n                    selectedImage={editForm.image}\n                    onImageSelect={(imageUrl) => setEditForm({ ...editForm, image: imageUrl })}\n                    placeholder=\"Adicionar Imagem\"\n                  />\n                </div>\n              </div>\n              <div>\n                <Label htmlFor=\"new-title\" className=\"text-white\">Título</Label>\n                <Input\n                  id=\"new-title\"\n                  value={editForm.title}\n                  onChange={(e) => setEditForm({ ...editForm, title: e.target.value })}\n                  placeholder=\"Título do slide\"\n                  className=\"bg-[#222] border-[#444] text-white mt-1\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"new-text\" className=\"text-white\">Descrição</Label>\n                <Textarea\n                  id=\"new-text\"\n                  value={editForm.text}\n                  onChange={(e) => setEditForm({ ...editForm, text: e.target.value })}\n                  placeholder=\"Texto descritivo do slide\"\n                  className=\"bg-[#222] border-[#444] text-white mt-1\"\n                />\n              </div>\n              <div className=\"flex gap-2\">\n                <Button \n                  onClick={() => saveSlide(editForm)}\n                  className=\"bg-[#FFD700] text-black hover:bg-yellow-400\"\n                >\n                  <Save className=\"w-4 h-4 mr-2\" />\n                  Salvar\n                </Button>\n                <Button onClick={cancelEdit} variant=\"outline\">\n                  <X className=\"w-4 h-4 mr-2\" />\n                  Cancelar\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Add Button */}\n        {editingId !== -1 && (\n          <Card className=\"bg-[#111111] border-[#333] mb-8\">\n            <CardContent className=\"p-6 text-center\">\n              <Button \n                onClick={() => setEditingId(-1)}\n                className=\"bg-[#FFD700] text-black hover:bg-yellow-400\"\n              >\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Adicionar Novo Slide\n              </Button>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Slides List */}\n        <Card className=\"bg-[#111111] border-[#333]\">\n          <CardHeader>\n            <CardTitle className=\"text-[#FFD700]\">\n              Slides do Homepage\n              <Badge variant=\"secondary\" className=\"ml-2 bg-[#FFD700] text-black\">\n                {slides.length} slides\n              </Badge>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            {slides.length === 0 ? (\n              <div className=\"text-center py-12\">\n                <Monitor className=\"h-16 w-16 text-gray-400 mx-auto mb-4\" />\n                <p className=\"text-gray-400 text-lg\">Nenhum slide encontrado</p>\n                <p className=\"text-gray-500 text-sm\">Adicione slides para a página inicial</p>\n              </div>\n            ) : (\n              <div className=\"space-y-6\">\n                {slides.map((slide, index) => (\n                  <div key={slide.id} className=\"bg-[#222] rounded-lg border border-[#333] overflow-hidden\">\n                    {editingId === slide.id ? (\n                      <div className=\"p-6 space-y-4\">\n                        <div>\n                          <Label className=\"text-white\">Imagem do Slide</Label>\n                          <div className=\"mt-2\">\n                            <ImageSelector \n                              selectedImage={editForm.image}\n                              onImageSelect={(imageUrl) => {\n                                // Apenas atualizar a imagem, preservar título e texto\n                                setEditForm(prev => ({ ...prev, image: imageUrl }));\n                              }}\n                              placeholder=\"Alterar Imagem\"\n                            />\n                          </div>\n                        </div>\n                        <div>\n                          <Label className=\"text-white\">Título</Label>\n                          <Input\n                            value={editForm.title}\n                            onChange={(e) => setEditForm({ ...editForm, title: e.target.value })}\n                            className=\"bg-[#333] border-[#444] text-white mt-1\"\n                          />\n                        </div>\n                        <div>\n                          <Label className=\"text-white\">Descrição</Label>\n                          <Textarea\n                            value={editForm.text}\n                            onChange={(e) => setEditForm({ ...editForm, text: e.target.value })}\n                            className=\"bg-[#333] border-[#444] text-white mt-1\"\n                          />\n                        </div>\n                        <div className=\"flex gap-2\">\n                          <Button \n                            onClick={() => saveSlide(editForm, slide.id)}\n                            className=\"bg-[#FFD700] text-black hover:bg-yellow-400\"\n                          >\n                            <Save className=\"w-4 h-4 mr-2\" />\n                            Salvar\n                          </Button>\n                          <Button onClick={cancelEdit} variant=\"outline\">\n                            <X className=\"w-4 h-4 mr-2\" />\n                            Cancelar\n                          </Button>\n                        </div>\n                      </div>\n                    ) : (\n                      <div className=\"flex\">\n                        <div className=\"w-48 h-32 flex-shrink-0\">\n                          <img \n                            src={slide.image} \n                            alt={slide.title}\n                            className=\"w-full h-full object-cover\"\n                          />\n                        </div>\n                        <div className=\"flex-1 p-6\">\n                          <div className=\"flex items-start justify-between\">\n                            <div>\n                              <Badge variant=\"outline\" className=\"mb-2 border-[#FFD700] text-[#FFD700]\">\n                                Slide {index + 1}\n                              </Badge>\n                              <h3 className=\"text-white font-medium text-lg mb-2\">\n                                {slide.title}\n                              </h3>\n                              <p className=\"text-gray-400 text-sm\">\n                                {slide.text}\n                              </p>\n                            </div>\n                            <div className=\"flex gap-2 ml-4\">\n                              <Button\n                                size=\"sm\"\n                                variant=\"outline\"\n                                onClick={() => startEdit(slide)}\n                              >\n                                <Edit className=\"h-4 w-4\" />\n                              </Button>\n                              <Button\n                                size=\"sm\"\n                                variant=\"destructive\"\n                                onClick={() => deleteSlide(slide.id)}\n                              >\n                                <Trash2 className=\"h-4 w-4\" />\n                              </Button>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    )}\n                  </div>\n                ))}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":15609},"client/src/pages/admin-loja.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport Navigation from \"@/components/navigation\";\nimport { ArrowLeft, Plus, Edit, Trash2, Save, X, Store, Palette, RefreshCw, Image, Package, CheckCircle, AlertCircle } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport type { Product } from \"@shared/schema\";\n\ninterface ProductForm {\n  titulo: string;\n  descricao: string;\n  preco: string;\n  imagem: string;\n  categoria: string;\n  destaque: boolean;\n}\n\ninterface TextureCover {\n  name: string;\n  path: string;\n  fileName: string;\n  textureCount: number;\n}\n\ninterface CanvasCover {\n  name: string;\n  path: string;\n  fileName: string;\n  imageCount: number;\n}\n\ninterface CanvasImage {\n  name: string;\n  path: string;\n  fileName: string;\n  category: string;\n}\n\nexport default function AdminLoja() {\n  const { toast } = useToast();\n  const [produtos, setProdutos] = useState<Product[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [editingId, setEditingId] = useState<string | null>(null);\n  const [editForm, setEditForm] = useState<ProductForm>({\n    titulo: \"\", descricao: \"\", preco: \"\", imagem: \"\", categoria: \"Papel de Parede\", destaque: false\n  });\n  const [isGenerating, setIsGenerating] = useState(false);\n  const [lastResult, setLastResult] = useState<any>(null);\n\n  // Fetch texture images for the store\n  const { data: images } = useQuery({\n    queryKey: [\"/api/loja/images\"],\n  });\n\n  useEffect(() => {\n    fetchProdutos();\n  }, []);\n\n  const fetchProdutos = async () => {\n    try {\n      setLoading(true);\n      const response = await fetch('/api/admin/loja');\n      const data = await response.json();\n      setProdutos(data.produtos || []);\n    } catch (error) {\n      console.error('Error fetching loja produtos:', error);\n      toast({\n        title: \"Erro\",\n        description: \"Falha ao carregar produtos da loja\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Get texture categories from images (papel de parede)\n  const textureCovers: TextureCover[] = (images as { images: string[] })?.images\n    ?.filter((path: string) => path.includes('capas-texturas'))\n    ?.map((path: string) => {\n      const fileName = path.split('/').pop()?.replace('.webp', '') || '';\n      const displayName = fileName\n        .replace(/-/g, ' ')\n        .replace(/\\b\\w/g, (l: string) => l.toUpperCase());\n      \n      // Count textures in this category\n      const categoryImages = (images as { images: string[] })?.images\n        ?.filter((imgPath: string) => \n          imgPath.includes(`texturas/${fileName}/`) &&\n          /\\.(jpg|jpeg|png|gif|webp)$/i.test(imgPath)\n        ) || [];\n      \n      return {\n        name: displayName,\n        path: `/public-objects/${path}`,\n        fileName: fileName,\n        textureCount: categoryImages.length\n      };\n    })\n    ?.filter((texture) => texture.textureCount > 0) || [];\n\n  // Get canvas covers (capas dos quadros)\n  const canvasCovers: CanvasCover[] = (images as { images: string[] })?.images\n    ?.filter((path: string) => path.includes('Capas-quadros-em-canvas'))\n    ?.map((path: string) => {\n      const fileName = path.split('/').pop()?.replace('.webp', '') || '';\n      const displayName = fileName\n        .replace(/-/g, ' ')\n        .replace(/\\b\\w/g, (l: string) => l.toUpperCase());\n      \n      // Count canvas images in this category\n      const categoryImages = (images as { images: string[] })?.images\n        ?.filter((imgPath: string) => \n          imgPath.includes(`Quadros-em-canvas/${fileName}/`) &&\n          /\\.(jpg|jpeg|png|gif|webp)$/i.test(imgPath)\n        ) || [];\n      \n      return {\n        name: displayName,\n        path: `/public-objects/${path}`,\n        fileName: fileName,\n        imageCount: categoryImages.length\n      };\n    })\n    ?.filter((cover) => cover.imageCount > 0) || [];\n\n  // Get all canvas images with their categories\n  const canvasImages: CanvasImage[] = (images as { images: string[] })?.images\n    ?.filter((path: string) => \n      path.includes('Quadros-em-canvas/') && \n      !path.includes('Capas-quadros-em-canvas') &&\n      /\\.(jpg|jpeg|png|gif|webp)$/i.test(path)\n    )\n    ?.map((path: string) => {\n      const parts = path.split('/');\n      const fileName = parts.pop()?.replace(/\\.(jpg|jpeg|png|gif|webp)$/i, '') || '';\n      const category = parts[parts.length - 1] || '';\n      const displayName = fileName\n        .replace(/-/g, ' ')\n        .replace(/\\b\\w/g, (l: string) => l.toUpperCase());\n      \n      return {\n        name: displayName,\n        path: `/public-objects/${path}`,\n        fileName: fileName,\n        category: category\n      };\n    }) || [];\n\n  const saveProduto = async (produtoData: ProductForm, produtoId?: string) => {\n    try {\n      const url = produtoId ? `/api/admin/loja/${produtoId}` : '/api/admin/loja';\n      const method = produtoId ? 'PUT' : 'POST';\n      \n      const response = await fetch(url, {\n        method,\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(produtoData),\n      });\n\n      if (response.ok) {\n        await fetchProdutos();\n        setEditingId(null);\n        resetForm();\n        toast({\n          title: \"Sucesso\",\n          description: produtoId ? \"Produto da loja atualizado\" : \"Produto da loja criado\",\n        });\n      } else {\n        throw new Error('Falha ao salvar produto da loja');\n      }\n    } catch (error) {\n      console.error('Error saving loja produto:', error);\n      toast({\n        title: \"Erro\",\n        description: \"Falha ao salvar produto da loja\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const deleteProduto = async (produtoId: string) => {\n    if (!confirm('Tem certeza que deseja remover este produto da loja?')) return;\n\n    try {\n      const response = await fetch(`/api/admin/loja/${produtoId}`, {\n        method: 'DELETE',\n      });\n\n      if (response.ok) {\n        await fetchProdutos();\n        toast({\n          title: \"Sucesso\",\n          description: \"Produto da loja removido\",\n        });\n      } else {\n        throw new Error('Falha ao remover produto da loja');\n      }\n    } catch (error) {\n      console.error('Error deleting loja produto:', error);\n      toast({\n        title: \"Erro\",\n        description: \"Falha ao remover produto da loja\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const resetForm = () => {\n    setEditForm({\n      titulo: \"\", descricao: \"\", preco: \"\", imagem: \"\", categoria: \"Papel de Parede\", destaque: false\n    });\n  };\n\n  const startEdit = (produto: Product) => {\n    setEditingId(produto.id);\n    setEditForm({\n      titulo: produto.titulo,\n      descricao: produto.descricao,\n      preco: produto.preco,\n      imagem: produto.imagem,\n      categoria: produto.categoria,\n      destaque: produto.destaque || false\n    });\n  };\n\n  const cancelEdit = () => {\n    setEditingId(null);\n    resetForm();\n  };\n\n  const handleAutoGenerate = async () => {\n    setIsGenerating(true);\n    try {\n      const response = await fetch('/api/auto-generate-covers', {\n        method: 'POST'\n      });\n      \n      const result = await response.json();\n      setLastResult(result);\n      \n      if (response.ok) {\n        toast({\n          title: \"Geração automática concluída!\",\n          description: `${result.coversGenerated?.length || 0} novas capas geradas.`,\n        });\n      } else {\n        toast({\n          title: \"Erro na geração\",\n          description: result.error || \"Erro desconhecido\",\n          variant: \"destructive\",\n        });\n      }\n    } catch (error) {\n      toast({\n        title: \"Erro\",\n        description: \"Falha na comunicação com o servidor\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsGenerating(false);\n    }\n  };\n\n  const lojaProdutos = produtos.filter(p => \n    p.categoria === \"Papel de Parede\" || \n    p.categoria === \"Quadros Canvas\" ||\n    textureCovers.some(t => t.name === p.categoria) ||\n    canvasCovers.some(c => c.name === p.categoria)\n  );\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen bg-[#0a0a0a] text-white\">\n        <Navigation />\n        <div className=\"container mx-auto px-4 py-16 mt-16\">\n          <div className=\"text-center\">\n            <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-[#FFD700] mx-auto\"></div>\n            <p className=\"mt-4 text-gray-400\">A carregar produtos da loja...</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-[#0a0a0a] text-white\">\n      <Navigation />\n      \n      {/* Header */}\n      <div className=\"bg-[#111111] border-b border-[#333] mt-16\">\n        <div className=\"container mx-auto px-4 py-8\">\n          <div className=\"flex items-center gap-4 mb-6\">\n            <Link href=\"/admin\">\n              <Button variant=\"outline\" size=\"sm\" className=\"gap-2 border-[#FFD700] text-[#FFD700] hover:bg-[#FFD700] hover:text-black\">\n                <ArrowLeft className=\"h-4 w-4\" />\n                Voltar ao Dashboard\n              </Button>\n            </Link>\n          </div>\n          <h1 className=\"text-4xl font-bold text-white mb-4\">\n            Administração da <span className=\"text-[#FFD700]\">Loja</span>\n          </h1>\n          <p className=\"text-gray-300 text-lg\">\n            Gere produtos e texturas de papel de parede da loja online\n          </p>\n        </div>\n      </div>\n\n      <div className=\"container mx-auto px-4 py-8\">\n        {/* Stats */}\n        <div className=\"grid grid-cols-1 md:grid-cols-5 gap-4 mb-8\">\n          <Card className=\"bg-[#111111] border-[#333]\">\n            <CardContent className=\"p-6 text-center\">\n              <Store className=\"h-8 w-8 text-[#FFD700] mx-auto mb-2\" />\n              <div className=\"text-2xl font-bold text-white\">{lojaProdutos.length}</div>\n              <div className=\"text-sm text-gray-400\">Produtos Loja</div>\n            </CardContent>\n          </Card>\n          \n          <Card className=\"bg-[#111111] border-[#333]\">\n            <CardContent className=\"p-6 text-center\">\n              <Palette className=\"h-8 w-8 text-[#00d4aa] mx-auto mb-2\" />\n              <div className=\"text-2xl font-bold text-white\">{textureCovers.length}</div>\n              <div className=\"text-sm text-gray-400\">Categorias Texturas</div>\n            </CardContent>\n          </Card>\n          \n          <Card className=\"bg-[#111111] border-[#333]\">\n            <CardContent className=\"p-6 text-center\">\n              <Image className=\"h-8 w-8 text-[#20B2AA] mx-auto mb-2\" />\n              <div className=\"text-2xl font-bold text-white\">{canvasCovers.length}</div>\n              <div className=\"text-sm text-gray-400\">Categorias Canvas</div>\n            </CardContent>\n          </Card>\n          \n          <Card className=\"bg-[#111111] border-[#333]\">\n            <CardContent className=\"p-6 text-center\">\n              <Store className=\"h-8 w-8 text-[#4dabf7] mx-auto mb-2\" />\n              <div className=\"text-2xl font-bold text-white\">\n                {textureCovers.reduce((sum, texture) => sum + texture.textureCount, 0) + canvasImages.length}\n              </div>\n              <div className=\"text-sm text-gray-400\">Total Imagens</div>\n            </CardContent>\n          </Card>\n          \n          <Card className=\"bg-[#111111] border-[#333]\">\n            <CardContent className=\"p-6 text-center\">\n              <Package className=\"h-8 w-8 text-[#ff6b35] mx-auto mb-2\" />\n              <div className=\"text-2xl font-bold text-white\">\n                {lojaProdutos.filter(p => p.destaque).length}\n              </div>\n              <div className=\"text-sm text-gray-400\">Em Destaque</div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Texture Management */}\n        <Card className=\"bg-[#111111] border-[#333] mb-8\">\n          <CardHeader>\n            <CardTitle className=\"text-[#FFD700] flex items-center gap-2\">\n              <Palette className=\"h-5 w-5\" />\n              Gestão de Texturas\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"flex items-center gap-4 mb-4\">\n              <Button \n                onClick={handleAutoGenerate}\n                disabled={isGenerating}\n                className=\"bg-[#00d4aa] text-black hover:bg-[#00b894]\"\n              >\n                {isGenerating ? (\n                  <>\n                    <RefreshCw className=\"w-4 h-4 mr-2 animate-spin\" />\n                    A gerar...\n                  </>\n                ) : (\n                  <>\n                    <RefreshCw className=\"w-4 h-4 mr-2\" />\n                    Auto-gerar Capas\n                  </>\n                )}\n              </Button>\n              <span className=\"text-gray-400 text-sm\">\n                Gera automaticamente capas para novas categorias de texturas\n              </span>\n            </div>\n            \n            {lastResult && (\n              <div className=\"mt-4 p-4 bg-[#222] rounded-lg border border-[#333]\">\n                <div className=\"flex items-center gap-2 mb-2\">\n                  {lastResult.success ? (\n                    <CheckCircle className=\"h-5 w-5 text-green-400\" />\n                  ) : (\n                    <AlertCircle className=\"h-5 w-5 text-red-400\" />\n                  )}\n                  <span className=\"text-white font-medium\">\n                    {lastResult.success ? \"Geração concluída com sucesso\" : \"Erro na geração\"}\n                  </span>\n                </div>\n                <p className=\"text-gray-400 text-sm\">\n                  {lastResult.message || `${lastResult.coversGenerated?.length || 0} capas geradas`}\n                </p>\n              </div>\n            )}\n\n            {/* Texture Categories Grid */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 mt-6\">\n              {textureCovers.map((texture) => (\n                <Card key={texture.fileName} className=\"bg-[#222] border-[#333] overflow-hidden\">\n                  <div className=\"aspect-video\">\n                    <img \n                      src={texture.path} \n                      alt={texture.name}\n                      className=\"w-full h-full object-cover\"\n                    />\n                  </div>\n                  <CardContent className=\"p-4\">\n                    <h3 className=\"text-white font-medium mb-2\">{texture.name}</h3>\n                    <Badge variant=\"outline\" className=\"border-[#00d4aa] text-[#00d4aa]\">\n                      {texture.textureCount} texturas\n                    </Badge>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Canvas Management */}\n        <Card className=\"bg-[#111111] border-[#333] mb-8\">\n          <CardHeader>\n            <CardTitle className=\"text-[#FFD700] flex items-center gap-2\">\n              <Image className=\"h-5 w-5\" />\n              Gestão de Quadros em Canvas\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"mb-6\">\n              <p className=\"text-white mb-4\">\n                Capas e imagens dos quadros em canvas disponíveis no sistema\n              </p>\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"text-center p-4 bg-[#222] rounded-lg\">\n                  <div className=\"text-2xl font-bold text-[#20B2AA]\">\n                    {canvasCovers.length}\n                  </div>\n                  <div className=\"text-sm text-gray-400\">Categorias Canvas</div>\n                </div>\n                <div className=\"text-center p-4 bg-[#222] rounded-lg\">\n                  <div className=\"text-2xl font-bold text-[#FFD700]\">\n                    {canvasImages.length}\n                  </div>\n                  <div className=\"text-sm text-gray-400\">Imagens Canvas</div>\n                </div>\n              </div>\n            </div>\n\n            {/* Canvas Categories Grid */}\n            {canvasCovers.length > 0 && (\n              <div>\n                <h3 className=\"text-white font-semibold mb-4 flex items-center gap-2\">\n                  <Package className=\"h-4 w-4\" />\n                  Capas de Categorias Canvas\n                </h3>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 mb-6\">\n                  {canvasCovers.map((cover) => (\n                    <Card key={cover.fileName} className=\"bg-[#222] border-[#333] overflow-hidden\">\n                      <div className=\"aspect-video\">\n                        <img \n                          src={cover.path} \n                          alt={cover.name}\n                          className=\"w-full h-full object-cover\"\n                        />\n                      </div>\n                      <CardContent className=\"p-4\">\n                        <h4 className=\"text-white font-medium mb-2\">{cover.name}</h4>\n                        <Badge variant=\"outline\" className=\"border-[#20B2AA] text-[#20B2AA]\">\n                          {cover.imageCount} imagens\n                        </Badge>\n                      </CardContent>\n                    </Card>\n                  ))}\n                </div>\n              </div>\n            )}\n\n            {/* Canvas Images Grid */}\n            {canvasImages.length > 0 && (\n              <div>\n                <h3 className=\"text-white font-semibold mb-4 flex items-center gap-2\">\n                  <Image className=\"h-4 w-4\" />\n                  Imagens Canvas Disponíveis\n                </h3>\n                <div className=\"grid grid-cols-2 md:grid-cols-4 lg:grid-cols-6 gap-3\">\n                  {canvasImages.slice(0, 12).map((image, index) => (\n                    <div key={index} className=\"bg-[#222] border border-[#333] rounded overflow-hidden\">\n                      <div className=\"aspect-square\">\n                        <img \n                          src={image.path} \n                          alt={image.name}\n                          className=\"w-full h-full object-cover\"\n                        />\n                      </div>\n                      <div className=\"p-2\">\n                        <div className=\"text-xs text-white truncate\" title={image.name}>\n                          {image.name}\n                        </div>\n                        <div className=\"text-xs text-gray-400 truncate\">\n                          {image.category}\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                  {canvasImages.length > 12 && (\n                    <div className=\"bg-[#222] border border-[#333] rounded flex items-center justify-center text-center p-4\">\n                      <div className=\"text-gray-400\">\n                        <div className=\"text-lg font-bold\">+{canvasImages.length - 12}</div>\n                        <div className=\"text-xs\">mais imagens</div>\n                      </div>\n                    </div>\n                  )}\n                </div>\n              </div>\n            )}\n\n            {canvasCovers.length === 0 && canvasImages.length === 0 && (\n              <div className=\"text-center py-8 text-gray-400\">\n                <Image className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n                <p>Nenhuma capa ou imagem de canvas encontrada</p>\n                <p className=\"text-sm mt-2\">Faça upload de arquivos para as pastas:</p>\n                <div className=\"text-xs mt-2 bg-[#222] p-2 rounded\">\n                  <div>• Capas-quadros-em-canvas/</div>\n                  <div>• Quadros-em-canvas/[categoria]/</div>\n                </div>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Add New Product */}\n        {editingId === \"new\" && (\n          <Card className=\"bg-[#111111] border-[#333] mb-8\">\n            <CardHeader>\n              <CardTitle className=\"text-[#FFD700]\">Novo Produto da Loja</CardTitle>\n            </CardHeader>\n            <CardContent className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"new-titulo\" className=\"text-white\">Título</Label>\n                <Input\n                  id=\"new-titulo\"\n                  value={editForm.titulo}\n                  onChange={(e) => setEditForm({ ...editForm, titulo: e.target.value })}\n                  placeholder=\"Nome do produto\"\n                  className=\"bg-[#222] border-[#444] text-white mt-1\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"new-categoria\" className=\"text-white\">Categoria</Label>\n                <Select\n                  value={editForm.categoria}\n                  onValueChange={(value) => setEditForm({ ...editForm, categoria: value })}\n                >\n                  <SelectTrigger className=\"bg-[#222] border-[#444] text-white mt-1\">\n                    <SelectValue placeholder=\"Selecione uma categoria\" />\n                  </SelectTrigger>\n                  <SelectContent className=\"bg-[#222] border-[#444] text-white\">\n                    <SelectItem value=\"Papel de Parede\">Papel de Parede</SelectItem>\n                    <SelectItem value=\"Quadros Canvas\">Quadros Canvas</SelectItem>\n                    {textureCovers.map((texture) => (\n                      <SelectItem key={texture.fileName} value={texture.name}>\n                        {texture.name} (Textura)\n                      </SelectItem>\n                    ))}\n                    {canvasCovers.map((canvas) => (\n                      <SelectItem key={canvas.fileName} value={canvas.name}>\n                        {canvas.name} (Canvas)\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n              <div>\n                <Label htmlFor=\"new-preco\" className=\"text-white\">Preço</Label>\n                <Input\n                  id=\"new-preco\"\n                  value={editForm.preco}\n                  onChange={(e) => setEditForm({ ...editForm, preco: e.target.value })}\n                  placeholder=\"€ 29.90\"\n                  className=\"bg-[#222] border-[#444] text-white mt-1\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"new-imagem\" className=\"text-white\">URL da Imagem</Label>\n                <Input\n                  id=\"new-imagem\"\n                  value={editForm.imagem}\n                  onChange={(e) => setEditForm({ ...editForm, imagem: e.target.value })}\n                  placeholder=\"https://exemplo.com/produto.jpg\"\n                  className=\"bg-[#222] border-[#444] text-white mt-1\"\n                />\n              </div>\n              <div className=\"md:col-span-2\">\n                <Label htmlFor=\"new-descricao\" className=\"text-white\">Descrição</Label>\n                <Textarea\n                  id=\"new-descricao\"\n                  value={editForm.descricao}\n                  onChange={(e) => setEditForm({ ...editForm, descricao: e.target.value })}\n                  placeholder=\"Descrição detalhada do produto\"\n                  className=\"bg-[#222] border-[#444] text-white mt-1\"\n                />\n              </div>\n              <div className=\"md:col-span-2 flex items-center space-x-2\">\n                <Checkbox\n                  id=\"new-destaque\"\n                  checked={editForm.destaque}\n                  onCheckedChange={(checked) => setEditForm({ ...editForm, destaque: !!checked })}\n                />\n                <Label htmlFor=\"new-destaque\" className=\"text-white\">Produto em destaque na loja</Label>\n              </div>\n              <div className=\"md:col-span-2 flex gap-2\">\n                <Button \n                  onClick={() => saveProduto(editForm)}\n                  className=\"bg-[#FFD700] text-black hover:bg-yellow-400\"\n                >\n                  <Save className=\"w-4 h-4 mr-2\" />\n                  Salvar Produto\n                </Button>\n                <Button onClick={cancelEdit} variant=\"outline\">\n                  <X className=\"w-4 h-4 mr-2\" />\n                  Cancelar\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Add Button */}\n        {editingId !== \"new\" && (\n          <Card className=\"bg-[#111111] border-[#333] mb-8\">\n            <CardContent className=\"p-6 text-center\">\n              <Button \n                onClick={() => setEditingId(\"new\")}\n                className=\"bg-[#FFD700] text-black hover:bg-yellow-400\"\n              >\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Adicionar Produto à Loja\n              </Button>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Products List */}\n        <Card className=\"bg-[#111111] border-[#333]\">\n          <CardHeader>\n            <CardTitle className=\"text-[#FFD700]\">\n              Produtos da Loja\n              <Badge variant=\"secondary\" className=\"ml-2 bg-[#FFD700] text-black\">\n                {lojaProdutos.length} produtos\n              </Badge>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            {lojaProdutos.length === 0 ? (\n              <div className=\"text-center py-12\">\n                <Store className=\"h-16 w-16 text-gray-400 mx-auto mb-4\" />\n                <p className=\"text-gray-400 text-lg\">Nenhum produto encontrado na loja</p>\n                <p className=\"text-gray-500 text-sm\">Adicione produtos para a loja online</p>\n              </div>\n            ) : (\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                {lojaProdutos.map((produto) => (\n                  <div key={produto.id} className=\"bg-[#222] rounded-lg border border-[#333] overflow-hidden\">\n                    {editingId === produto.id ? (\n                      <div className=\"p-6 space-y-4\">\n                        <div>\n                          <Label className=\"text-white\">Título</Label>\n                          <Input\n                            value={editForm.titulo}\n                            onChange={(e) => setEditForm({ ...editForm, titulo: e.target.value })}\n                            className=\"bg-[#333] border-[#444] text-white mt-1\"\n                          />\n                        </div>\n                        <div>\n                          <Label className=\"text-white\">Categoria</Label>\n                          <Select\n                            value={editForm.categoria}\n                            onValueChange={(value) => setEditForm({ ...editForm, categoria: value })}\n                          >\n                            <SelectTrigger className=\"bg-[#333] border-[#444] text-white mt-1\">\n                              <SelectValue />\n                            </SelectTrigger>\n                            <SelectContent className=\"bg-[#333] border-[#444] text-white\">\n                              <SelectItem value=\"Papel de Parede\">Papel de Parede</SelectItem>\n                              <SelectItem value=\"Quadros Canvas\">Quadros Canvas</SelectItem>\n                              {textureCovers.map((texture) => (\n                                <SelectItem key={texture.fileName} value={texture.name}>\n                                  {texture.name} (Textura)\n                                </SelectItem>\n                              ))}\n                              {canvasCovers.map((canvas) => (\n                                <SelectItem key={canvas.fileName} value={canvas.name}>\n                                  {canvas.name} (Canvas)\n                                </SelectItem>\n                              ))}\n                            </SelectContent>\n                          </Select>\n                        </div>\n                        <div>\n                          <Label className=\"text-white\">Preço</Label>\n                          <Input\n                            value={editForm.preco}\n                            onChange={(e) => setEditForm({ ...editForm, preco: e.target.value })}\n                            className=\"bg-[#333] border-[#444] text-white mt-1\"\n                          />\n                        </div>\n                        <div>\n                          <Label className=\"text-white\">URL da Imagem</Label>\n                          <Input\n                            value={editForm.imagem}\n                            onChange={(e) => setEditForm({ ...editForm, imagem: e.target.value })}\n                            className=\"bg-[#333] border-[#444] text-white mt-1\"\n                          />\n                        </div>\n                        <div>\n                          <Label className=\"text-white\">Descrição</Label>\n                          <Textarea\n                            value={editForm.descricao}\n                            onChange={(e) => setEditForm({ ...editForm, descricao: e.target.value })}\n                            className=\"bg-[#333] border-[#444] text-white mt-1\"\n                          />\n                        </div>\n                        <div className=\"flex items-center space-x-2\">\n                          <Checkbox\n                            checked={editForm.destaque}\n                            onCheckedChange={(checked) => setEditForm({ ...editForm, destaque: !!checked })}\n                          />\n                          <Label className=\"text-white\">Produto em destaque</Label>\n                        </div>\n                        <div className=\"flex gap-2\">\n                          <Button \n                            onClick={() => saveProduto(editForm, produto.id)}\n                            className=\"bg-[#FFD700] text-black hover:bg-yellow-400\"\n                          >\n                            <Save className=\"w-4 h-4 mr-2\" />\n                            Salvar\n                          </Button>\n                          <Button onClick={cancelEdit} variant=\"outline\">\n                            <X className=\"w-4 h-4 mr-2\" />\n                            Cancelar\n                          </Button>\n                        </div>\n                      </div>\n                    ) : (\n                      <>\n                        <div className=\"h-48 relative\">\n                          <img \n                            src={produto.imagem} \n                            alt={produto.titulo}\n                            className=\"w-full h-full object-cover\"\n                          />\n                          {produto.destaque && (\n                            <Badge className=\"absolute top-2 right-2 bg-[#FFD700] text-black\">\n                              <Store className=\"w-3 h-3 mr-1\" />\n                              Destaque\n                            </Badge>\n                          )}\n                        </div>\n                        <div className=\"p-6\">\n                          <div className=\"flex items-start justify-between mb-2\">\n                            <Badge variant=\"outline\" className=\"border-[#FFD700] text-[#FFD700]\">\n                              {produto.categoria}\n                            </Badge>\n                            <div className=\"flex gap-2\">\n                              <Button\n                                size=\"sm\"\n                                variant=\"outline\"\n                                onClick={() => startEdit(produto)}\n                              >\n                                <Edit className=\"h-4 w-4\" />\n                              </Button>\n                              <Button\n                                size=\"sm\"\n                                variant=\"destructive\"\n                                onClick={() => deleteProduto(produto.id)}\n                              >\n                                <Trash2 className=\"h-4 w-4\" />\n                              </Button>\n                            </div>\n                          </div>\n                          <h3 className=\"text-white font-medium text-lg mb-2\">\n                            {produto.titulo}\n                          </h3>\n                          <p className=\"text-gray-400 text-sm mb-3 line-clamp-2\">\n                            {produto.descricao}\n                          </p>\n                          <div className=\"text-[#FFD700] font-bold text-xl\">\n                            {produto.preco}\n                          </div>\n                        </div>\n                      </>\n                    )}\n                  </div>\n                ))}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":33224},"client/src/pages/servico-pelicula-solar.tsx":{"content":"import Navigation from \"@/components/navigation\";\nimport Footer from \"@/components/footer\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  Shield, \n  Sun, \n  Thermometer, \n  Eye, \n  Car, \n  Clock, \n  CheckCircle,\n  Star,\n  ArrowRight,\n  Phone,\n  Mail\n} from \"lucide-react\";\nimport { Link } from \"wouter\";\n\nexport default function ServicoPeliculaSolar() {\n  const benefits = [\n    {\n      icon: Sun,\n      title: \"Proteção UV\",\n      description: \"Bloqueia até 99% dos raios ultravioleta nocivos\"\n    },\n    {\n      icon: Thermometer,\n      title: \"Controlo Térmico\",\n      description: \"Reduz o calor interior em até 60%\"\n    },\n    {\n      icon: Eye,\n      title: \"Privacidade\",\n      description: \"Mantém o interior do veículo privado\"\n    },\n    {\n      icon: Shield,\n      title: \"Segurança\",\n      description: \"Reforça o vidro contra impactos e quebras\"\n    }\n  ];\n\n  const services = [\n    {\n      title: \"Película Solar Residencial\",\n      description: \"Aplicação profissional em janelas de habitações\",\n      features: [\"Várias tonalidades\", \"Garantia de 5 anos\", \"Aplicação sem bolhas\"]\n    },\n    {\n      title: \"Película Arquitetónica\",\n      description: \"Para janelas de escritórios e residências\",\n      features: [\"Eficiência energética\", \"Redução de reflexos\", \"Privacidade controlada\"]\n    },\n    {\n      title: \"Película de Segurança\",\n      description: \"Proteção anti-vandalismo e explosões\",\n      features: [\"Extra resistente\", \"Transparente\", \"Certificada\"]\n    }\n  ];\n\n  const process = [\n    {\n      step: \"1\",\n      title: \"Avaliação\",\n      description: \"Análise dos vidros e necessidades específicas\"\n    },\n    {\n      step: \"2\", \n      title: \"Escolha\",\n      description: \"Seleção da película ideal para o seu projeto\"\n    },\n    {\n      step: \"3\",\n      title: \"Aplicação\",\n      description: \"Instalação profissional com técnicas especializadas\"\n    },\n    {\n      step: \"4\",\n      title: \"Garantia\",\n      description: \"Acompanhamento e garantia de qualidade\"\n    }\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-[#0a0a0a] text-white\">\n      <Navigation />\n      \n      {/* Hero Section */}\n      <section className=\"relative bg-gradient-to-br from-[#FFD700]/10 via-[#00d4aa]/5 to-[#4dabf7]/10 pt-32 pb-20\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"max-w-4xl mx-auto text-center\">\n            <Badge variant=\"outline\" className=\"mb-6 border-[#FFD700] text-[#FFD700] bg-[#FFD700]/10\">\n              <Sun className=\"w-4 h-4 mr-2\" />\n              Proteção Solar Residencial\n            </Badge>\n            \n            <h1 className=\"text-4xl md:text-6xl font-bold mb-6 bg-gradient-to-r from-[#FFD700] via-[#00d4aa] to-[#4dabf7] bg-clip-text text-transparent\">\n              Película de Proteção Solar\n            </h1>\n            \n            <p className=\"text-xl text-gray-300 mb-8 leading-relaxed\">\n              Proteja a sua habitação e economize energia com as melhores películas de proteção solar. \n              Aplicação profissional com garantia de qualidade para janelas residenciais.\n            </p>\n            \n            <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n              <Link href=\"/contactos\">\n                <Button size=\"lg\" className=\"bg-[#FFD700] text-black hover:bg-yellow-400 font-semibold\">\n                  <Phone className=\"w-5 h-5 mr-2\" />\n                  Pedir Orçamento\n                </Button>\n              </Link>\n              <Button size=\"lg\" variant=\"outline\" className=\"border-[#00d4aa] text-[#00d4aa] hover:bg-[#00d4aa] hover:text-black\">\n                <Eye className=\"w-5 h-5 mr-2\" />\n                Ver Portfólio\n              </Button>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Benefits Section */}\n      <section className=\"py-20 bg-[#111111]\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-3xl md:text-5xl font-bold mb-4\">\n              Benefícios da <span className=\"text-[#FFD700]\">Película Solar</span>\n            </h2>\n            <p className=\"text-gray-400 text-lg max-w-2xl mx-auto\">\n              Descubra como a película solar pode transformar o conforto e eficiência energética da sua habitação\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8\">\n            {benefits.map((benefit, index) => {\n              const IconComponent = benefit.icon;\n              return (\n                <Card key={index} className=\"bg-[#222] border-[#333] hover:border-[#FFD700] transition-all duration-300 hover:scale-105\">\n                  <CardContent className=\"p-8 text-center\">\n                    <div className=\"bg-[#FFD700]/10 rounded-full w-16 h-16 flex items-center justify-center mx-auto mb-6\">\n                      <IconComponent className=\"w-8 h-8 text-[#FFD700]\" />\n                    </div>\n                    <h3 className=\"text-xl font-semibold mb-3 text-white\">{benefit.title}</h3>\n                    <p className=\"text-gray-400 leading-relaxed\">{benefit.description}</p>\n                  </CardContent>\n                </Card>\n              );\n            })}\n          </div>\n        </div>\n      </section>\n\n      {/* Services Section */}\n      <section className=\"py-20\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-3xl md:text-5xl font-bold mb-4\">\n              Nossos <span className=\"text-[#00d4aa]\">Serviços</span>\n            </h2>\n            <p className=\"text-gray-400 text-lg max-w-2xl mx-auto\">\n              Soluções completas em película solar para diferentes necessidades\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n            {services.map((service, index) => (\n              <Card key={index} className=\"bg-[#111111] border-[#333] hover:border-[#00d4aa] transition-all duration-300\">\n                <CardContent className=\"p-8\">\n                  <div className=\"flex items-center gap-3 mb-4\">\n                    <Car className=\"w-6 h-6 text-[#00d4aa]\" />\n                    <h3 className=\"text-xl font-semibold text-white\">{service.title}</h3>\n                  </div>\n                  <p className=\"text-gray-400 mb-6 leading-relaxed\">{service.description}</p>\n                  <ul className=\"space-y-2\">\n                    {service.features.map((feature, idx) => (\n                      <li key={idx} className=\"flex items-center gap-2 text-gray-300\">\n                        <CheckCircle className=\"w-4 h-4 text-[#00d4aa] flex-shrink-0\" />\n                        <span className=\"text-sm\">{feature}</span>\n                      </li>\n                    ))}\n                  </ul>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Process Section */}\n      <section className=\"py-20 bg-[#111111]\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-3xl md:text-5xl font-bold mb-4\">\n              Processo de <span className=\"text-[#4dabf7]\">Aplicação</span>\n            </h2>\n            <p className=\"text-gray-400 text-lg max-w-2xl mx-auto\">\n              Metodologia profissional para resultados perfeitos\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8\">\n            {process.map((step, index) => (\n              <div key={index} className=\"text-center relative\">\n                <div className=\"bg-[#4dabf7] rounded-full w-16 h-16 flex items-center justify-center mx-auto mb-6\">\n                  <span className=\"text-2xl font-bold text-black\">{step.step}</span>\n                </div>\n                <h3 className=\"text-xl font-semibold mb-3 text-white\">{step.title}</h3>\n                <p className=\"text-gray-400 leading-relaxed\">{step.description}</p>\n                \n                {index < process.length - 1 && (\n                  <ArrowRight className=\"hidden lg:block absolute top-8 -right-4 w-6 h-6 text-[#4dabf7]\" />\n                )}\n              </div>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Specifications Section */}\n      <section className=\"py-20\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"max-w-4xl mx-auto\">\n            <div className=\"text-center mb-16\">\n              <h2 className=\"text-3xl md:text-5xl font-bold mb-4\">\n                Especificações <span className=\"text-[#FFD700]\">Técnicas</span>\n              </h2>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8\">\n              <Card className=\"bg-[#111111] border-[#333]\">\n                <CardContent className=\"p-8\">\n                  <h3 className=\"text-2xl font-bold mb-6 text-[#FFD700]\">Características</h3>\n                  <div className=\"space-y-4\">\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-400\">Proteção UV:</span>\n                      <span className=\"text-white font-semibold\">99%</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-400\">Redução de Calor:</span>\n                      <span className=\"text-white font-semibold\">Até 60%</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-400\">Garantia:</span>\n                      <span className=\"text-white font-semibold\">5 Anos</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-400\">Espessura:</span>\n                      <span className=\"text-white font-semibold\">1.5-2 mil</span>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card className=\"bg-[#111111] border-[#333]\">\n                <CardContent className=\"p-8\">\n                  <h3 className=\"text-2xl font-bold mb-6 text-[#00d4aa]\">Tonalidades</h3>\n                  <div className=\"space-y-4\">\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-400\">5% (Escura):</span>\n                      <span className=\"text-white font-semibold\">Máxima privacidade</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-400\">20% (Média):</span>\n                      <span className=\"text-white font-semibold\">Equilibrio ideal</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-400\">35% (Clara):</span>\n                      <span className=\"text-white font-semibold\">Visibilidade ótima</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-400\">70% (Incolor):</span>\n                      <span className=\"text-white font-semibold\">Proteção UV apenas</span>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* CTA Section */}\n      <section className=\"py-20 bg-gradient-to-r from-[#FFD700]/10 to-[#00d4aa]/10\">\n        <div className=\"container mx-auto px-4 text-center\">\n          <div className=\"max-w-3xl mx-auto\">\n            <h2 className=\"text-3xl md:text-5xl font-bold mb-6\">\n              Pronto para <span className=\"text-[#FFD700]\">Proteger</span> a sua Habitação?\n            </h2>\n            <p className=\"text-xl text-gray-300 mb-8\">\n              Entre em contacto connosco e descubra a solução ideal de película de proteção solar para a sua casa.\n            </p>\n            \n            <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n              <Link href=\"/contactos\">\n                <Button size=\"lg\" className=\"bg-[#FFD700] text-black hover:bg-yellow-400 font-semibold\">\n                  <Phone className=\"w-5 h-5 mr-2\" />\n                  Contactar Agora\n                </Button>\n              </Link>\n              <a href=\"https://wa.me/351912345678\" target=\"_blank\" rel=\"noopener noreferrer\">\n                <Button size=\"lg\" variant=\"outline\" className=\"border-[#00d4aa] text-[#00d4aa] hover:bg-[#00d4aa] hover:text-black\">\n                  <Mail className=\"w-5 h-5 mr-2\" />\n                  WhatsApp\n                </Button>\n              </a>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      <Footer />\n    </div>\n  );\n}","size_bytes":13050},"client/src/components/ImageSelector.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { ObjectUploader } from \"./ObjectUploader\";\nimport { Image, Upload, FolderOpen, X, Check } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface ImageSelectorProps {\n  selectedImage: string;\n  onImageSelect: (imageUrl: string) => void;\n  placeholder?: string;\n}\n\ninterface StorageImage {\n  path: string;\n  url: string;\n  name: string;\n}\n\nexport function ImageSelector({ selectedImage, onImageSelect, placeholder = \"Selecionar Imagem\" }: ImageSelectorProps) {\n  const { toast } = useToast();\n  const [open, setOpen] = useState(false);\n  const [storageImages, setStorageImages] = useState<StorageImage[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [selectedImagePreview, setSelectedImagePreview] = useState(selectedImage);\n\n  useEffect(() => {\n    setSelectedImagePreview(selectedImage);\n  }, [selectedImage]);\n\n  const fetchStorageImages = async () => {\n    try {\n      setLoading(true);\n      const response = await fetch('/api/slider/images');\n      if (response.ok) {\n        const data = await response.json();\n        const images = data.images.map((imagePath: string) => ({\n          path: imagePath,\n          url: `/public-objects/${imagePath}`,\n          name: imagePath.split('/').pop() || ''\n        }));\n        setStorageImages(images);\n      }\n    } catch (error) {\n      console.error('Error fetching storage images:', error);\n      toast({\n        title: \"Erro\",\n        description: \"Falha ao carregar imagens do armazenamento\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleUploadComplete = async (result: any) => {\n    if (result.successful && result.successful.length > 0) {\n      const uploadedFile = result.successful[0];\n      const fileName = uploadedFile.name;\n      \n      // Upload the file to the slider folder\n      try {\n        const formData = new FormData();\n        const response = await fetch(uploadedFile.uploadURL);\n        const blob = await response.blob();\n        \n        // Create a new file in the slider folder\n        const targetPath = `inicio/slider/${fileName}`;\n        const uploadResponse = await fetch('/api/upload-slider-image', {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({\n            fileName,\n            targetPath\n          })\n        });\n        \n        if (uploadResponse.ok) {\n          const imageUrl = `/public-objects/${targetPath}`;\n          onImageSelect(imageUrl);\n          setSelectedImagePreview(imageUrl);\n          setOpen(false);\n          await fetchStorageImages(); // Refresh the list\n          toast({\n            title: \"Sucesso\",\n            description: \"Imagem carregada com sucesso\",\n          });\n        }\n      } catch (error) {\n        console.error('Error processing upload:', error);\n        toast({\n          title: \"Erro\",\n          description: \"Falha ao processar upload\",\n          variant: \"destructive\",\n        });\n      }\n    }\n  };\n\n  const handleGetUploadParameters = async () => {\n    const response = await fetch('/api/objects/upload', { method: 'POST' });\n    const data = await response.json();\n    return {\n      method: 'PUT' as const,\n      url: data.uploadURL\n    };\n  };\n\n  const selectImage = (image: StorageImage) => {\n    onImageSelect(image.url);\n    setSelectedImagePreview(image.url);\n    setOpen(false);\n  };\n\n  return (\n    <div>\n      <Dialog open={open} onOpenChange={setOpen}>\n        <DialogTrigger asChild>\n          <Button \n            type=\"button\"\n            variant=\"outline\" \n            className=\"w-full h-32 border-2 border-dashed border-[#444] hover:border-[#FFD700] bg-[#222] hover:bg-[#333] relative\"\n            onClick={() => {\n              setOpen(true);\n              fetchStorageImages();\n            }}\n          >\n            {selectedImagePreview ? (\n              <div className=\"relative w-full h-full\">\n                <img \n                  src={selectedImagePreview} \n                  alt=\"Preview\" \n                  className=\"w-full h-full object-cover rounded\"\n                  onError={() => setSelectedImagePreview('')}\n                />\n                <div className=\"absolute inset-0 bg-black bg-opacity-50 flex items-center justify-center opacity-0 hover:opacity-100 transition-opacity\">\n                  <span className=\"text-white font-medium\">Alterar Imagem</span>\n                </div>\n              </div>\n            ) : (\n              <div className=\"flex flex-col items-center gap-2 text-gray-400\">\n                <Image className=\"h-8 w-8\" />\n                <span>{placeholder}</span>\n              </div>\n            )}\n          </Button>\n        </DialogTrigger>\n        \n        <DialogContent className=\"max-w-4xl max-h-[80vh] overflow-y-auto bg-[#111111] border-[#333]\">\n          <DialogHeader>\n            <DialogTitle className=\"text-[#FFD700]\">Selecionar Imagem</DialogTitle>\n          </DialogHeader>\n          \n          <Tabs defaultValue=\"storage\" className=\"w-full\">\n            <TabsList className=\"grid w-full grid-cols-2 bg-[#222] border-[#444]\">\n              <TabsTrigger value=\"storage\" className=\"flex items-center gap-2 data-[state=active]:bg-[#FFD700] data-[state=active]:text-black\">\n                <FolderOpen className=\"h-4 w-4\" />\n                Biblioteca de Imagens\n              </TabsTrigger>\n              <TabsTrigger value=\"upload\" className=\"flex items-center gap-2 data-[state=active]:bg-[#FFD700] data-[state=active]:text-black\">\n                <Upload className=\"h-4 w-4\" />\n                Carregar Nova Imagem\n              </TabsTrigger>\n            </TabsList>\n            \n            <TabsContent value=\"storage\" className=\"space-y-4\">\n              <div className=\"mb-4 p-4 bg-[#333] rounded border border-[#444]\">\n                <Label className=\"text-white\">URL da Imagem (temporário)</Label>\n                <div className=\"flex gap-2 mt-2\">\n                  <Input\n                    placeholder=\"https://exemplo.com/imagem.jpg\"\n                    className=\"bg-[#222] border-[#444] text-white flex-1\"\n                    onKeyPress={(e) => {\n                      if (e.key === 'Enter') {\n                        const input = e.target as HTMLInputElement;\n                        if (input.value) {\n                          onImageSelect(input.value);\n                          setSelectedImagePreview(input.value);\n                          setOpen(false);\n                        }\n                      }\n                    }}\n                  />\n                  <Button \n                    onClick={(e) => {\n                      const input = e.currentTarget.previousElementSibling as HTMLInputElement;\n                      if (input?.value) {\n                        onImageSelect(input.value);\n                        setSelectedImagePreview(input.value);\n                        setOpen(false);\n                      }\n                    }}\n                    className=\"bg-[#FFD700] text-black hover:bg-yellow-400\"\n                  >\n                    Usar\n                  </Button>\n                </div>\n                <p className=\"text-xs text-gray-400 mt-1\">\n                  Cole a URL de uma imagem e pressione Enter ou clique em \"Usar\"\n                </p>\n              </div>\n              \n              {loading ? (\n                <div className=\"flex items-center justify-center h-32\">\n                  <div className=\"text-gray-400\">Carregando imagens...</div>\n                </div>\n              ) : storageImages.length > 0 ? (\n                <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">\n                  {storageImages.map((image) => (\n                    <Card \n                      key={image.path}\n                      className={`cursor-pointer transition-all hover:border-[#FFD700] bg-[#222] border-[#444] ${\n                        selectedImagePreview === image.url ? 'border-[#FFD700] ring-1 ring-[#FFD700]' : ''\n                      }`}\n                      onClick={() => selectImage(image)}\n                    >\n                      <CardContent className=\"p-2\">\n                        <div className=\"aspect-video relative\">\n                          <img \n                            src={image.url}\n                            alt={image.name}\n                            className=\"w-full h-full object-cover rounded\"\n                            onError={(e) => {\n                              const target = e.target as HTMLImageElement;\n                              target.style.display = 'none';\n                            }}\n                          />\n                          {selectedImagePreview === image.url && (\n                            <div className=\"absolute top-1 right-1\">\n                              <Badge className=\"bg-[#FFD700] text-black\">\n                                <Check className=\"h-3 w-3\" />\n                              </Badge>\n                            </div>\n                          )}\n                        </div>\n                        <div className=\"mt-2\">\n                          <p className=\"text-xs text-gray-400 truncate\">{image.name}</p>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  ))}\n                </div>\n              ) : (\n                <div className=\"flex flex-col items-center justify-center h-32 text-gray-400\">\n                  <Image className=\"h-12 w-12 mb-2\" />\n                  <p>Nenhuma imagem encontrada na pasta inicio/slider</p>\n                  <p className=\"text-sm\">Use o Object Storage para adicionar imagens</p>\n                </div>\n              )}\n            </TabsContent>\n            \n            <TabsContent value=\"upload\" className=\"space-y-4\">\n              <div className=\"border-2 border-dashed border-[#444] rounded-lg p-8 text-center\">\n                <ObjectUploader\n                  maxNumberOfFiles={1}\n                  maxFileSize={10485760}\n                  onGetUploadParameters={handleGetUploadParameters}\n                  onComplete={handleUploadComplete}\n                  buttonClassName=\"bg-[#FFD700] text-black hover:bg-yellow-400\"\n                >\n                  <Upload className=\"h-4 w-4 mr-2\" />\n                  Carregar Imagem para Slider\n                </ObjectUploader>\n                <p className=\"text-sm text-gray-400 mt-2\">\n                  Formatos suportados: JPG, PNG, GIF, WEBP (máx. 10MB)\n                </p>\n              </div>\n            </TabsContent>\n          </Tabs>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":11180},"client/src/components/DynamicSlider.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Link } from \"wouter\";   // ✅ Wouter SPA navigation\nimport type { Slide } from \"@shared/schema\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport \"./Slider.css\";\n\ninterface SliderResponse {\n  slides: Slide[];\n}\n\nexport default function DynamicSlider() {\n  const [currentSlide, setCurrentSlide] = useState(0);\n  const { data, isLoading, error } = useQuery<SliderResponse>({\n    queryKey: [\"/api/admin/slider\"]\n  });\n\n  let activeSlides = data?.slides?.filter((slide: Slide) => slide.active) || [];\n\n  // 👉 Forçar que o 2º slide (index 1) fique sempre em 1º\n  if (activeSlides.length > 1) {\n    const second = activeSlides.splice(1, 1)[0];\n    activeSlides.unshift(second);\n  }\n\n  // Auto-advance slides every 3.5s\n  useEffect(() => {\n    if (activeSlides.length > 1) {\n      const interval = setInterval(() => {\n        setCurrentSlide((prev) => (prev + 1) % activeSlides.length);\n      }, 3500);\n      return () => clearInterval(interval);\n    }\n  }, [activeSlides.length]);\n\n  // Loading state\n  if (isLoading) {\n    return (\n      <div className=\"slider\">\n        <div className=\"slide active loading\">\n          <div className=\"text-overlay\">\n            <div className=\"animate-pulse\">\n              <div className=\"h-12 bg-gray-700 rounded mb-4\"></div>\n              <div className=\"h-6 bg-gray-700 rounded mb-6\"></div>\n              <div className=\"flex justify-center gap-4\">\n                <div className=\"h-12 w-32 bg-gray-700 rounded\"></div>\n                <div className=\"h-12 w-32 bg-gray-700 rounded\"></div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  // Error state\n  if (error) {\n    return (\n      <div className=\"slider\">\n        <div className=\"slide active fallback\">\n          <div className=\"text-overlay\">\n            <h1>Realce sua marca com criatividade e alta definição</h1>\n            <p>\n              Transformamos as suas ideias em comunicação visual de excelência.\n              Design gráfico, impressão digital, papel de parede e soluções\n              personalizadas para empresas e particulares.\n            </p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  // Sem slides\n  if (activeSlides.length === 0) {\n    return (\n      <div className=\"slider\">\n        <div className=\"slide active fallback\">\n          <div className=\"text-overlay\">\n            <h1>Realce sua marca com criatividade e alta definição</h1>\n            <p>\n              Transformamos as suas ideias em comunicação visual de excelência.\n              Design gráfico, impressão digital, papel de parede e soluções\n              personalizadas para empresas e particulares.\n            </p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"slider\">\n      {activeSlides.map((slide: Slide, index: number) => (\n        <div\n          key={slide.id}\n          className={`slide ${index === currentSlide ? \"active\" : \"\"}`}\n          style={{\n            backgroundImage: `url('${slide.image}')`\n          }}\n        >\n          <div className=\"text-overlay\">\n            <h1>{slide.title}</h1>\n            <p>{slide.text}</p>\n\n            {/* ✅ Botões lado a lado - corrigido para mobile/tablet */}\n            {index !== 0 && (\n              <div className=\"mt-4 flex flex-col sm:flex-row gap-2 sm:gap-3 w-full max-w-[260px] sm:max-w-sm md:max-w-md mx-auto\">\n                <Link href=\"/servicos\" className=\"flex-1\">\n                  <button className=\"w-full px-3 py-2 rounded-md font-medium text-xs sm:text-sm transition text-center bg-brand-yellow text-black hover:bg-yellow-500\">\n                    Explorar Serviços\n                  </button>\n                </Link>\n                <Link href=\"/portfolio\" className=\"flex-1\">\n                  <button className=\"w-full px-3 py-2 rounded-md font-medium text-xs sm:text-sm transition text-center border border-white text-white hover:bg-white hover:text-black\">\n                    Ver Portfólio\n                  </button>\n                </Link>\n              </div>\n            )}\n          </div>\n        </div>\n      ))}\n\n      {/* Navigation dots */}\n      {activeSlides.length > 1 && (\n        <div className=\"slider-dots\">\n          {activeSlides.map((_: Slide, index: number) => (\n            <button\n              key={index}\n              className={`dot ${index === currentSlide ? \"active\" : \"\"}`}\n              onClick={() => setCurrentSlide(index)}\n              data-testid={`slider-dot-${index}`}\n            />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":4643},"client/src/pages/admin-pages.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport Navigation from \"@/components/navigation\";\nimport { ArrowLeft, Plus, Edit, Trash2, Save, X, Palette, Monitor, Settings, Upload, Image, ExternalLink } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useQuery } from \"@tanstack/react-query\";\n\ninterface ImageSelectorProps {\n  value: string;\n  onChange: (value: string) => void;\n}\n\nfunction ImageSelector({ value, onChange }: ImageSelectorProps) {\n  const [showGallery, setShowGallery] = useState(false);\n  const { toast } = useToast();\n\n  const { data: galleryData } = useQuery({\n    queryKey: ['/api/gallery/images'],\n    enabled: showGallery\n  });\n\n  const handleFileUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (!file) return;\n\n    if (!file.type.startsWith('image/')) {\n      toast({\n        title: \"Erro\",\n        description: \"Por favor selecione apenas imagens\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    try {\n      const formData = new FormData();\n      formData.append('files', file);\n      formData.append('folder', 'pages');\n\n      const response = await fetch('/api/media/upload', {\n        method: 'POST',\n        body: formData,\n      });\n\n      if (response.ok) {\n        const result = await response.json();\n        if (result.files && result.files.length > 0) {\n          onChange(result.files[0].url);\n          toast({\n            title: \"Sucesso\",\n            description: \"Imagem carregada com sucesso\",\n          });\n        }\n      } else {\n        throw new Error('Upload failed');\n      }\n    } catch (error) {\n      console.error('Upload error:', error);\n      toast({\n        title: \"Erro\",\n        description: \"Falha no upload da imagem\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const allImages = ((galleryData as any)?.images || []).map((img: string) => `/public-objects/${img}`);\n\n  return (\n    <div className=\"space-y-4\">\n      {/* Current Image Preview */}\n      {value && (\n        <div className=\"flex items-center gap-4 p-4 bg-gray-800 rounded-lg border border-gray-600\">\n          <img \n            src={value} \n            alt=\"Preview\" \n            className=\"w-16 h-16 object-cover rounded border border-gray-500\"\n            onError={(e) => {\n              e.currentTarget.style.display = 'none';\n            }}\n          />\n          <div className=\"flex-1\">\n            <p className=\"text-white text-sm font-medium\">Imagem Selecionada:</p>\n            <p className=\"text-gray-300 text-xs truncate\">{value}</p>\n          </div>\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={() => onChange('')}\n            className=\"border-red-500 text-red-500 hover:bg-red-500 hover:text-white\"\n          >\n            <Trash2 className=\"h-4 w-4\" />\n          </Button>\n        </div>\n      )}\n\n      {/* Input Field */}\n      <div className=\"flex gap-2\">\n        <Input\n          type=\"text\"\n          value={value}\n          onChange={(e) => onChange(e.target.value)}\n          placeholder=\"URL da imagem ou caminho...\"\n          className=\"flex-1 bg-gray-800 border-gray-600 text-white\"\n        />\n        <Button\n          type=\"button\"\n          variant=\"outline\"\n          onClick={() => setShowGallery(!showGallery)}\n          className=\"border-[#4dabf7] text-[#4dabf7] hover:bg-[#4dabf7] hover:text-white\"\n        >\n          <Image className=\"h-4 w-4\" />\n        </Button>\n      </div>\n\n      {/* Upload Button */}\n      <div className=\"flex gap-2\">\n        <label className=\"flex-1\">\n          <input\n            type=\"file\"\n            accept=\"image/*\"\n            onChange={handleFileUpload}\n            className=\"hidden\"\n          />\n          <Button\n            type=\"button\"\n            variant=\"outline\"\n            className=\"w-full border-[#00d4aa] text-[#00d4aa] hover:bg-[#00d4aa] hover:text-black\"\n            onClick={() => (document.querySelector('input[type=\"file\"]') as HTMLInputElement)?.click()}\n          >\n            <Upload className=\"h-4 w-4 mr-2\" />\n            Fazer Upload de Nova Imagem\n          </Button>\n        </label>\n      </div>\n\n      {/* Gallery */}\n      {showGallery && (\n        <div className=\"mt-4 p-4 bg-gray-800 rounded-lg border border-gray-600\">\n          <h4 className=\"text-white font-medium mb-3\">Selecionar da Galeria:</h4>\n          <div className=\"grid grid-cols-4 md:grid-cols-6 lg:grid-cols-8 gap-2 max-h-64 overflow-y-auto\">\n            {allImages.map((imgUrl: string, index: number) => (\n              <button\n                key={index}\n                type=\"button\"\n                onClick={() => {\n                  onChange(imgUrl);\n                  setShowGallery(false);\n                }}\n                className=\"aspect-square border border-gray-600 rounded hover:border-[#4dabf7] transition-colors group\"\n              >\n                <img\n                  src={imgUrl}\n                  alt={`Gallery ${index}`}\n                  className=\"w-full h-full object-cover rounded group-hover:opacity-80\"\n                  onError={(e) => {\n                    e.currentTarget.style.display = 'none';\n                  }}\n                />\n              </button>\n            ))}\n          </div>\n          {allImages.length === 0 && (\n            <p className=\"text-gray-400 text-center py-4\">Nenhuma imagem encontrada</p>\n          )}\n        </div>\n      )}\n    </div>\n  );\n}\n\ninterface PageConfig {\n  id: string;\n  page: string;\n  section: string;\n  element: string;\n  type: \"text\" | \"color\" | \"size\" | \"image\" | \"number\";\n  value: string;\n  defaultValue?: string;\n  metadata?: string;\n  updatedAt: string;\n  createdAt: string;\n}\n\nconst pages = [\n  { value: \"home\", label: \"Página Inicial\" },\n  { value: \"about\", label: \"Sobre Nós\" },\n  { value: \"services\", label: \"Serviços\" },\n  { value: \"portfolio\", label: \"Portfólio\" },\n  { value: \"contact\", label: \"Contactos\" },\n  { value: \"loja\", label: \"Loja Online\" },\n];\n\nconst configTypes = [\n  { value: \"text\", label: \"Texto\" },\n  { value: \"color\", label: \"Cor\" },\n  { value: \"size\", label: \"Tamanho\" },\n  { value: \"image\", label: \"Imagem\" },\n  { value: \"number\", label: \"Número\" },\n];\n\nexport default function AdminPages() {\n  const { toast } = useToast();\n  const [configs, setConfigs] = useState<PageConfig[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [selectedPage, setSelectedPage] = useState<string>(\"home\");\n  const [editingId, setEditingId] = useState<string | null>(null);\n  const [showAddForm, setShowAddForm] = useState(false);\n  const [editForm, setEditForm] = useState({\n    page: \"\",\n    section: \"\",\n    element: \"\",\n    type: \"text\" as \"text\" | \"color\" | \"size\" | \"image\" | \"number\",\n    value: \"\",\n    defaultValue: \"\",\n    metadata: \"\",\n  });\n\n  useEffect(() => {\n    fetchConfigs();\n  }, [selectedPage]);\n\n  const fetchConfigs = async () => {\n    try {\n      setLoading(true);\n      const response = await fetch(`/api/admin/pages/${selectedPage}`);\n      const data = await response.json();\n      setConfigs(data.configs || []);\n    } catch (error) {\n      console.error('Error fetching configs:', error);\n      toast({\n        title: \"Erro\",\n        description: \"Falha ao carregar configurações\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const saveConfig = async (configData: Omit<PageConfig, 'id' | 'createdAt' | 'updatedAt'>, configId?: string) => {\n    try {\n      const url = configId ? `/api/admin/pages/${configId}` : '/api/admin/pages';\n      const method = configId ? 'PUT' : 'POST';\n      \n      const response = await fetch(url, {\n        method,\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(configData),\n      });\n\n      if (response.ok) {\n        await fetchConfigs();\n        setEditingId(null);\n        setShowAddForm(false);\n        resetForm();\n        toast({\n          title: \"Sucesso\",\n          description: configId ? \"Configuração atualizada\" : \"Configuração criada\",\n        });\n      } else {\n        throw new Error('Falha ao salvar');\n      }\n    } catch (error) {\n      console.error('Error saving config:', error);\n      toast({\n        title: \"Erro\",\n        description: \"Falha ao salvar configuração\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const deleteConfig = async (id: string) => {\n    try {\n      const response = await fetch(`/api/admin/pages/${id}`, {\n        method: 'DELETE',\n      });\n\n      if (response.ok) {\n        await fetchConfigs();\n        toast({\n          title: \"Sucesso\",\n          description: \"Configuração eliminada\",\n        });\n      } else {\n        throw new Error('Falha ao eliminar');\n      }\n    } catch (error) {\n      console.error('Error deleting config:', error);\n      toast({\n        title: \"Erro\",\n        description: \"Falha ao eliminar configuração\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const startEdit = (config: PageConfig) => {\n    setEditingId(config.id);\n    setEditForm({\n      page: config.page,\n      section: config.section,\n      element: config.element,\n      type: config.type,\n      value: config.value,\n      defaultValue: config.defaultValue || \"\",\n      metadata: config.metadata || \"\",\n    });\n  };\n\n  const startAdd = () => {\n    setShowAddForm(true);\n    setEditForm({\n      page: selectedPage,\n      section: \"\",\n      element: \"\",\n      type: \"text\" as \"text\" | \"color\" | \"size\" | \"image\" | \"number\",\n      value: \"\",\n      defaultValue: \"\",\n      metadata: \"\",\n    });\n  };\n\n  const resetForm = () => {\n    setEditForm({\n      page: \"\",\n      section: \"\",\n      element: \"\",\n      type: \"text\" as \"text\" | \"color\" | \"size\" | \"image\" | \"number\",\n      value: \"\",\n      defaultValue: \"\",\n      metadata: \"\",\n    });\n  };\n\n  const handleSave = () => {\n    if (editingId) {\n      saveConfig(editForm, editingId);\n    } else {\n      saveConfig(editForm);\n    }\n  };\n\n  const renderConfigValue = (config: PageConfig) => {\n    switch (config.type) {\n      case 'color':\n        return (\n          <div className=\"flex items-center gap-2\">\n            <div \n              className=\"w-6 h-6 rounded border border-gray-600\"\n              style={{ backgroundColor: config.value }}\n            />\n            <span className=\"text-sm text-gray-300\">{config.value}</span>\n          </div>\n        );\n      case 'image':\n        return (\n          <div className=\"flex items-center gap-2\">\n            {config.value && config.value.startsWith('/') ? (\n              <img \n                src={config.value} \n                alt=\"Preview\" \n                className=\"w-8 h-8 object-cover rounded border border-gray-600\"\n                onError={(e) => {\n                  e.currentTarget.style.display = 'none';\n                }}\n              />\n            ) : (\n              <Monitor className=\"h-4 w-4 text-gray-400\" />\n            )}\n            <span className=\"text-sm text-gray-300 truncate max-w-[200px]\">{config.value}</span>\n          </div>\n        );\n      default:\n        return (\n          <span className=\"text-sm text-gray-300 truncate max-w-[300px]\">\n            {config.value}\n          </span>\n        );\n    }\n  };\n\n  const renderFormInput = () => {\n    switch (editForm.type) {\n      case 'color':\n        return (\n          <div className=\"flex gap-2\">\n            <Input\n              type=\"color\"\n              value={editForm.value}\n              onChange={(e) => setEditForm({ ...editForm, value: e.target.value })}\n              className=\"w-16 h-10 p-1 bg-gray-800 border-gray-600\"\n            />\n            <Input\n              type=\"text\"\n              value={editForm.value}\n              onChange={(e) => setEditForm({ ...editForm, value: e.target.value })}\n              placeholder=\"#ffffff\"\n              className=\"flex-1 bg-gray-800 border-gray-600 text-white\"\n            />\n          </div>\n        );\n      case 'text':\n        return (\n          <Textarea\n            value={editForm.value}\n            onChange={(e) => setEditForm({ ...editForm, value: e.target.value })}\n            placeholder=\"Texto da configuração\"\n            className=\"bg-gray-800 border-gray-600 text-white\"\n            rows={3}\n          />\n        );\n      case 'image':\n        return <ImageSelector value={editForm.value} onChange={(value) => setEditForm({ ...editForm, value })} />;\n      case 'number':\n        return (\n          <Input\n            type=\"number\"\n            value={editForm.value}\n            onChange={(e) => setEditForm({ ...editForm, value: e.target.value })}\n            placeholder=\"0\"\n            className=\"bg-gray-800 border-gray-600 text-white\"\n          />\n        );\n      default:\n        return (\n          <Input\n            type=\"text\"\n            value={editForm.value}\n            onChange={(e) => setEditForm({ ...editForm, value: e.target.value })}\n            placeholder=\"Valor da configuração\"\n            className=\"bg-gray-800 border-gray-600 text-white\"\n          />\n        );\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-[#0a0a0a] text-white\">\n      <Navigation />\n      \n      {/* Header */}\n      <div className=\"bg-[#111111] border-b border-[#333] mt-16\">\n        <div className=\"container mx-auto px-4 py-8\">\n          <div className=\"flex items-center gap-4 mb-6\">\n            <Link href=\"/admin\">\n              <Button variant=\"outline\" size=\"sm\" className=\"gap-2 border-[#e84b5e] text-[#e84b5e] hover:bg-[#e84b5e] hover:text-white\">\n                <ArrowLeft className=\"h-4 w-4\" />\n                Voltar ao Dashboard\n              </Button>\n            </Link>\n          </div>\n          <div className=\"flex items-center gap-3 mb-4\">\n            <Palette className=\"h-8 w-8 text-[#e84b5e]\" />\n            <h1 className=\"text-3xl md:text-4xl font-bold text-white\">\n              Configurações de Páginas\n            </h1>\n          </div>\n          <p className=\"text-gray-400 text-lg\">\n            Edite textos, cores, tamanhos e imagens de todas as páginas do website\n          </p>\n        </div>\n      </div>\n\n      {/* Page Selector */}\n      <div className=\"container mx-auto px-4 py-6\">\n        <div className=\"flex flex-wrap gap-4 mb-6\">\n          <div className=\"flex items-center gap-2\">\n            <Label htmlFor=\"page-select\" className=\"text-white font-medium\">\n              Página:\n            </Label>\n            <Select value={selectedPage} onValueChange={setSelectedPage}>\n              <SelectTrigger className=\"w-[200px] bg-gray-800 border-gray-600 text-white\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent className=\"bg-gray-800 border-gray-600\">\n                {pages.map((page) => (\n                  <SelectItem key={page.value} value={page.value} className=\"text-white hover:bg-gray-700\">\n                    {page.label}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n          <Button\n            onClick={startAdd}\n            className=\"bg-[#e84b5e] hover:bg-[#d63951] text-white gap-2\"\n          >\n            <Plus className=\"h-4 w-4\" />\n            Nova Configuração\n          </Button>\n        </div>\n\n        {/* Add/Edit Form */}\n        {(showAddForm || editingId) && (\n          <Card className=\"bg-[#111111] border-[#333] mb-6\">\n            <CardHeader>\n              <CardTitle className=\"text-white flex items-center gap-2\">\n                <Settings className=\"h-5 w-5\" />\n                {editingId ? \"Editar Configuração\" : \"Nova Configuração\"}\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                <div>\n                  <Label htmlFor=\"section\" className=\"text-white\">Secção</Label>\n                  <Input\n                    id=\"section\"\n                    value={editForm.section}\n                    onChange={(e) => setEditForm({ ...editForm, section: e.target.value })}\n                    placeholder=\"hero, features, about, etc.\"\n                    className=\"bg-gray-800 border-gray-600 text-white\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"element\" className=\"text-white\">Elemento</Label>\n                  <Input\n                    id=\"element\"\n                    value={editForm.element}\n                    onChange={(e) => setEditForm({ ...editForm, element: e.target.value })}\n                    placeholder=\"title, subtitle, description, etc.\"\n                    className=\"bg-gray-800 border-gray-600 text-white\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"type\" className=\"text-white\">Tipo</Label>\n                  <Select value={editForm.type} onValueChange={(value: \"text\" | \"color\" | \"size\" | \"image\" | \"number\") => setEditForm({ ...editForm, type: value })}>\n                    <SelectTrigger className=\"bg-gray-800 border-gray-600 text-white\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent className=\"bg-gray-800 border-gray-600\">\n                      {configTypes.map((type) => (\n                        <SelectItem key={type.value} value={type.value} className=\"text-white hover:bg-gray-700\">\n                          {type.label}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n              \n              <div>\n                <Label htmlFor=\"value\" className=\"text-white\">Valor</Label>\n                {renderFormInput()}\n              </div>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"defaultValue\" className=\"text-white\">Valor Padrão (opcional)</Label>\n                  <Input\n                    id=\"defaultValue\"\n                    value={editForm.defaultValue}\n                    onChange={(e) => setEditForm({ ...editForm, defaultValue: e.target.value })}\n                    placeholder=\"Valor padrão\"\n                    className=\"bg-gray-800 border-gray-600 text-white\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"metadata\" className=\"text-white\">Metadata (JSON opcional)</Label>\n                  <Input\n                    id=\"metadata\"\n                    value={editForm.metadata}\n                    onChange={(e) => setEditForm({ ...editForm, metadata: e.target.value })}\n                    placeholder='{\"unit\": \"px\", \"min\": 10, \"max\": 100}'\n                    className=\"bg-gray-800 border-gray-600 text-white\"\n                  />\n                </div>\n              </div>\n\n              <div className=\"flex gap-2\">\n                <Button \n                  onClick={handleSave}\n                  className=\"bg-green-600 hover:bg-green-700 text-white gap-2\"\n                >\n                  <Save className=\"h-4 w-4\" />\n                  Guardar\n                </Button>\n                <Button \n                  onClick={() => {\n                    setEditingId(null);\n                    setShowAddForm(false);\n                    resetForm();\n                  }}\n                  variant=\"outline\"\n                  className=\"border-gray-600 text-gray-300 hover:bg-gray-700 gap-2\"\n                >\n                  <X className=\"h-4 w-4\" />\n                  Cancelar\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Configs List */}\n        <div className=\"space-y-4\">\n          {loading ? (\n            <div className=\"text-center py-8\">\n              <div className=\"text-gray-400\">A carregar configurações...</div>\n            </div>\n          ) : configs.length === 0 ? (\n            <Card className=\"bg-[#111111] border-[#333]\">\n              <CardContent className=\"py-8 text-center\">\n                <Settings className=\"h-12 w-12 text-gray-500 mx-auto mb-4\" />\n                <p className=\"text-gray-400 text-lg mb-2\">\n                  Nenhuma configuração encontrada\n                </p>\n                <p className=\"text-gray-500 text-sm\">\n                  Crie a primeira configuração para a página {pages.find(p => p.value === selectedPage)?.label}\n                </p>\n              </CardContent>\n            </Card>\n          ) : (\n            configs.map((config) => (\n              <Card key={config.id} className=\"bg-[#111111] border-[#333]\">\n                <CardContent className=\"py-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex-1 grid grid-cols-1 md:grid-cols-4 gap-4\">\n                      <div>\n                        <div className=\"text-sm text-gray-500\">Secção / Elemento</div>\n                        <div className=\"text-white font-medium\">\n                          {config.section} / {config.element}\n                        </div>\n                      </div>\n                      <div>\n                        <div className=\"text-sm text-gray-500\">Tipo</div>\n                        <Badge variant=\"secondary\" className=\"bg-gray-700 text-gray-200\">\n                          {configTypes.find(t => t.value === config.type)?.label || config.type}\n                        </Badge>\n                      </div>\n                      <div className=\"md:col-span-1\">\n                        <div className=\"text-sm text-gray-500\">Valor</div>\n                        {renderConfigValue(config)}\n                      </div>\n                      <div className=\"flex gap-2 justify-end\">\n                        <Button\n                          onClick={() => startEdit(config)}\n                          size=\"sm\"\n                          variant=\"outline\"\n                          className=\"border-blue-500 text-blue-400 hover:bg-blue-500 hover:text-white\"\n                        >\n                          <Edit className=\"h-4 w-4\" />\n                        </Button>\n                        <Button\n                          onClick={() => deleteConfig(config.id)}\n                          size=\"sm\"\n                          variant=\"outline\"\n                          className=\"border-red-500 text-red-400 hover:bg-red-500 hover:text-white\"\n                        >\n                          <Trash2 className=\"h-4 w-4\" />\n                        </Button>\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":23273},"client/src/hooks/use-page-config.ts":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport type { PageConfig } from \"@shared/schema\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface PageConfigsResponse {\n  configs: PageConfig[];\n}\n\nexport function usePageConfig(page: string) {\n  const queryClient = useQueryClient();\n  const { data, isLoading, error } = useQuery<PageConfigsResponse>({\n    queryKey: ['/api/admin/pages', page],\n    enabled: !!page,\n  });\n  \n  const updateConfigMutation = useMutation({\n    mutationFn: async ({ section, element, value }: { section: string; element: string; value: string }) => {\n      return apiRequest(`/api/admin/pages/${page}/config`, 'POST', { section, element, value });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/pages', page] });\n    }\n  });\n\n  // Helper function to get a specific config value\n  const getConfig = (section: string, element: string, defaultValue?: string) => {\n    if (!data?.configs) return defaultValue || '';\n    \n    const config = data.configs.find(\n      c => c.section === section && c.element === element\n    );\n    \n    return config?.value || config?.defaultValue || defaultValue || '';\n  };\n\n  // Helper function to get all configs for a section\n  const getSectionConfigs = (section: string) => {\n    if (!data?.configs) return [];\n    \n    return data.configs.filter(c => c.section === section);\n  };\n\n  // Helper function to check if a config exists\n  const hasConfig = (section: string, element: string) => {\n    if (!data?.configs) return false;\n    \n    return data.configs.some(\n      c => c.section === section && c.element === element\n    );\n  };\n\n  const updateConfig = async (section: string, element: string, value: string) => {\n    return updateConfigMutation.mutateAsync({ section, element, value });\n  };\n\n  return {\n    configs: data?.configs || [],\n    isLoading,\n    error,\n    getConfig,\n    getSectionConfigs,\n    hasConfig,\n    updateConfig,\n    isUpdating: updateConfigMutation.isPending,\n  };\n}","size_bytes":2040},"client/src/pages/backlink.tsx":{"content":"import { useLocation } from \"wouter\";\n\nfunction Backlink() {\n  const [location] = useLocation();\n\n  // Não mostrar na home\n  if (location === \"/\") return null;\n\n  return (\n    <a\n      href=\"/\"\n      className=\"block text-sm text-gray-500 hover:text-gray-700 px-4 py-2\"\n    >\n      ⬅ Voltar\n    </a>\n  );\n}\n\nexport default Backlink;\n","size_bytes":336},"client/src/components/ClientLogos.css":{"content":"/* Animação fade-in com scale para entrada dos logótipos */\n@keyframes fade-in-scale {\n  from {\n    opacity: 0;\n    transform: scale(0.8) translateY(20px);\n  }\n  to {\n    opacity: 1;\n    transform: scale(1) translateY(0);\n  }\n}\n\n.animate-fade-in-scale {\n  animation: fade-in-scale 0.6s ease-out forwards;\n  opacity: 0; /* Inicia invisível */\n}\n\n/* Hover states personalizados */\n.client-logo-card {\n  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n}\n\n.client-logo-card:hover {\n  transform: translateY(-4px) scale(1.02);\n  box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);\n}\n\n/* Indicadores de progresso personalizados */\n.progress-indicator {\n  transition: all 0.3s ease;\n  cursor: pointer;\n}\n\n.progress-indicator:hover {\n  transform: scale(1.2);\n}\n\n.progress-indicator.active {\n  box-shadow: 0 0 10px rgba(255, 215, 0, 0.5);\n}","size_bytes":872},"client/src/components/ClientLogos.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport \"./ClientLogos.css\";\n\ninterface ClientLogo {\n  id: string;\n  url: string;\n  clientName: string;\n  fileName: string;\n}\n\ninterface LogosResponse {\n  logos: ClientLogo[];\n}\n\nconst fallbackLogos: ClientLogo[] = [\n  { id: \"placeholder-1\", url: \"\", clientName: \"COLE O NOME DO CLIENTE AQUI\", fileName: \"placeholder-1\" },\n  { id: \"placeholder-2\", url: \"\", clientName: \"COLE O NOME DO CLIENTE AQUI\", fileName: \"placeholder-2\" },\n  { id: \"placeholder-3\", url: \"\", clientName: \"COLE O NOME DO CLIENTE AQUI\", fileName: \"placeholder-3\" },\n  { id: \"placeholder-4\", url: \"\", clientName: \"COLE O NOME DO CLIENTE AQUI\", fileName: \"placeholder-4\" },\n  { id: \"placeholder-5\", url: \"\", clientName: \"COLE O NOME DO CLIENTE AQUI\", fileName: \"placeholder-5\" },\n  { id: \"placeholder-6\", url: \"\", clientName: \"COLE O NOME DO CLIENTE AQUI\", fileName: \"placeholder-6\" },\n];\n\nexport default function ClientLogos() {\n  const [translateX, setTranslateX] = useState(0);\n  const [mousePosition, setMousePosition] = useState(0.5); // 0.5 = centro\n  const [isMouseOver, setIsMouseOver] = useState(false);\n  const animationRef = useRef<number>();\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  // Carregar logótipos da API (object storage)\n  const { data: logosData, isLoading } = useQuery<LogosResponse>({\n    queryKey: ['/api/client-logos'],\n    refetchInterval: 10000, // Atualizar a cada 10 segundos para novos logótipos\n  });\n\n  // Usar logótipos reais ou fallback\n  const clientLogos = (logosData?.logos && logosData.logos.length > 0) ? logosData.logos : fallbackLogos;\n  \n  // Duplicar os logos para criar o efeito infinito\n  const duplicatedLogos = [...clientLogos, ...clientLogos, ...clientLogos];\n\n  // Controlar movimento baseado na posição do rato ou movimento automático\n  useEffect(() => {\n    const animate = () => {\n      if (isMouseOver) {\n        // Rato sobre os logótipos - controlo manual\n        if (mousePosition < 0.4) {\n          // Rato à esquerda - mover logótipos para a direita\n          setTranslateX(prev => prev + 2);\n        } else if (mousePosition > 0.6) {\n          // Rato à direita - mover logótipos para a esquerda\n          setTranslateX(prev => prev - 2);\n        }\n        // Entre 0.4 e 0.6 (centro) - não mexer\n      } else {\n        // Sem rato - movimento automático para a esquerda\n        setTranslateX(prev => {\n          const newTranslateX = prev - 1;\n          // Resetar quando completamos um ciclo completo\n          // Cada logo tem aprox. 200px de largura (incluindo gap)\n          const logoWidth = 200;\n          const totalWidth = clientLogos.length * logoWidth;\n          \n          if (Math.abs(newTranslateX) >= totalWidth) {\n            return 0;\n          }\n          return newTranslateX;\n        });\n      }\n\n      animationRef.current = requestAnimationFrame(animate);\n    };\n\n    animationRef.current = requestAnimationFrame(animate);\n\n    return () => {\n      if (animationRef.current) {\n        cancelAnimationFrame(animationRef.current);\n      }\n    };\n  }, [mousePosition, isMouseOver, clientLogos.length]);\n\n  // Detectar posição do rato\n  const handleMouseMove = (e: React.MouseEvent) => {\n    const rect = e.currentTarget.getBoundingClientRect();\n    const x = e.clientX - rect.left;\n    const width = rect.width;\n    setMousePosition(x / width); // Normalizar entre 0 e 1\n  };\n\n  // Detectar quando rato entra e sai\n  const handleMouseEnter = () => {\n    setIsMouseOver(true);\n  };\n\n  const handleMouseLeave = () => {\n    setIsMouseOver(false);\n    setMousePosition(0.5); // Voltar ao centro\n  };\n\n  if (isLoading) {\n    return (\n      <section className=\"py-16 px-4 bg-[#0a0a0a]\">\n        <div className=\"max-w-6xl mx-auto text-center\">\n          <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">\n            {Array.from({ length: 4 }).map((_, i) => (\n              <div key={i} className=\"bg-gray-800 rounded-lg h-32\"></div>\n            ))}\n          </div>\n        </div>\n      </section>\n    );\n  }\n\n  return (\n    <section className=\"py-16 bg-[#0a0a0a] w-full\">\n      {/* Título */}\n      <div className=\"text-center mb-12 px-4\">\n        <h2 className=\"text-3xl md:text-4xl font-bold mb-4 text-white\">\n          Clientes que Confiam em Nós\n        </h2>\n      </div>\n\n      {/* Linha Horizontal de Logótipos com Movimento */}\n      <div \n        ref={containerRef}\n        className=\"relative overflow-hidden cursor-none w-full\"\n        onMouseMove={handleMouseMove}\n        onMouseEnter={handleMouseEnter}\n        onMouseLeave={handleMouseLeave}\n      >\n          <div \n            className=\"flex items-center gap-8 transition-transform duration-100 ease-linear\"\n            style={{\n              transform: `translateX(${translateX}px)`,\n              width: 'fit-content'\n            }}\n          >\n            {duplicatedLogos.map((logo, index) => (\n              <div\n                key={`${logo.id}-${index}`}\n                className=\"flex-shrink-0 animate-fade-in-scale\"\n                style={{\n                  animationDelay: `${index * 0.1}s`\n                }}\n              >\n                {/* Container do Logótipo */}\n                <div className=\"flex items-center justify-center group\">\n                  {/* IMAGEM DO LOGÓTIPO */}\n                  {logo.url ? (\n                    <div className=\"flex items-center justify-center transition-all duration-300 group-hover:scale-110\">\n                      <img \n                        src={logo.url} \n                        alt={`Logótipo ${logo.clientName}`}\n                        className=\"max-h-32 w-auto object-contain transition-transform duration-300\"\n                        loading=\"lazy\"\n                        onError={(e) => {\n                          console.log('Erro ao carregar logótipo:', logo.url);\n                          const target = e.target as HTMLImageElement;\n                          target.style.display = 'none';\n                          const fallback = target.nextElementSibling as HTMLElement;\n                          if (fallback) {\n                            fallback.classList.remove('hidden');\n                          }\n                        }}\n                      />\n                      {/* Fallback para erro de imagem */}\n                      <div className=\"hidden bg-gray-800 rounded-lg p-4 border-2 border-dashed border-gray-600\">\n                        <span className=\"text-gray-400 text-sm font-medium text-center\">\n                          COLE LOGO AQUI\n                        </span>\n                      </div>\n                    </div>\n                  ) : (\n                    <div className=\"bg-gray-800 rounded-lg p-6 border-2 border-dashed border-gray-600 group-hover:border-brand-yellow transition-colors\">\n                      <span className=\"text-gray-400 text-sm font-medium text-center\">\n                        COLE LOGO AQUI\n                      </span>\n                    </div>\n                  )}\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n    </section>\n  );\n}","size_bytes":7195},"client/src/components/performance-preloader.tsx":{"content":"import { useEffect } from 'react';\n\nexport default function PerformancePreloader() {\n  useEffect(() => {\n    // Preload critical resources\n    const criticalAssets = [\n      '/assets/domrealce-logo.png',\n      'https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&family=Poppins:wght@400;500;600;700&display=swap'\n    ];\n\n    // Preload critical assets\n    criticalAssets.forEach(asset => {\n      if (asset.includes('fonts.googleapis.com')) {\n        // Preload CSS\n        const link = document.createElement('link');\n        link.rel = 'preload';\n        link.as = 'style';\n        link.href = asset;\n        link.onload = () => {\n          link.rel = 'stylesheet';\n        };\n        document.head.appendChild(link);\n      } else {\n        // Preload images\n        const link = document.createElement('link');\n        link.rel = 'preload';\n        link.as = 'image';\n        link.href = asset;\n        document.head.appendChild(link);\n      }\n    });\n\n    // Add resource hints for external domains\n    const resourceHints = [\n      { rel: 'dns-prefetch', href: 'https://fonts.googleapis.com' },\n      { rel: 'dns-prefetch', href: 'https://fonts.gstatic.com' },\n      { rel: 'dns-prefetch', href: 'https://www.google-analytics.com' },\n      { rel: 'preconnect', href: 'https://fonts.googleapis.com' },\n      { rel: 'preconnect', href: 'https://fonts.gstatic.com', crossorigin: 'anonymous' }\n    ];\n\n    resourceHints.forEach(hint => {\n      if (!document.querySelector(`link[href=\"${hint.href}\"][rel=\"${hint.rel}\"]`)) {\n        const link = document.createElement('link');\n        link.rel = hint.rel;\n        link.href = hint.href;\n        if (hint.crossorigin) {\n          link.crossOrigin = hint.crossorigin;\n        }\n        document.head.appendChild(link);\n      }\n    });\n\n    // Service Worker registration for caching\n    if ('serviceWorker' in navigator && import.meta.env.PROD) {\n      navigator.serviceWorker.register('/sw.js').catch(() => {\n        // Service worker registration failed, but don't break the app\n      });\n    }\n\n    // Optimize images loading\n    const images = document.querySelectorAll('img[loading=\"lazy\"]');\n    if ('IntersectionObserver' in window) {\n      const imageObserver = new IntersectionObserver((entries) => {\n        entries.forEach(entry => {\n          if (entry.isIntersecting) {\n            const img = entry.target as HTMLImageElement;\n            if (img.dataset.src) {\n              img.src = img.dataset.src;\n              img.removeAttribute('data-src');\n              imageObserver.unobserve(img);\n            }\n          }\n        });\n      });\n\n      images.forEach(img => imageObserver.observe(img));\n    }\n\n    // Critical CSS inlining detection\n    const criticalCSS = document.getElementById('critical-css');\n    if (!criticalCSS) {\n      // Add minimal critical CSS inline for better LCP\n      const style = document.createElement('style');\n      style.id = 'critical-css';\n      style.textContent = `\n        body { margin: 0; font-family: Inter, system-ui, sans-serif; }\n        .animate-pulse { animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite; }\n        @keyframes pulse { 0%, 100% { opacity: 1; } 50% { opacity: .5; } }\n      `;\n      document.head.appendChild(style);\n    }\n\n  }, []);\n\n  return null;\n}","size_bytes":3297},"client/src/pages/admin-editor.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport Navigation from \"@/components/navigation\";\nimport { \n  ArrowLeft, Edit3, Eye, Save, Undo, Redo, Plus, Trash2, \n  Image, Type, Layout, Palette, Upload, Download, Monitor,\n  Move, Copy, Settings, RefreshCw\n} from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface Block {\n  id: string;\n  type: 'hero' | 'text' | 'image' | 'gallery' | 'grid' | 'cta' | 'separator' | 'section';\n  content: any;\n  styles: {\n    backgroundColor?: string;\n    textColor?: string;\n    padding?: string;\n    margin?: string;\n    fontSize?: string;\n    fontWeight?: string;\n    textAlign?: 'left' | 'center' | 'right';\n    width?: string;\n  };\n  position: number;\n}\n\ninterface PageContent {\n  id: string;\n  route: string;\n  title: string;\n  blocks: Block[];\n  metadata: {\n    seoTitle?: string;\n    seoDescription?: string;\n    keywords?: string;\n  };\n  version: number;\n  status: 'draft' | 'published';\n  updatedAt: string;\n}\n\nconst blockTypes = [\n  { value: 'hero', label: 'Hero Banner', icon: Layout },\n  { value: 'text', label: 'Texto', icon: Type },\n  { value: 'image', label: 'Imagem', icon: Image },\n  { value: 'gallery', label: 'Galeria', icon: Image },\n  { value: 'grid', label: 'Grid Cards', icon: Layout },\n  { value: 'cta', label: 'Botão/CTA', icon: Plus },\n  { value: 'separator', label: 'Separador', icon: Separator },\n  { value: 'section', label: 'Secção', icon: Layout },\n];\n\nconst availablePages = [\n  { route: '/', title: 'Página Inicial' },\n  { route: '/sobre', title: 'Sobre Nós' },\n  { route: '/servicos', title: 'Serviços' },\n  { route: '/portfolio', title: 'Portfólio' },\n  { route: '/contactos', title: 'Contactos' },\n  { route: '/loja', title: 'Loja Online' },\n];\n\nexport default function AdminEditor() {\n  const { toast } = useToast();\n  const [selectedPage, setSelectedPage] = useState<string>('/');\n  const [pageContent, setPageContent] = useState<PageContent | null>(null);\n  const [loading, setLoading] = useState(false);\n  const [editingBlock, setEditingBlock] = useState<string | null>(null);\n  const [showPreview, setShowPreview] = useState(false);\n  const [history, setHistory] = useState<PageContent[]>([]);\n  const [historyIndex, setHistoryIndex] = useState(-1);\n\n  useEffect(() => {\n    loadPageContent();\n  }, [selectedPage]);\n\n  const loadPageContent = async () => {\n    try {\n      setLoading(true);\n      const response = await fetch(`/api/editor/page${selectedPage === '/' ? '/index' : selectedPage}`);\n      \n      if (response.ok) {\n        const data = await response.json();\n        setPageContent(data);\n        setHistory([data]);\n        setHistoryIndex(0);\n      } else {\n        // Create new page if doesn't exist\n        const newPage: PageContent = {\n          id: crypto.randomUUID(),\n          route: selectedPage,\n          title: availablePages.find(p => p.route === selectedPage)?.title || 'Nova Página',\n          blocks: [],\n          metadata: {},\n          version: 1,\n          status: 'draft',\n          updatedAt: new Date().toISOString()\n        };\n        setPageContent(newPage);\n        setHistory([newPage]);\n        setHistoryIndex(0);\n      }\n    } catch (error) {\n      console.error('Error loading page:', error);\n      toast({\n        title: \"Erro\",\n        description: \"Falha ao carregar página\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const savePageContent = async (status: 'draft' | 'published' = 'draft') => {\n    if (!pageContent) return;\n\n    try {\n      const updatedContent = {\n        ...pageContent,\n        status,\n        version: pageContent.version + 1,\n        updatedAt: new Date().toISOString()\n      };\n\n      const response = await fetch('/api/editor/page', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(updatedContent),\n      });\n\n      if (response.ok) {\n        setPageContent(updatedContent);\n        addToHistory(updatedContent);\n        toast({\n          title: \"Sucesso\",\n          description: status === 'published' ? \"Página publicada!\" : \"Rascunho guardado\",\n        });\n      }\n    } catch (error) {\n      console.error('Error saving page:', error);\n      toast({\n        title: \"Erro\",\n        description: \"Falha ao guardar página\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const addToHistory = (content: PageContent) => {\n    const newHistory = history.slice(0, historyIndex + 1);\n    newHistory.push(content);\n    setHistory(newHistory);\n    setHistoryIndex(newHistory.length - 1);\n  };\n\n  const undo = () => {\n    if (historyIndex > 0) {\n      setHistoryIndex(historyIndex - 1);\n      setPageContent(history[historyIndex - 1]);\n    }\n  };\n\n  const redo = () => {\n    if (historyIndex < history.length - 1) {\n      setHistoryIndex(historyIndex + 1);\n      setPageContent(history[historyIndex + 1]);\n    }\n  };\n\n  const addBlock = (type: Block['type']) => {\n    if (!pageContent) return;\n\n    const newBlock: Block = {\n      id: crypto.randomUUID(),\n      type,\n      content: getDefaultContent(type),\n      styles: getDefaultStyles(type),\n      position: pageContent.blocks.length\n    };\n\n    const updatedContent = {\n      ...pageContent,\n      blocks: [...pageContent.blocks, newBlock]\n    };\n\n    setPageContent(updatedContent);\n    addToHistory(updatedContent);\n  };\n\n  const deleteBlock = (blockId: string) => {\n    if (!pageContent) return;\n\n    const updatedContent = {\n      ...pageContent,\n      blocks: pageContent.blocks.filter(block => block.id !== blockId)\n    };\n\n    setPageContent(updatedContent);\n    addToHistory(updatedContent);\n  };\n\n  const duplicateBlock = (blockId: string) => {\n    if (!pageContent) return;\n\n    const blockToDuplicate = pageContent.blocks.find(b => b.id === blockId);\n    if (!blockToDuplicate) return;\n\n    const newBlock: Block = {\n      ...blockToDuplicate,\n      id: crypto.randomUUID(),\n      position: blockToDuplicate.position + 1\n    };\n\n    const updatedBlocks = [...pageContent.blocks];\n    updatedBlocks.splice(blockToDuplicate.position + 1, 0, newBlock);\n    \n    // Update positions\n    updatedBlocks.forEach((block, index) => {\n      block.position = index;\n    });\n\n    const updatedContent = {\n      ...pageContent,\n      blocks: updatedBlocks\n    };\n\n    setPageContent(updatedContent);\n    addToHistory(updatedContent);\n  };\n\n  const moveBlock = (blockId: string, direction: 'up' | 'down') => {\n    if (!pageContent) return;\n\n    const blocks = [...pageContent.blocks];\n    const blockIndex = blocks.findIndex(b => b.id === blockId);\n    \n    if (blockIndex === -1) return;\n    \n    const newIndex = direction === 'up' ? blockIndex - 1 : blockIndex + 1;\n    \n    if (newIndex < 0 || newIndex >= blocks.length) return;\n\n    // Swap blocks\n    [blocks[blockIndex], blocks[newIndex]] = [blocks[newIndex], blocks[blockIndex]];\n    \n    // Update positions\n    blocks.forEach((block, index) => {\n      block.position = index;\n    });\n\n    const updatedContent = {\n      ...pageContent,\n      blocks\n    };\n\n    setPageContent(updatedContent);\n    addToHistory(updatedContent);\n  };\n\n  const getDefaultContent = (type: Block['type']) => {\n    switch (type) {\n      case 'hero':\n        return {\n          title: 'Título Principal',\n          subtitle: 'Subtítulo opcional',\n          description: 'Descrição do hero banner',\n          backgroundImage: '',\n          ctaText: 'Botão de Acção',\n          ctaLink: '#'\n        };\n      case 'text':\n        return {\n          content: '<p>Insira o seu texto aqui...</p>'\n        };\n      case 'image':\n        return {\n          src: '',\n          alt: 'Descrição da imagem',\n          caption: '',\n          link: ''\n        };\n      case 'gallery':\n        return {\n          images: [],\n          layout: 'grid',\n          columns: 3\n        };\n      case 'grid':\n        return {\n          title: 'Grid de Cards',\n          cards: [\n            { title: 'Card 1', description: 'Descrição', image: '', link: '' }\n          ]\n        };\n      case 'cta':\n        return {\n          text: 'Botão de Acção',\n          link: '#',\n          style: 'primary'\n        };\n      case 'separator':\n        return {\n          style: 'line',\n          color: '#333'\n        };\n      case 'section':\n        return {\n          title: 'Nova Secção',\n          content: 'Conteúdo da secção'\n        };\n      default:\n        return {};\n    }\n  };\n\n  const getDefaultStyles = (type: Block['type']) => {\n    const baseStyles = {\n      padding: '2rem',\n      margin: '0',\n      textAlign: 'left' as const,\n    };\n\n    switch (type) {\n      case 'hero':\n        return {\n          ...baseStyles,\n          backgroundColor: '#000000',\n          textColor: '#ffffff',\n          fontSize: '3rem',\n          fontWeight: 'bold',\n          textAlign: 'center' as const,\n          padding: '4rem 2rem'\n        };\n      case 'text':\n        return {\n          ...baseStyles,\n          textColor: '#ffffff',\n          fontSize: '1rem'\n        };\n      case 'cta':\n        return {\n          ...baseStyles,\n          textAlign: 'center' as const,\n          backgroundColor: '#FFD700',\n          textColor: '#000000',\n          fontWeight: 'bold'\n        };\n      default:\n        return baseStyles;\n    }\n  };\n\n  const renderBlockEditor = (block: Block) => {\n    return (\n      <Card key={block.id} className=\"bg-[#111111] border-[#333] mb-4\">\n        <CardHeader className=\"pb-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-2\">\n              <Badge variant=\"outline\" className=\"border-[#FFD700] text-[#FFD700]\">\n                {blockTypes.find(bt => bt.value === block.type)?.label || block.type}\n              </Badge>\n              <span className=\"text-sm text-gray-400\">Posição {block.position + 1}</span>\n            </div>\n            <div className=\"flex gap-1\">\n              <Button\n                size=\"sm\"\n                variant=\"outline\"\n                onClick={() => moveBlock(block.id, 'up')}\n                disabled={block.position === 0}\n                className=\"h-8 w-8 p-0\"\n              >\n                ↑\n              </Button>\n              <Button\n                size=\"sm\"\n                variant=\"outline\"\n                onClick={() => moveBlock(block.id, 'down')}\n                disabled={block.position === pageContent!.blocks.length - 1}\n                className=\"h-8 w-8 p-0\"\n              >\n                ↓\n              </Button>\n              <Button\n                size=\"sm\"\n                variant=\"outline\"\n                onClick={() => duplicateBlock(block.id)}\n                className=\"h-8 w-8 p-0\"\n              >\n                <Copy className=\"h-4 w-4\" />\n              </Button>\n              <Button\n                size=\"sm\"\n                variant=\"outline\"\n                onClick={() => deleteBlock(block.id)}\n                className=\"h-8 w-8 p-0 border-red-500 text-red-400 hover:bg-red-500 hover:text-white\"\n              >\n                <Trash2 className=\"h-4 w-4\" />\n              </Button>\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent>\n          {renderBlockContent(block)}\n        </CardContent>\n      </Card>\n    );\n  };\n\n  const renderBlockContent = (block: Block) => {\n    switch (block.type) {\n      case 'hero':\n        return (\n          <div className=\"space-y-4\">\n            <div>\n              <Label>Título</Label>\n              <Input\n                value={block.content.title || ''}\n                onChange={(e) => updateBlockContent(block.id, 'title', e.target.value)}\n                className=\"bg-[#222] border-[#444] text-white\"\n              />\n            </div>\n            <div>\n              <Label>Subtítulo</Label>\n              <Input\n                value={block.content.subtitle || ''}\n                onChange={(e) => updateBlockContent(block.id, 'subtitle', e.target.value)}\n                className=\"bg-[#222] border-[#444] text-white\"\n              />\n            </div>\n            <div>\n              <Label>Descrição</Label>\n              <Textarea\n                value={block.content.description || ''}\n                onChange={(e) => updateBlockContent(block.id, 'description', e.target.value)}\n                className=\"bg-[#222] border-[#444] text-white\"\n                rows={3}\n              />\n            </div>\n            <div>\n              <Label>Imagem de Fundo</Label>\n              <Input\n                value={block.content.backgroundImage || ''}\n                onChange={(e) => updateBlockContent(block.id, 'backgroundImage', e.target.value)}\n                placeholder=\"URL da imagem ou /public-objects/...\"\n                className=\"bg-[#222] border-[#444] text-white\"\n              />\n            </div>\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <Label>Texto do Botão</Label>\n                <Input\n                  value={block.content.ctaText || ''}\n                  onChange={(e) => updateBlockContent(block.id, 'ctaText', e.target.value)}\n                  className=\"bg-[#222] border-[#444] text-white\"\n                />\n              </div>\n              <div>\n                <Label>Link do Botão</Label>\n                <Input\n                  value={block.content.ctaLink || ''}\n                  onChange={(e) => updateBlockContent(block.id, 'ctaLink', e.target.value)}\n                  className=\"bg-[#222] border-[#444] text-white\"\n                />\n              </div>\n            </div>\n          </div>\n        );\n      \n      case 'text':\n        return (\n          <div>\n            <Label>Conteúdo</Label>\n            <Textarea\n              value={block.content.content || ''}\n              onChange={(e) => updateBlockContent(block.id, 'content', e.target.value)}\n              className=\"bg-[#222] border-[#444] text-white\"\n              rows={6}\n              placeholder=\"Suporta HTML básico: <p>, <strong>, <em>, <a>, etc.\"\n            />\n          </div>\n        );\n\n      case 'image':\n        return (\n          <div className=\"space-y-4\">\n            <div>\n              <Label>URL da Imagem</Label>\n              <Input\n                value={block.content.src || ''}\n                onChange={(e) => updateBlockContent(block.id, 'src', e.target.value)}\n                placeholder=\"/public-objects/imagem.jpg\"\n                className=\"bg-[#222] border-[#444] text-white\"\n              />\n            </div>\n            <div>\n              <Label>Texto Alternativo</Label>\n              <Input\n                value={block.content.alt || ''}\n                onChange={(e) => updateBlockContent(block.id, 'alt', e.target.value)}\n                className=\"bg-[#222] border-[#444] text-white\"\n              />\n            </div>\n            <div>\n              <Label>Legenda (opcional)</Label>\n              <Input\n                value={block.content.caption || ''}\n                onChange={(e) => updateBlockContent(block.id, 'caption', e.target.value)}\n                className=\"bg-[#222] border-[#444] text-white\"\n              />\n            </div>\n            <div>\n              <Label>Link (opcional)</Label>\n              <Input\n                value={block.content.link || ''}\n                onChange={(e) => updateBlockContent(block.id, 'link', e.target.value)}\n                className=\"bg-[#222] border-[#444] text-white\"\n              />\n            </div>\n          </div>\n        );\n\n      default:\n        return (\n          <div className=\"text-gray-400 text-center py-4\">\n            Editor para {block.type} em desenvolvimento\n          </div>\n        );\n    }\n  };\n\n  const updateBlockContent = (blockId: string, field: string, value: any) => {\n    if (!pageContent) return;\n\n    const updatedBlocks = pageContent.blocks.map(block => {\n      if (block.id === blockId) {\n        return {\n          ...block,\n          content: {\n            ...block.content,\n            [field]: value\n          }\n        };\n      }\n      return block;\n    });\n\n    const updatedContent = {\n      ...pageContent,\n      blocks: updatedBlocks\n    };\n\n    setPageContent(updatedContent);\n  };\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen bg-[#0a0a0a] text-white\">\n        <Navigation />\n        <div className=\"container mx-auto px-4 py-16 mt-16\">\n          <div className=\"text-center\">\n            <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-[#FFD700] mx-auto\"></div>\n            <p className=\"mt-4 text-gray-400\">A carregar editor...</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-[#0a0a0a] text-white\">\n      <Navigation />\n      \n      {/* Header */}\n      <div className=\"bg-[#111111] border-b border-[#333] mt-16\">\n        <div className=\"container mx-auto px-4 py-6\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <Link href=\"/admin\">\n              <Button variant=\"outline\" size=\"sm\" className=\"gap-2 border-[#FFD700] text-[#FFD700] hover:bg-[#FFD700] hover:text-black\">\n                <ArrowLeft className=\"h-4 w-4\" />\n                Dashboard\n              </Button>\n            </Link>\n            \n            <div className=\"flex items-center gap-2\">\n              <Button\n                onClick={undo}\n                disabled={historyIndex <= 0}\n                variant=\"outline\"\n                size=\"sm\"\n                className=\"gap-2\"\n              >\n                <Undo className=\"h-4 w-4\" />\n                Desfazer\n              </Button>\n              <Button\n                onClick={redo}\n                disabled={historyIndex >= history.length - 1}\n                variant=\"outline\"\n                size=\"sm\"\n                className=\"gap-2\"\n              >\n                <Redo className=\"h-4 w-4\" />\n                Refazer\n              </Button>\n              <Button\n                onClick={() => savePageContent('draft')}\n                variant=\"outline\"\n                size=\"sm\"\n                className=\"gap-2 border-blue-500 text-blue-400\"\n              >\n                <Save className=\"h-4 w-4\" />\n                Guardar Rascunho\n              </Button>\n              <Button\n                onClick={() => savePageContent('published')}\n                size=\"sm\"\n                className=\"gap-2 bg-green-600 hover:bg-green-700\"\n              >\n                <Upload className=\"h-4 w-4\" />\n                Publicar\n              </Button>\n            </div>\n          </div>\n\n          <div className=\"flex items-center gap-3 mb-4\">\n            <Edit3 className=\"h-6 w-6 text-[#FFD700]\" />\n            <h1 className=\"text-2xl font-bold text-white\">\n              Editor Visual\n            </h1>\n            {pageContent && (\n              <Badge variant={pageContent.status === 'published' ? 'default' : 'secondary'}>\n                {pageContent.status === 'published' ? 'Publicado' : 'Rascunho'}\n              </Badge>\n            )}\n          </div>\n\n          <div className=\"flex items-center gap-4\">\n            <div className=\"flex items-center gap-2\">\n              <Label className=\"text-white\">Página:</Label>\n              <Select value={selectedPage} onValueChange={setSelectedPage}>\n                <SelectTrigger className=\"w-[200px] bg-[#222] border-[#444] text-white\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent className=\"bg-[#222] border-[#444]\">\n                  {availablePages.map((page) => (\n                    <SelectItem key={page.route} value={page.route} className=\"text-white hover:bg-[#333]\">\n                      {page.title}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n            \n            <Button\n              onClick={() => setShowPreview(!showPreview)}\n              variant=\"outline\"\n              size=\"sm\"\n              className=\"gap-2\"\n            >\n              <Eye className=\"h-4 w-4\" />\n              {showPreview ? 'Editor' : 'Preview'}\n            </Button>\n          </div>\n        </div>\n      </div>\n\n      {/* Content */}\n      <div className=\"container mx-auto px-4 py-8\">\n        {!showPreview ? (\n          <div className=\"grid lg:grid-cols-4 gap-6\">\n            {/* Block Palette */}\n            <div className=\"lg:col-span-1\">\n              <Card className=\"bg-[#111111] border-[#333] sticky top-24\">\n                <CardHeader>\n                  <CardTitle className=\"text-[#FFD700] text-lg flex items-center gap-2\">\n                    <Plus className=\"h-5 w-5\" />\n                    Adicionar Bloco\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-2\">\n                  {blockTypes.map((blockType) => {\n                    const IconComponent = blockType.icon;\n                    return (\n                      <Button\n                        key={blockType.value}\n                        onClick={() => addBlock(blockType.value as Block['type'])}\n                        variant=\"outline\"\n                        className=\"w-full justify-start gap-2 border-[#444] text-gray-300 hover:bg-[#222]\"\n                      >\n                        <IconComponent className=\"h-4 w-4\" />\n                        {blockType.label}\n                      </Button>\n                    );\n                  })}\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Editor Area */}\n            <div className=\"lg:col-span-3\">\n              {pageContent && pageContent.blocks.length === 0 ? (\n                <Card className=\"bg-[#111111] border-[#333]\">\n                  <CardContent className=\"py-12 text-center\">\n                    <Layout className=\"h-16 w-16 text-gray-400 mx-auto mb-4\" />\n                    <p className=\"text-gray-400 text-lg mb-2\">\n                      Página vazia\n                    </p>\n                    <p className=\"text-gray-500 text-sm\">\n                      Adicione blocos usando o painel à esquerda\n                    </p>\n                  </CardContent>\n                </Card>\n              ) : (\n                <div className=\"space-y-4\">\n                  {pageContent?.blocks\n                    .sort((a, b) => a.position - b.position)\n                    .map(block => renderBlockEditor(block))}\n                </div>\n              )}\n            </div>\n          </div>\n        ) : (\n          // Preview Mode\n          <div className=\"max-w-6xl mx-auto\">\n            <Card className=\"bg-[#111111] border-[#333]\">\n              <CardHeader>\n                <CardTitle className=\"text-[#FFD700] flex items-center gap-2\">\n                  <Monitor className=\"h-5 w-5\" />\n                  Preview da Página\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"bg-black rounded-lg p-6\">\n                  <div className=\"text-center text-gray-400 py-8\">\n                    Preview em desenvolvimento - Ver versão publicada na página real\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":23872},"client/src/pages/admin-media.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Progress } from \"@/components/ui/progress\";\nimport Navigation from \"@/components/navigation\";\nimport { \n  ArrowLeft, Upload, Search, FolderOpen, Image, Trash2, \n  Copy, Download, RefreshCw, Settings, AlertCircle, \n  FileImage, Folder, Eye, Edit, Move\n} from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface MediaFile {\n  key: string;\n  name: string;\n  url: string;\n  size: number;\n  type: string;\n  dimensions?: { width: number; height: number };\n  pageRoute?: string;\n  category?: string;\n  alt?: string;\n  tags?: string[];\n  hash: string;\n  uploadedAt: string;\n}\n\ninterface MediaFolder {\n  name: string;\n  path: string;\n  count: number;\n  lastModified: string;\n}\n\ninterface SyncResult {\n  newFiles: number;\n  updatedFiles: number;\n  ignoredFiles: number;\n  errors: string[];\n}\n\nexport default function AdminMedia() {\n  const { toast } = useToast();\n  const [mediaFiles, setMediaFiles] = useState<MediaFile[]>([]);\n  const [folders, setFolders] = useState<MediaFolder[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [uploading, setUploading] = useState(false);\n  const [syncing, setSyncing] = useState(false);\n  const [selectedFolder, setSelectedFolder] = useState<string>('all');\n  const [searchTerm, setSearchTerm] = useState('');\n  const [viewMode, setViewMode] = useState<'grid' | 'list'>('grid');\n  const [selectedFiles, setSelectedFiles] = useState<string[]>([]);\n  const [uploadProgress, setUploadProgress] = useState(0);\n\n  useEffect(() => {\n    loadMediaIndex();\n    loadFolders();\n  }, []);\n\n  const loadMediaIndex = async () => {\n    try {\n      setLoading(true);\n      const response = await fetch('/api/admin/media');\n      if (response.ok) {\n        const data = await response.json();\n        setMediaFiles(data.files || []);\n      }\n    } catch (error) {\n      console.error('Error loading media:', error);\n      toast({\n        title: \"Erro\",\n        description: \"Falha ao carregar índice de mídia\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const loadFolders = async () => {\n    try {\n      const response = await fetch('/api/admin/media/folders');\n      if (response.ok) {\n        const data = await response.json();\n        setFolders(data.folders || []);\n      }\n    } catch (error) {\n      console.error('Error loading folders:', error);\n    }\n  };\n\n  const syncGlobalImages = async () => {\n    try {\n      setSyncing(true);\n      const response = await fetch('/api/admin/media/sync-global', {\n        method: 'POST'\n      });\n\n      if (response.ok) {\n        const result: SyncResult = await response.json();\n        \n        toast({\n          title: \"Sincronização Concluída\",\n          description: `${result.newFiles} novas, ${result.updatedFiles} atualizadas, ${result.ignoredFiles} ignoradas`,\n        });\n\n        if (result.errors.length > 0) {\n          console.warn('Sync errors:', result.errors);\n        }\n\n        await loadMediaIndex();\n        await loadFolders();\n      } else {\n        throw new Error('Falha na sincronização');\n      }\n    } catch (error) {\n      console.error('Error syncing:', error);\n      toast({\n        title: \"Erro\",\n        description: \"Falha ao sincronizar imagens\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setSyncing(false);\n    }\n  };\n\n  const uploadFiles = async (files: FileList) => {\n    try {\n      setUploading(true);\n      setUploadProgress(0);\n\n      const formData = new FormData();\n      Array.from(files).forEach(file => {\n        formData.append('files', file);\n      });\n\n      // Add current folder context\n      formData.append('folder', selectedFolder === 'all' ? 'media' : selectedFolder);\n\n      const response = await fetch('/api/admin/media/upload', {\n        method: 'POST',\n        body: formData,\n      });\n\n      if (response.ok) {\n        const result = await response.json();\n        \n        toast({\n          title: \"Upload Concluído\",\n          description: `${result.uploaded} ficheiros enviados com sucesso`,\n        });\n\n        await loadMediaIndex();\n        await loadFolders();\n      } else {\n        throw new Error('Falha no upload');\n      }\n    } catch (error) {\n      console.error('Error uploading:', error);\n      toast({\n        title: \"Erro\",\n        description: \"Falha ao enviar ficheiros\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setUploading(false);\n      setUploadProgress(0);\n    }\n  };\n\n  const deleteFiles = async (fileKeys: string[]) => {\n    if (!confirm(`Eliminar ${fileKeys.length} ficheiro(s)? Esta ação não pode ser desfeita.`)) {\n      return;\n    }\n\n    try {\n      const response = await fetch('/api/admin/media/delete', {\n        method: 'DELETE',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ keys: fileKeys }),\n      });\n\n      if (response.ok) {\n        setMediaFiles(prev => prev.filter(file => !fileKeys.includes(file.key)));\n        setSelectedFiles([]);\n        \n        toast({\n          title: \"Sucesso\",\n          description: `${fileKeys.length} ficheiro(s) eliminado(s)`,\n        });\n      } else {\n        throw new Error('Falha ao eliminar');\n      }\n    } catch (error) {\n      console.error('Error deleting:', error);\n      toast({\n        title: \"Erro\",\n        description: \"Falha ao eliminar ficheiros\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const copyToClipboard = (url: string) => {\n    navigator.clipboard.writeText(url);\n    toast({\n      title: \"Copiado\",\n      description: \"URL copiado para a área de transferência\",\n    });\n  };\n\n  const filteredFiles = mediaFiles.filter(file => {\n    const matchesFolder = selectedFolder === 'all' || \n      file.key.startsWith(`${selectedFolder}/`) ||\n      file.category === selectedFolder;\n    \n    const matchesSearch = !searchTerm || \n      file.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      file.alt?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      file.tags?.some(tag => tag.toLowerCase().includes(searchTerm.toLowerCase()));\n\n    return matchesFolder && matchesSearch;\n  });\n\n  const formatFileSize = (bytes: number) => {\n    const sizes = ['B', 'KB', 'MB', 'GB'];\n    if (bytes === 0) return '0 B';\n    const i = Math.floor(Math.log(bytes) / Math.log(1024));\n    return Math.round(bytes / Math.pow(1024, i) * 100) / 100 + ' ' + sizes[i];\n  };\n\n  const getFileIcon = (file: MediaFile) => {\n    if (file.type.startsWith('image/')) {\n      return <FileImage className=\"h-5 w-5 text-blue-400\" />;\n    }\n    return <FileImage className=\"h-5 w-5 text-gray-400\" />;\n  };\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen bg-[#0a0a0a] text-white\">\n        <Navigation />\n        <div className=\"container mx-auto px-4 py-16 mt-16\">\n          <div className=\"text-center\">\n            <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-[#FFD700] mx-auto\"></div>\n            <p className=\"mt-4 text-gray-400\">A carregar gestor de mídia...</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-[#0a0a0a] text-white\">\n      <Navigation />\n      \n      {/* Header */}\n      <div className=\"bg-[#111111] border-b border-[#333] mt-16\">\n        <div className=\"container mx-auto px-4 py-6\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <Link href=\"/admin\">\n              <Button variant=\"outline\" size=\"sm\" className=\"gap-2 border-[#FFD700] text-[#FFD700] hover:bg-[#FFD700] hover:text-black\">\n                <ArrowLeft className=\"h-4 w-4\" />\n                Dashboard\n              </Button>\n            </Link>\n\n            <div className=\"flex items-center gap-2\">\n              <Button\n                onClick={syncGlobalImages}\n                disabled={syncing}\n                variant=\"outline\"\n                size=\"sm\"\n                className=\"gap-2 border-green-500 text-green-400\"\n              >\n                <RefreshCw className={`h-4 w-4 ${syncing ? 'animate-spin' : ''}`} />\n                {syncing ? 'Sincronizando...' : 'Sincronizar Imagens'}\n              </Button>\n\n              <input\n                type=\"file\"\n                multiple\n                accept=\"image/*\"\n                onChange={(e) => e.target.files && uploadFiles(e.target.files)}\n                className=\"hidden\"\n                id=\"file-upload\"\n              />\n              <Button\n                asChild\n                size=\"sm\"\n                className=\"gap-2 bg-blue-600 hover:bg-blue-700\"\n                disabled={uploading}\n              >\n                <label htmlFor=\"file-upload\" className=\"cursor-pointer\">\n                  <Upload className=\"h-4 w-4\" />\n                  {uploading ? 'Enviando...' : 'Upload'}\n                </label>\n              </Button>\n            </div>\n          </div>\n\n          <div className=\"flex items-center gap-3 mb-4\">\n            <Image className=\"h-6 w-6 text-[#FFD700]\" />\n            <h1 className=\"text-2xl font-bold text-white\">\n              Gestor de Mídia Global\n            </h1>\n            <Badge variant=\"secondary\" className=\"bg-[#FFD700] text-black\">\n              {filteredFiles.length} ficheiros\n            </Badge>\n          </div>\n\n          {uploading && (\n            <div className=\"mb-4\">\n              <div className=\"flex items-center gap-2 mb-2\">\n                <Upload className=\"h-4 w-4 text-blue-400\" />\n                <span className=\"text-sm text-gray-300\">A enviar ficheiros...</span>\n              </div>\n              <Progress value={uploadProgress} className=\"h-2\" />\n            </div>\n          )}\n        </div>\n      </div>\n\n      {/* Content */}\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"grid lg:grid-cols-4 gap-6\">\n          {/* Sidebar */}\n          <div className=\"lg:col-span-1\">\n            <Card className=\"bg-[#111111] border-[#333] mb-6\">\n              <CardHeader>\n                <CardTitle className=\"text-[#FFD700] text-lg flex items-center gap-2\">\n                  <FolderOpen className=\"h-5 w-5\" />\n                  Pastas\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-2\">\n                <Button\n                  onClick={() => setSelectedFolder('all')}\n                  variant={selectedFolder === 'all' ? 'default' : 'outline'}\n                  className=\"w-full justify-start gap-2\"\n                >\n                  <Folder className=\"h-4 w-4\" />\n                  Todas ({mediaFiles.length})\n                </Button>\n                \n                {folders.map((folder) => (\n                  <Button\n                    key={folder.path}\n                    onClick={() => setSelectedFolder(folder.path)}\n                    variant={selectedFolder === folder.path ? 'default' : 'outline'}\n                    className=\"w-full justify-start gap-2 border-[#444] text-gray-300 hover:bg-[#222]\"\n                  >\n                    <Folder className=\"h-4 w-4\" />\n                    {folder.name} ({folder.count})\n                  </Button>\n                ))}\n              </CardContent>\n            </Card>\n\n            {/* Sync Info */}\n            <Card className=\"bg-[#111111] border-[#333]\">\n              <CardHeader>\n                <CardTitle className=\"text-[#FFD700] text-lg flex items-center gap-2\">\n                  <Settings className=\"h-5 w-5\" />\n                  Sincronização\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3 text-sm text-gray-300\">\n                  <div className=\"flex items-start gap-2\">\n                    <AlertCircle className=\"h-4 w-4 text-yellow-400 mt-0.5\" />\n                    <div>\n                      <p className=\"font-medium\">Padrão de Pastas:</p>\n                      <p className=\"text-xs text-gray-400\">\n                        public/pages/&lt;rota&gt;/<br />\n                        public/portfolio/&lt;categoria&gt;/<br />\n                        public/media/\n                      </p>\n                    </div>\n                  </div>\n                  \n                  <Separator className=\"bg-[#333]\" />\n                  \n                  <div>\n                    <p className=\"font-medium mb-1\">Última sincronização:</p>\n                    <p className=\"text-xs text-gray-400\">\n                      {new Date().toLocaleString('pt-PT')}\n                    </p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Main Content */}\n          <div className=\"lg:col-span-3\">\n            {/* Controls */}\n            <Card className=\"bg-[#111111] border-[#333] mb-6\">\n              <CardContent className=\"py-4\">\n                <div className=\"flex items-center gap-4\">\n                  <div className=\"flex-1\">\n                    <div className=\"relative\">\n                      <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400\" />\n                      <Input\n                        placeholder=\"Pesquisar por nome, alt text ou tags...\"\n                        value={searchTerm}\n                        onChange={(e) => setSearchTerm(e.target.value)}\n                        className=\"pl-10 bg-[#222] border-[#444] text-white\"\n                      />\n                    </div>\n                  </div>\n\n                  <div className=\"flex items-center gap-2\">\n                    <Button\n                      onClick={() => setViewMode(viewMode === 'grid' ? 'list' : 'grid')}\n                      variant=\"outline\"\n                      size=\"sm\"\n                      className=\"border-[#444]\"\n                    >\n                      {viewMode === 'grid' ? 'Lista' : 'Grid'}\n                    </Button>\n\n                    {selectedFiles.length > 0 && (\n                      <Button\n                        onClick={() => deleteFiles(selectedFiles)}\n                        variant=\"outline\"\n                        size=\"sm\"\n                        className=\"border-red-500 text-red-400 hover:bg-red-500 hover:text-white\"\n                      >\n                        <Trash2 className=\"h-4 w-4 mr-1\" />\n                        Eliminar ({selectedFiles.length})\n                      </Button>\n                    )}\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Files Grid/List */}\n            {filteredFiles.length === 0 ? (\n              <Card className=\"bg-[#111111] border-[#333]\">\n                <CardContent className=\"py-12 text-center\">\n                  <Image className=\"h-16 w-16 text-gray-400 mx-auto mb-4\" />\n                  <p className=\"text-gray-400 text-lg mb-2\">Nenhum ficheiro encontrado</p>\n                  <p className=\"text-gray-500 text-sm\">\n                    {searchTerm ? 'Ajuste a pesquisa ou' : 'Sincronize imagens ou'} faça upload de novos ficheiros\n                  </p>\n                </CardContent>\n              </Card>\n            ) : viewMode === 'grid' ? (\n              <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4\">\n                {filteredFiles.map((file) => (\n                  <Card key={file.key} className=\"bg-[#111111] border-[#333] hover:border-[#FFD700] transition-colors\">\n                    <div className=\"aspect-square relative overflow-hidden rounded-t-lg\">\n                      {file.type.startsWith('image/') ? (\n                        <img \n                          src={file.url} \n                          alt={file.alt || file.name}\n                          className=\"w-full h-full object-cover\"\n                          loading=\"lazy\"\n                        />\n                      ) : (\n                        <div className=\"w-full h-full bg-[#222] flex items-center justify-center\">\n                          {getFileIcon(file)}\n                        </div>\n                      )}\n                      \n                      <div className=\"absolute top-2 right-2 flex gap-1\">\n                        <Button\n                          size=\"sm\"\n                          variant=\"secondary\"\n                          className=\"h-6 w-6 p-0 bg-black/50 hover:bg-black/70\"\n                          onClick={() => copyToClipboard(file.url)}\n                        >\n                          <Copy className=\"h-3 w-3\" />\n                        </Button>\n                        <Button\n                          size=\"sm\"\n                          variant=\"destructive\"\n                          className=\"h-6 w-6 p-0\"\n                          onClick={() => deleteFiles([file.key])}\n                        >\n                          <Trash2 className=\"h-3 w-3\" />\n                        </Button>\n                      </div>\n\n                      <div className=\"absolute top-2 left-2\">\n                        <input\n                          type=\"checkbox\"\n                          checked={selectedFiles.includes(file.key)}\n                          onChange={(e) => {\n                            if (e.target.checked) {\n                              setSelectedFiles(prev => [...prev, file.key]);\n                            } else {\n                              setSelectedFiles(prev => prev.filter(k => k !== file.key));\n                            }\n                          }}\n                          className=\"w-4 h-4 rounded border-gray-300\"\n                        />\n                      </div>\n                    </div>\n                    \n                    <CardContent className=\"p-3\">\n                      <h3 className=\"text-white font-medium text-sm mb-1 truncate\" title={file.name}>\n                        {file.name}\n                      </h3>\n                      <div className=\"flex items-center gap-2 mb-2\">\n                        <Badge variant=\"outline\" className=\"text-xs border-[#FFD700] text-[#FFD700]\">\n                          {file.category || 'media'}\n                        </Badge>\n                        <span className=\"text-xs text-gray-400\">\n                          {formatFileSize(file.size)}\n                        </span>\n                      </div>\n                      {file.dimensions && (\n                        <p className=\"text-xs text-gray-400\">\n                          {file.dimensions.width} × {file.dimensions.height}\n                        </p>\n                      )}\n                      {file.pageRoute && (\n                        <p className=\"text-xs text-blue-400 truncate\">\n                          → {file.pageRoute}\n                        </p>\n                      )}\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            ) : (\n              <Card className=\"bg-[#111111] border-[#333]\">\n                <CardContent className=\"p-0\">\n                  <div className=\"divide-y divide-[#333]\">\n                    {filteredFiles.map((file) => (\n                      <div key={file.key} className=\"p-4 hover:bg-[#1a1a1a] transition-colors\">\n                        <div className=\"flex items-center gap-4\">\n                          <input\n                            type=\"checkbox\"\n                            checked={selectedFiles.includes(file.key)}\n                            onChange={(e) => {\n                              if (e.target.checked) {\n                                setSelectedFiles(prev => [...prev, file.key]);\n                              } else {\n                                setSelectedFiles(prev => prev.filter(k => k !== file.key));\n                              }\n                            }}\n                            className=\"w-4 h-4 rounded border-gray-300\"\n                          />\n                          \n                          <div className=\"w-12 h-12 rounded overflow-hidden bg-[#222] flex items-center justify-center\">\n                            {file.type.startsWith('image/') ? (\n                              <img \n                                src={file.url} \n                                alt={file.alt || file.name}\n                                className=\"w-full h-full object-cover\"\n                                loading=\"lazy\"\n                              />\n                            ) : (\n                              getFileIcon(file)\n                            )}\n                          </div>\n                          \n                          <div className=\"flex-1 min-w-0\">\n                            <h3 className=\"text-white font-medium truncate\">{file.name}</h3>\n                            <div className=\"flex items-center gap-2 mt-1\">\n                              <Badge variant=\"outline\" className=\"text-xs border-[#FFD700] text-[#FFD700]\">\n                                {file.category || 'media'}\n                              </Badge>\n                              <span className=\"text-xs text-gray-400\">\n                                {formatFileSize(file.size)}\n                              </span>\n                              {file.dimensions && (\n                                <span className=\"text-xs text-gray-400\">\n                                  {file.dimensions.width} × {file.dimensions.height}\n                                </span>\n                              )}\n                            </div>\n                            {file.pageRoute && (\n                              <p className=\"text-xs text-blue-400 mt-1\">\n                                Página: {file.pageRoute}\n                              </p>\n                            )}\n                          </div>\n                          \n                          <div className=\"flex items-center gap-2\">\n                            <Button\n                              size=\"sm\"\n                              variant=\"outline\"\n                              onClick={() => copyToClipboard(file.url)}\n                              className=\"border-[#444] text-gray-300\"\n                            >\n                              <Copy className=\"h-4 w-4\" />\n                            </Button>\n                            <Button\n                              size=\"sm\"\n                              variant=\"outline\"\n                              onClick={() => deleteFiles([file.key])}\n                              className=\"border-red-500 text-red-400 hover:bg-red-500 hover:text-white\"\n                            >\n                              <Trash2 className=\"h-4 w-4\" />\n                            </Button>\n                          </div>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":23358},"client/src/pages/demo-interativo.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport Navigation from \"@/components/navigation\";\nimport { Play, Pause, ShoppingCart, Star, ArrowRight, Facebook, Instagram, Linkedin, ExternalLink, CheckCircle, CreditCard, Truck, Award } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\n\ninterface DemoStep {\n  id: number;\n  title: string;\n  description: string;\n  duration: number;\n  component: JSX.Element;\n}\n\nexport default function DemoInterativo() {\n  const [currentStep, setCurrentStep] = useState(0);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [progress, setProgress] = useState(0);\n  const [selectedProduct, setSelectedProduct] = useState<any>(null);\n  const [cartItems, setCartItems] = useState(0);\n  \n  // Buscar dados reais da API\n  const { data: productsData } = useQuery({ queryKey: ['/api/products/featured'] });\n  const { data: galleryData } = useQuery({ queryKey: ['/api/gallery/images'] });\n  \n  const products = (productsData as any[]) || [];\n  const portfolioImages = ((galleryData as any)?.images || []).slice(0, 6).map((img: string) => `/public-objects/${img}`);\n\n  const demoSteps: DemoStep[] = [\n    {\n      id: 1,\n      title: \"Bem-vindos à DOMREALCE\",\n      description: \"Descobra a nossa empresa de comunicação visual e impressão digital em Portugal\",\n      duration: 3000,\n      component: (\n        <div className=\"text-center space-y-6\">\n          <div className=\"bg-gradient-to-r from-[#e84b5e] to-[#4dabf7] bg-clip-text text-transparent\">\n            <h1 className=\"text-4xl md:text-6xl font-bold mb-4\">DOMREALCE</h1>\n            <p className=\"text-xl md:text-2xl text-white\">Comunicação Visual & Impressão Digital</p>\n          </div>\n          <div className=\"flex justify-center items-center gap-4 text-[#00d4aa]\">\n            <Award className=\"h-8 w-8\" />\n            <span className=\"text-lg\">Mais de 10 anos de experiência</span>\n          </div>\n        </div>\n      )\n    },\n    {\n      id: 2,\n      title: \"Loja Online - Nossos Produtos\",\n      description: \"Explore nossa variedade de produtos de alta qualidade\",\n      duration: 4000,\n      component: (\n        <div className=\"space-y-4\">\n          <h3 className=\"text-2xl font-bold text-white text-center mb-6\">Produtos em Destaque</h3>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n            {products.slice(0, 3).map((product: any) => (\n              <Card key={product.id} className=\"bg-gray-800 border-gray-600 hover:border-[#4dabf7] transition-colors\">\n                <CardContent className=\"p-4\">\n                  <img \n                    src={(product as any).images?.[0] || '/placeholder-product.jpg'}\n                    alt={(product as any).name}\n                    className=\"w-full h-40 object-cover rounded mb-3\"\n                  />\n                  <h4 className=\"text-white font-bold\">{(product as any).name}</h4>\n                  <p className=\"text-gray-300 text-sm mb-3\">{(product as any).description}</p>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-[#00d4aa] font-bold\">€{(product as any).price}</span>\n                    <Badge variant=\"secondary\" className=\"bg-[#e84b5e] text-white\">\n                      <Star className=\"h-3 w-3 mr-1\" />\n                      Destaque\n                    </Badge>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      )\n    },\n    {\n      id: 3,\n      title: \"Nossos Serviços\",\n      description: \"Conheça todos os serviços que oferecemos\",\n      duration: 3500,\n      component: (\n        <div className=\"space-y-4\">\n          <h3 className=\"text-2xl font-bold text-white text-center mb-6\">Serviços Especializados</h3>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            {[\n              {\n                title: \"Design Gráfico\",\n                description: \"Criação de logótipos, cartões de visita, brochuras e material promocional\",\n                color: \"#e84b5e\"\n              },\n              {\n                title: \"Impressão Digital\",\n                description: \"Impressão de alta qualidade para todos os tipos de material\",\n                color: \"#4dabf7\"\n              },\n              {\n                title: \"Papel de Parede\",\n                description: \"Instalação profissional de papel de parede personalizado\",\n                color: \"#00d4aa\"\n              },\n              {\n                title: \"Decoração de Viaturas\",\n                description: \"Personalização completa de veículos comerciais e particulares\",\n                color: \"#ffd43b\"\n              }\n            ].map((service, index) => (\n              <div key={index} className=\"flex items-start gap-4 p-4 bg-gray-800 rounded-lg border border-gray-600\">\n                <div \n                  className=\"w-4 h-4 rounded-full flex-shrink-0 mt-2\"\n                  style={{ backgroundColor: service.color }}\n                />\n                <div>\n                  <h4 className=\"text-white font-bold mb-2\">{service.title}</h4>\n                  <p className=\"text-gray-300 text-sm\">{service.description}</p>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      )\n    },\n    {\n      id: 4,\n      title: \"Portfólio - Nossos Trabalhos\",\n      description: \"Veja alguns dos projetos que realizamos\",\n      duration: 4000,\n      component: (\n        <div className=\"space-y-4\">\n          <h3 className=\"text-2xl font-bold text-white text-center mb-6\">Projetos Realizados</h3>\n          <div className=\"grid grid-cols-2 md:grid-cols-3 gap-4\">\n            {portfolioImages.map((img: string, index: number) => (\n              <div key={index} className=\"relative group\">\n                <img \n                  src={img}\n                  alt={`Projeto ${index + 1}`}\n                  className=\"w-full h-32 object-cover rounded border border-gray-600 group-hover:border-[#4dabf7] transition-colors\"\n                />\n                <div className=\"absolute inset-0 bg-black bg-opacity-50 opacity-0 group-hover:opacity-100 transition-opacity rounded flex items-center justify-center\">\n                  <ExternalLink className=\"h-6 w-6 text-white\" />\n                </div>\n              </div>\n            ))}\n          </div>\n          <div className=\"text-center mt-4\">\n            <Badge className=\"bg-[#00d4aa] text-black\">\n              +100 Projetos Concluídos\n            </Badge>\n          </div>\n        </div>\n      )\n    },\n    {\n      id: 5,\n      title: \"Simulação de Compra\",\n      description: \"Veja como é fácil comprar connosco\",\n      duration: 5000,\n      component: (\n        <div className=\"space-y-6\">\n          <h3 className=\"text-2xl font-bold text-white text-center mb-6\">Processo de Compra Simples</h3>\n          \n          {/* Produto selecionado */}\n          <div className=\"bg-gray-800 rounded-lg p-4 border border-gray-600\">\n            <div className=\"flex items-center gap-4\">\n              <img \n                src={(products[0] as any)?.images?.[0] || '/placeholder-product.jpg'}\n                alt=\"Produto\"\n                className=\"w-20 h-20 object-cover rounded\"\n              />\n              <div className=\"flex-1\">\n                <h4 className=\"text-white font-bold\">{(products[0] as any)?.name || 'Papel de Parede Premium'}</h4>\n                <p className=\"text-gray-300 text-sm\">Quantidade: 1</p>\n                <p className=\"text-[#00d4aa] font-bold\">€{(products[0] as any)?.price || '25.99'}</p>\n              </div>\n              <Button \n                onClick={() => setCartItems(prev => prev + 1)}\n                className=\"bg-[#e84b5e] hover:bg-[#d63951] text-white\"\n              >\n                <ShoppingCart className=\"h-4 w-4 mr-2\" />\n                Adicionar ({cartItems})\n              </Button>\n            </div>\n          </div>\n\n          {/* Opções de pagamento */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <Card className=\"bg-gray-800 border-gray-600\">\n              <CardContent className=\"p-4\">\n                <h4 className=\"text-white font-bold mb-3 flex items-center gap-2\">\n                  <CreditCard className=\"h-5 w-5 text-[#4dabf7]\" />\n                  Pagamentos\n                </h4>\n                <div className=\"space-y-2\">\n                  <div className=\"flex items-center gap-2\">\n                    <CheckCircle className=\"h-4 w-4 text-[#00d4aa]\" />\n                    <span className=\"text-gray-300 text-sm\">MB WAY</span>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <CheckCircle className=\"h-4 w-4 text-[#00d4aa]\" />\n                    <span className=\"text-gray-300 text-sm\">Multibanco</span>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <CheckCircle className=\"h-4 w-4 text-[#00d4aa]\" />\n                    <span className=\"text-gray-300 text-sm\">Payshop</span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-gray-800 border-gray-600\">\n              <CardContent className=\"p-4\">\n                <h4 className=\"text-white font-bold mb-3 flex items-center gap-2\">\n                  <Truck className=\"h-5 w-5 text-[#00d4aa]\" />\n                  Entrega\n                </h4>\n                <div className=\"space-y-2\">\n                  <div className=\"flex items-center gap-2\">\n                    <CheckCircle className=\"h-4 w-4 text-[#00d4aa]\" />\n                    <span className=\"text-gray-300 text-sm\">Envio gratuito {'>'}€50</span>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <CheckCircle className=\"h-4 w-4 text-[#00d4aa]\" />\n                    <span className=\"text-gray-300 text-sm\">Entrega 24-48h</span>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <CheckCircle className=\"h-4 w-4 text-[#00d4aa]\" />\n                    <span className=\"text-gray-300 text-sm\">Instalação incluída</span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      )\n    },\n    {\n      id: 6,\n      title: \"Conecte-se Connosco\",\n      description: \"Siga-nos nas redes sociais e visite nosso site\",\n      duration: 3000,\n      component: (\n        <div className=\"text-center space-y-8\">\n          <h3 className=\"text-2xl font-bold text-white\">Siga-nos nas Redes Sociais</h3>\n          \n          <div className=\"flex justify-center gap-6\">\n            <a \n              href=\"https://facebook.com/domrealce\" \n              target=\"_blank\" \n              rel=\"noopener noreferrer\"\n              className=\"flex flex-col items-center gap-2 p-4 bg-[#1877f2] rounded-lg hover:bg-[#166fe5] transition-colors\"\n            >\n              <Facebook className=\"h-8 w-8 text-white\" />\n              <span className=\"text-white text-sm\">Facebook</span>\n            </a>\n            \n            <a \n              href=\"https://instagram.com/domrealce\" \n              target=\"_blank\" \n              rel=\"noopener noreferrer\"\n              className=\"flex flex-col items-center gap-2 p-4 bg-gradient-to-r from-[#f58529] via-[#dd2a7b] to-[#8134af] rounded-lg hover:opacity-80 transition-opacity\"\n            >\n              <Instagram className=\"h-8 w-8 text-white\" />\n              <span className=\"text-white text-sm\">Instagram</span>\n            </a>\n            \n            <a \n              href=\"https://linkedin.com/company/domrealce\" \n              target=\"_blank\" \n              rel=\"noopener noreferrer\"\n              className=\"flex flex-col items-center gap-2 p-4 bg-[#0077b5] rounded-lg hover:bg-[#005a8b] transition-colors\"\n            >\n              <Linkedin className=\"h-8 w-8 text-white\" />\n              <span className=\"text-white text-sm\">LinkedIn</span>\n            </a>\n          </div>\n\n          <div className=\"space-y-4\">\n            <Link href=\"/loja\">\n              <Button className=\"bg-gradient-to-r from-[#e84b5e] to-[#d63951] hover:from-[#d63951] hover:to-[#c02d42] text-white text-lg px-8 py-3 mr-4\">\n                Visite Nossa Loja\n                <ArrowRight className=\"h-5 w-5 ml-2\" />\n              </Button>\n            </Link>\n            \n            <Link href=\"/contactos\">\n              <Button variant=\"outline\" className=\"border-[#4dabf7] text-[#4dabf7] hover:bg-[#4dabf7] hover:text-white text-lg px-8 py-3\">\n                Entre em Contacto\n                <ArrowRight className=\"h-5 w-5 ml-2\" />\n              </Button>\n            </Link>\n          </div>\n\n          <p className=\"text-gray-400\">\n            Obrigado por conhecer a DOMREALCE! 🎉\n          </p>\n        </div>\n      )\n    }\n  ];\n\n  useEffect(() => {\n    let interval: NodeJS.Timeout;\n    if (isPlaying) {\n      interval = setInterval(() => {\n        setProgress(prev => {\n          const newProgress = prev + (100 / (demoSteps[currentStep].duration / 100));\n          if (newProgress >= 100) {\n            if (currentStep < demoSteps.length - 1) {\n              setCurrentStep(prev => prev + 1);\n              return 0;\n            } else {\n              setIsPlaying(false);\n              return 100;\n            }\n          }\n          return newProgress;\n        });\n      }, 100);\n    }\n    return () => clearInterval(interval);\n  }, [isPlaying, currentStep, demoSteps]);\n\n  const handlePlay = () => {\n    setIsPlaying(!isPlaying);\n  };\n\n  const goToStep = (stepIndex: number) => {\n    setCurrentStep(stepIndex);\n    setProgress(0);\n    setIsPlaying(false);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-[#0a0a0a] text-white\">\n      <Navigation />\n      \n      <div className=\"pt-20 pb-8\">\n        <div className=\"container mx-auto px-4\">\n          {/* Header */}\n          <div className=\"text-center mb-8\">\n            <h1 className=\"text-3xl md:text-4xl font-bold text-white mb-4\">\n              Demonstração Interativa - DOMREALCE\n            </h1>\n            <p className=\"text-gray-400 text-lg\">\n              Descubra todos os nossos produtos e serviços numa apresentação guiada\n            </p>\n          </div>\n\n          {/* Video Controls */}\n          <div className=\"bg-gray-900 rounded-lg p-6 mb-8\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <div className=\"flex items-center gap-4\">\n                <Button \n                  onClick={handlePlay}\n                  className=\"bg-[#e84b5e] hover:bg-[#d63951] text-white\"\n                >\n                  {isPlaying ? <Pause className=\"h-5 w-5\" /> : <Play className=\"h-5 w-5\" />}\n                </Button>\n                <span className=\"text-white font-medium\">\n                  Passo {currentStep + 1} de {demoSteps.length}: {demoSteps[currentStep].title}\n                </span>\n              </div>\n            </div>\n            \n            {/* Progress Bar */}\n            <div className=\"w-full bg-gray-700 rounded-full h-2 mb-4\">\n              <div \n                className=\"bg-gradient-to-r from-[#e84b5e] to-[#4dabf7] h-2 rounded-full transition-all duration-100\"\n                style={{ width: `${(currentStep / (demoSteps.length - 1)) * 100 + (progress / demoSteps.length)}%` }}\n              />\n            </div>\n\n            {/* Step Indicators */}\n            <div className=\"flex justify-between\">\n              {demoSteps.map((step, index) => (\n                <button\n                  key={step.id}\n                  onClick={() => goToStep(index)}\n                  className={`text-xs px-2 py-1 rounded transition-colors ${\n                    index === currentStep \n                      ? 'bg-[#e84b5e] text-white' \n                      : index < currentStep \n                        ? 'bg-[#00d4aa] text-black'\n                        : 'bg-gray-700 text-gray-400 hover:bg-gray-600'\n                  }`}\n                >\n                  {step.id}\n                </button>\n              ))}\n            </div>\n          </div>\n\n          {/* Main Content */}\n          <div className=\"bg-gray-900 rounded-lg p-8 min-h-[500px]\">\n            <div className=\"text-center mb-6\">\n              <h2 className=\"text-2xl font-bold text-white mb-2\">\n                {demoSteps[currentStep].title}\n              </h2>\n              <p className=\"text-gray-400\">\n                {demoSteps[currentStep].description}\n              </p>\n            </div>\n            \n            <div className=\"mt-8\">\n              {demoSteps[currentStep].component}\n            </div>\n          </div>\n\n          {/* Navigation */}\n          <div className=\"flex justify-between mt-8\">\n            <Button \n              onClick={() => goToStep(Math.max(0, currentStep - 1))}\n              disabled={currentStep === 0}\n              variant=\"outline\"\n              className=\"border-gray-600 text-gray-400 hover:bg-gray-800\"\n            >\n              Passo Anterior\n            </Button>\n            \n            <Button \n              onClick={() => goToStep(Math.min(demoSteps.length - 1, currentStep + 1))}\n              disabled={currentStep === demoSteps.length - 1}\n              className=\"bg-[#4dabf7] hover:bg-[#339af0] text-white\"\n            >\n              Próximo Passo\n              <ArrowRight className=\"h-4 w-4 ml-2\" />\n            </Button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":17779},"scripts/backup.js":{"content":"#!/usr/bin/env node\n\nconst fs = require('fs');\nconst path = require('path');\nconst archiver = require('archiver');\n\nasync function createBackup() {\n  const timestamp = new Date().toISOString().replace(/[:.]/g, '-').split('T')[0] + '_' + \n                   new Date().toISOString().replace(/[:.]/g, '-').split('T')[1].split('.')[0];\n  \n  const backupDir = path.join(process.cwd(), 'backups');\n  const backupFile = path.join(backupDir, `backup_${timestamp}.zip`);\n  \n  // Ensure backup directory exists\n  if (!fs.existsSync(backupDir)) {\n    fs.mkdirSync(backupDir, { recursive: true });\n  }\n\n  // Create zip archive\n  const output = fs.createWriteStream(backupFile);\n  const archive = archiver('zip', { zlib: { level: 9 } });\n\n  archive.pipe(output);\n\n  // Add essential files\n  const filesToBackup = [\n    'client/',\n    'server/',\n    'shared/',\n    'package.json',\n    'package-lock.json',\n    'tsconfig.json',\n    'vite.config.ts',\n    'tailwind.config.ts',\n    'drizzle.config.ts',\n    'replit.md'\n  ];\n\n  filesToBackup.forEach(file => {\n    const fullPath = path.join(process.cwd(), file);\n    if (fs.existsSync(fullPath)) {\n      if (fs.statSync(fullPath).isDirectory()) {\n        archive.directory(fullPath, file);\n      } else {\n        archive.file(fullPath, { name: file });\n      }\n    }\n  });\n\n  // Save environment variables info (without actual values)\n  const envInfo = {\n    timestamp,\n    requiredSecrets: [\n      'OBJECT_STORAGE_ENDPOINT',\n      'OBJECT_STORAGE_BUCKET', \n      'OBJECT_STORAGE_ACCESS_KEY',\n      'OBJECT_STORAGE_SECRET_KEY',\n      'OBJECT_STORAGE_PUBLIC_URL_BASE',\n      'IFTHENPAY_MBWAY_KEY',\n      'IFTHENPAY_MB_KEY',\n      'IFTHENPAY_PAYSHOP_KEY',\n      'IFTHENPAY_ANTI_PHISHING_KEY',\n      'VITE_GA_MEASUREMENT_ID'\n    ],\n    availableSecrets: Object.keys(process.env).filter(key => \n      key.includes('OBJECT_STORAGE') || \n      key.includes('IFTHENPAY') || \n      key.includes('ADMIN') ||\n      key.includes('JWT') ||\n      key.includes('GA_MEASUREMENT')\n    )\n  };\n\n  archive.append(JSON.stringify(envInfo, null, 2), { name: 'env-info.json' });\n\n  await archive.finalize();\n\n  return new Promise((resolve, reject) => {\n    output.on('close', () => {\n      console.log(`✅ Backup criado: ${backupFile}`);\n      console.log(`📦 Tamanho: ${(archive.pointer() / 1024 / 1024).toFixed(2)} MB`);\n      resolve(backupFile);\n    });\n\n    archive.on('error', reject);\n  });\n}\n\n// Generate rollback script\nfunction generateRollbackScript(timestamp) {\n  const rollbackScript = `#!/usr/bin/env node\n\nconst fs = require('fs');\nconst path = require('path');\nconst { execSync } = require('child_process');\n\nconsole.log('🔄 Iniciando rollback para ${timestamp}...');\n\n// Check if backup exists\nconst backupFile = path.join(process.cwd(), 'backups', 'backup_${timestamp}.zip');\nif (!fs.existsSync(backupFile)) {\n  console.error('❌ Backup não encontrado:', backupFile);\n  process.exit(1);\n}\n\ntry {\n  // Create temporary restore directory\n  const tempDir = path.join(process.cwd(), 'temp_restore');\n  \n  // Extract backup\n  console.log('📦 Extraindo backup...');\n  execSync(\\`unzip -q \"\\${backupFile}\" -d \"\\${tempDir}\"\\`);\n  \n  // Stop current workflow\n  console.log('⏹️ Parando workflow...');\n  \n  // Backup current state\n  const currentBackup = path.join(process.cwd(), 'backups', \\`before_rollback_\\${Date.now()}.zip\\`);\n  execSync(\\`zip -r \"\\${currentBackup}\" client server shared package.json\\`);\n  \n  // Restore files\n  console.log('🔄 Restaurando ficheiros...');\n  execSync(\\`cp -r \"\\${tempDir}\"/* .\\`);\n  \n  // Reinstall dependencies\n  console.log('📦 Reinstalando dependências...');\n  execSync('npm install');\n  \n  // Clean up\n  execSync(\\`rm -rf \"\\${tempDir}\"\\`);\n  \n  console.log('✅ Rollback concluído!');\n  console.log('⚠️ Verifique as variáveis de ambiente no ficheiro env-info.json');\n  \n} catch (error) {\n  console.error('❌ Erro durante rollback:', error.message);\n  process.exit(1);\n}\n`;\n\n  const scriptPath = path.join(process.cwd(), 'scripts', `rollback_${timestamp}.js`);\n  fs.writeFileSync(scriptPath, rollbackScript);\n  fs.chmodSync(scriptPath, '755');\n  \n  console.log(`📜 Script de rollback criado: ${scriptPath}`);\n}\n\nif (require.main === module) {\n  createBackup()\n    .then(backupFile => {\n      const timestamp = path.basename(backupFile, '.zip').replace('backup_', '');\n      generateRollbackScript(timestamp);\n    })\n    .catch(console.error);\n}\n\nmodule.exports = { createBackup };","size_bytes":4465},"scripts/install-backup-deps.js":{"content":"#!/usr/bin/env node\n\nconst { execSync } = require('child_process');\n\nconsole.log('📦 Instalando dependências para sistema de backup...');\n\ntry {\n  execSync('npm install archiver --save-dev', { stdio: 'inherit' });\n  console.log('✅ Dependência archiver instalada');\n} catch (error) {\n  console.error('❌ Erro ao instalar dependências:', error.message);\n  process.exit(1);\n}","size_bytes":380},"server/visual-editor.ts":{"content":"import type { Request, Response } from \"express\";\nimport { ObjectStorageService } from \"./objectStorage\";\nimport fs from 'fs';\nimport path from 'path';\nimport crypto from 'crypto';\nimport multer from 'multer';\n\ninterface Block {\n  id: string;\n  type: 'hero' | 'text' | 'image' | 'gallery' | 'grid' | 'cta' | 'separator' | 'section';\n  content: any;\n  styles: {\n    backgroundColor?: string;\n    textColor?: string;\n    padding?: string;\n    margin?: string;\n    fontSize?: string;\n    fontWeight?: string;\n    textAlign?: 'left' | 'center' | 'right';\n    width?: string;\n  };\n  position: number;\n}\n\ninterface PageContent {\n  id: string;\n  route: string;\n  title: string;\n  blocks: Block[];\n  metadata: {\n    seoTitle?: string;\n    seoDescription?: string;\n    keywords?: string;\n  };\n  version: number;\n  status: 'draft' | 'published';\n  updatedAt: string;\n}\n\ninterface MediaFile {\n  key: string;\n  name: string;\n  url: string;\n  size: number;\n  type: string;\n  dimensions?: { width: number; height: number };\n  pageRoute?: string;\n  category?: string;\n  alt?: string;\n  tags?: string[];\n  hash: string;\n  uploadedAt: string;\n}\n\nconst objectStorageService = new ObjectStorageService();\n\n// Simulate JSON storage for development (in production, use database)\nconst CONTENT_DIR = './temp-content';\nconst MEDIA_INDEX_FILE = path.join(CONTENT_DIR, 'media-index.json');\n\n// Ensure content directory exists\nif (!fs.existsSync(CONTENT_DIR)) {\n  fs.mkdirSync(CONTENT_DIR, { recursive: true });\n}\n\nfunction getPageContentPath(route: string): string {\n  const sanitizedRoute = route.replace(/[^a-zA-Z0-9-_]/g, '_');\n  return path.join(CONTENT_DIR, `page_${sanitizedRoute}.json`);\n}\n\nfunction loadPageContent(route: string): PageContent | null {\n  try {\n    const filePath = getPageContentPath(route);\n    if (fs.existsSync(filePath)) {\n      const content = fs.readFileSync(filePath, 'utf-8');\n      return JSON.parse(content);\n    }\n  } catch (error) {\n    console.error('Error loading page content:', error);\n  }\n  return null;\n}\n\nfunction savePageContent(pageContent: PageContent): void {\n  try {\n    const filePath = getPageContentPath(pageContent.route);\n    fs.writeFileSync(filePath, JSON.stringify(pageContent, null, 2));\n  } catch (error) {\n    console.error('Error saving page content:', error);\n    throw error;\n  }\n}\n\nfunction loadMediaIndex(): MediaFile[] {\n  try {\n    if (fs.existsSync(MEDIA_INDEX_FILE)) {\n      const content = fs.readFileSync(MEDIA_INDEX_FILE, 'utf-8');\n      return JSON.parse(content);\n    }\n  } catch (error) {\n    console.error('Error loading media index:', error);\n  }\n  return [];\n}\n\nfunction saveMediaIndex(mediaFiles: MediaFile[]): void {\n  try {\n    fs.writeFileSync(MEDIA_INDEX_FILE, JSON.stringify(mediaFiles, null, 2));\n  } catch (error) {\n    console.error('Error saving media index:', error);\n    throw error;\n  }\n}\n\nfunction generateFileHash(key: string): string {\n  return crypto.createHash('md5').update(key).digest('hex');\n}\n\nfunction sanitizeRoute(route: string): string {\n  return route.replace(/[^a-zA-Z0-9-_/]/g, '').toLowerCase();\n}\n\nfunction extractPageRouteFromPath(key: string): string | undefined {\n  // Extract page route from paths like \"public/pages/servicos/impressao.jpg\"\n  const match = key.match(/^public\\/pages\\/([^/]+)/);\n  if (match) {\n    const route = match[1];\n    return route === 'index' ? '/' : `/${route}`;\n  }\n  return undefined;\n}\n\nfunction extractCategoryFromPath(key: string): string | undefined {\n  // Extract category from paths like \"public/portfolio/Autocolantes/img.jpg\"\n  const portfolioMatch = key.match(/^public\\/portfolio\\/([^/]+)/);\n  if (portfolioMatch) {\n    return portfolioMatch[1];\n  }\n  \n  // Extract from pages\n  const pagesMatch = key.match(/^public\\/pages\\/([^/]+)/);\n  if (pagesMatch) {\n    return 'pages';\n  }\n  \n  return 'media';\n}\n\nfunction generateAltFromFilename(filename: string): string {\n  const name = path.basename(filename, path.extname(filename));\n  return name.replace(/[_-]/g, ' ').replace(/\\b\\w/g, l => l.toUpperCase());\n}\n\n// Editor endpoints\nexport async function getPageContent(req: Request, res: Response) {\n  try {\n    const { route } = req.params;\n    let sanitizedRoute = sanitizeRoute(route);\n    \n    // Convert 'index' to '/' for home page\n    if (sanitizedRoute === 'index') {\n      sanitizedRoute = '/';\n    } else if (!sanitizedRoute.startsWith('/')) {\n      sanitizedRoute = '/' + sanitizedRoute;\n    }\n    \n    const pageContent = loadPageContent(sanitizedRoute);\n    \n    if (pageContent) {\n      res.json(pageContent);\n    } else {\n      // Create a new empty page if it doesn't exist\n      const newPage: PageContent = {\n        id: crypto.createHash('md5').update(sanitizedRoute + Date.now()).digest('hex'),\n        route: sanitizedRoute,\n        title: sanitizedRoute === '/' ? 'Página Inicial' : \n               sanitizedRoute === '/sobre' ? 'Sobre Nós' :\n               sanitizedRoute === '/servicos' ? 'Serviços' :\n               sanitizedRoute === '/portfolio' ? 'Portfólio' :\n               sanitizedRoute === '/contactos' ? 'Contactos' :\n               sanitizedRoute === '/loja' ? 'Loja Online' : 'Nova Página',\n        blocks: [\n          {\n            id: crypto.createHash('md5').update('default-hero' + Date.now()).digest('hex'),\n            type: 'hero',\n            content: {\n              title: 'Bem-vindo',\n              subtitle: 'Esta é uma página nova criada no Editor Visual',\n              backgroundImage: '',\n              buttonText: 'Saiba Mais',\n              buttonLink: '#'\n            },\n            styles: {\n              backgroundColor: '#0a0a0a',\n              textColor: '#ffffff',\n              padding: '4rem 1rem',\n              textAlign: 'center'\n            },\n            position: 0\n          }\n        ],\n        metadata: {\n          seoTitle: sanitizedRoute === '/' ? 'DOMREALCE - Comunicação Visual' : 'DOMREALCE',\n          seoDescription: 'Comunicação visual e impressão digital em Portugal',\n          keywords: 'comunicação visual, impressão digital, design gráfico'\n        },\n        version: 1,\n        status: 'draft',\n        updatedAt: new Date().toISOString()\n      };\n      \n      // Save the new page\n      savePageContent(newPage);\n      res.json(newPage);\n    }\n  } catch (error) {\n    console.error('Error getting page content:', error);\n    res.status(500).json({ error: 'Internal server error' });\n  }\n}\n\nexport async function savePageContentEndpoint(req: Request, res: Response) {\n  try {\n    const pageContent: PageContent = req.body;\n    \n    // Validate required fields\n    if (!pageContent.route || !pageContent.title) {\n      return res.status(400).json({ error: 'Missing required fields' });\n    }\n    \n    // Sanitize route\n    pageContent.route = sanitizeRoute(pageContent.route);\n    \n    // Update timestamp\n    pageContent.updatedAt = new Date().toISOString();\n    \n    savePageContent(pageContent);\n    \n    res.json({ success: true, pageContent });\n  } catch (error) {\n    console.error('Error saving page content:', error);\n    res.status(500).json({ error: 'Internal server error' });\n  }\n}\n\n// Media management endpoints\nexport async function getMediaIndex(req: Request, res: Response) {\n  try {\n    const mediaFiles = loadMediaIndex();\n    res.json({ files: mediaFiles });\n  } catch (error) {\n    console.error('Error getting media index:', error);\n    res.status(500).json({ error: 'Internal server error' });\n  }\n}\n\nexport async function getMediaFolders(req: Request, res: Response) {\n  try {\n    const mediaFiles = loadMediaIndex();\n    \n    // Group by category and count\n    const folderMap = new Map<string, { count: number; lastModified: string }>();\n    \n    mediaFiles.forEach(file => {\n      const category = file.category || 'media';\n      const existing = folderMap.get(category) || { count: 0, lastModified: file.uploadedAt };\n      \n      folderMap.set(category, {\n        count: existing.count + 1,\n        lastModified: file.uploadedAt > existing.lastModified ? file.uploadedAt : existing.lastModified\n      });\n    });\n    \n    const folders = Array.from(folderMap.entries()).map(([name, data]) => ({\n      name,\n      path: name,\n      count: data.count,\n      lastModified: data.lastModified\n    }));\n    \n    res.json({ folders });\n  } catch (error) {\n    console.error('Error getting media folders:', error);\n    res.status(500).json({ error: 'Internal server error' });\n  }\n}\n\nexport async function syncGlobalImages(req: Request, res: Response) {\n  try {\n    const existingFiles = loadMediaIndex();\n    const existingHashes = new Set(existingFiles.map(f => f.hash));\n    \n    // Get all images from object storage\n    const allImages = await objectStorageService.listPublicFiles();\n    \n    const newFiles: MediaFile[] = [];\n    const updatedFiles: MediaFile[] = [];\n    const errors: string[] = [];\n    \n    for (const imageKey of allImages) {\n      try {\n        // Skip non-image files\n        if (!imageKey.match(/\\.(jpg|jpeg|png|gif|webp|svg)$/i)) {\n          continue;\n        }\n        \n        const hash = generateFileHash(imageKey);\n        \n        // Skip if already exists\n        if (existingHashes.has(hash)) {\n          continue;\n        }\n        \n        const mediaFile: MediaFile = {\n          key: imageKey,\n          name: path.basename(imageKey),\n          url: `/public-objects/${imageKey}`,\n          size: 0, // Would need to get actual size from storage\n          type: `image/${path.extname(imageKey).slice(1).toLowerCase()}`,\n          pageRoute: extractPageRouteFromPath(imageKey),\n          category: extractCategoryFromPath(imageKey),\n          alt: generateAltFromFilename(imageKey),\n          tags: [],\n          hash,\n          uploadedAt: new Date().toISOString()\n        };\n        \n        newFiles.push(mediaFile);\n      } catch (error) {\n        console.error(`Error processing ${imageKey}:`, error);\n        const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n        errors.push(`Failed to process ${imageKey}: ${errorMessage}`);\n      }\n    }\n    \n    // Save updated index\n    const allFiles = [...existingFiles, ...newFiles];\n    saveMediaIndex(allFiles);\n    \n    res.json({\n      newFiles: newFiles.length,\n      updatedFiles: updatedFiles.length,\n      ignoredFiles: allImages.length - newFiles.length,\n      errors\n    });\n  } catch (error) {\n    console.error('Error syncing global images:', error);\n    res.status(500).json({ error: 'Internal server error' });\n  }\n}\n\nexport async function uploadMediaFiles(req: Request, res: Response) {\n  try {\n    const files = req.files as any[];\n    const folder = req.body.folder || 'media';\n    \n    if (!files || files.length === 0) {\n      return res.status(400).json({ error: 'No files provided' });\n    }\n    \n    const uploadedFiles: MediaFile[] = [];\n    const errors: string[] = [];\n    \n    for (const file of files) {\n      try {\n        // Upload to object storage\n        const key = `${folder}/${Date.now()}_${file.originalname}`;\n        await objectStorageService.uploadPublicFile(key, file.buffer, file.mimetype);\n        \n        const mediaFile: MediaFile = {\n          key,\n          name: file.originalname,\n          url: `/public-objects/${key}`,\n          size: file.size,\n          type: file.mimetype,\n          category: folder,\n          alt: generateAltFromFilename(file.originalname),\n          tags: [],\n          hash: generateFileHash(key),\n          uploadedAt: new Date().toISOString()\n        };\n        \n        uploadedFiles.push(mediaFile);\n      } catch (error) {\n        console.error(`Error uploading ${file.originalname}:`, error);\n        const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n        errors.push(`Failed to upload ${file.originalname}: ${errorMessage}`);\n      }\n    }\n    \n    // Update media index\n    const existingFiles = loadMediaIndex();\n    const allFiles = [...existingFiles, ...uploadedFiles];\n    saveMediaIndex(allFiles);\n    \n    res.json({\n      uploaded: uploadedFiles.length,\n      files: uploadedFiles,\n      errors\n    });\n  } catch (error) {\n    console.error('Error uploading media files:', error);\n    res.status(500).json({ error: 'Internal server error' });\n  }\n}\n\nexport async function deleteMediaFiles(req: Request, res: Response) {\n  try {\n    const { keys }: { keys: string[] } = req.body;\n    \n    if (!keys || keys.length === 0) {\n      return res.status(400).json({ error: 'No file keys provided' });\n    }\n    \n    const errors: string[] = [];\n    let deleted = 0;\n    \n    for (const key of keys) {\n      try {\n        await objectStorageService.deletePublicFile(key);\n        deleted++;\n      } catch (error) {\n        console.error(`Error deleting ${key}:`, error);\n        const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n        errors.push(`Failed to delete ${key}: ${errorMessage}`);\n      }\n    }\n    \n    // Update media index\n    const existingFiles = loadMediaIndex();\n    const remainingFiles = existingFiles.filter(file => !keys.includes(file.key));\n    saveMediaIndex(remainingFiles);\n    \n    res.json({\n      deleted,\n      errors\n    });\n  } catch (error) {\n    console.error('Error deleting media files:', error);\n    res.status(500).json({ error: 'Internal server error' });\n  }\n}","size_bytes":13310},"client/src/pages/loja-quadros-canvas.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ShoppingCart, ArrowLeft, Ruler, Euro } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport Navigation from \"@/components/navigation\";\nimport Footer from \"@/components/footer\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { SEOHead } from \"@/components/seo-head\";\n\ninterface CanvasCover {\n  name: string;\n  path: string;\n  fileName: string;\n  canvasCount?: number;\n}\n\ninterface SizeOption {\n  size: string;\n  width: number;\n  height: number;\n  price: number;\n}\n\n// Preços por tamanho (baseado em Telas Artísticas)\nconst sizeOptions: SizeOption[] = [\n  { size: '20x30', width: 20, height: 30, price: 25.00 },\n  { size: '30x40', width: 30, height: 40, price: 35.00 },\n  { size: '40x50', width: 40, height: 50, price: 45.00 },\n  { size: '50x70', width: 50, height: 70, price: 65.00 },\n  { size: '60x80', width: 60, height: 80, price: 85.00 },\n  { size: '70x100', width: 70, height: 100, price: 125.00 },\n  { size: '80x120', width: 80, height: 120, price: 165.00 },\n  { size: '100x150', width: 100, height: 150, price: 245.00 },\n];\n\nexport default function LojaQuadrosCanvas() {\n  const { toast } = useToast();\n\n  const { data: images, isLoading, error } = useQuery({\n    queryKey: [\"/api/loja/images\"],\n  });\n\n  // Filter and format canvas cover images\n  const canvasCovers: CanvasCover[] = (images as { images: string[] })?.images\n    ?.filter((path: string) => path.includes('Quadros-em-canvas/Capas-quadros-em-canvas'))\n    ?.map((path: string) => {\n      const fileName = path.split('/').pop()?.replace('.webp', '') || '';\n      const displayName = fileName\n        .replace(/-/g, ' ')\n        .replace(/\\b\\w/g, (l: string) => l.toUpperCase());\n      \n      // Count canvas images in this category\n      const categoryImages = (images as { images: string[] })?.images\n        ?.filter((imgPath: string) => \n          imgPath.includes(`Quadros-em-canvas/${fileName}/`) &&\n          /\\.(jpg|jpeg|png|gif|webp)$/i.test(imgPath)\n        ) || [];\n      \n      return {\n        name: displayName,\n        path: `/public-objects/${path}`,\n        fileName: fileName,\n        canvasCount: categoryImages.length\n      };\n    })\n    // Only show categories that have at least 1 canvas\n    ?.filter((canvas: CanvasCover & { canvasCount: number }) => canvas.canvasCount > 0) || [];\n\n  const handleCanvasSelect = (canvas: CanvasCover) => {\n    // Navigate to canvas details page\n    window.location.href = `/loja/quadros-canvas/categoria/${canvas.fileName}`;\n  };\n\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-[#0a0a0a] text-white flex items-center justify-center\">\n        <div className=\"animate-spin w-8 h-8 border-4 border-[#20B2AA] border-t-transparent rounded-full\" />\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"min-h-screen bg-[#0a0a0a] text-white flex items-center justify-center\">\n        <div className=\"text-center\">\n          <h2 className=\"text-2xl font-bold text-red-400 mb-4\">Erro ao carregar imagens</h2>\n          <p className=\"text-gray-400\">Tente novamente mais tarde.</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-[#0a0a0a] text-white\">\n      <SEOHead \n        title=\"Quadros em Canvas - Loja DOMREALCE\"\n        description=\"Quadros personalizados em canvas de alta qualidade. Vários tamanhos disponíveis com preços competitivos. Entrega rápida em Portugal.\"\n        keywords=\"quadros canvas, arte impressa, decoração parede, quadros personalizados, canvas\"\n        canonicalUrl=\"/loja/quadros-canvas\"\n      />\n      \n      <Navigation />\n      \n      {/* Hero Section */}\n      <section className=\"bg-gradient-to-br from-[#20B2AA]/10 via-[#4169E1]/5 to-[#FF6347]/10 py-20 mt-16\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"max-w-4xl mx-auto text-center\">\n            <Link href=\"/loja\" className=\"inline-flex items-center gap-2 text-[#20B2AA] hover:text-white mb-6 transition-colors\">\n              <ArrowLeft className=\"w-4 h-4\" />\n              Voltar à Loja\n            </Link>\n            \n            <h1 className=\"text-4xl md:text-6xl font-bold mb-4\">\n              <span className=\"text-[#20B2AA]\">Quadros</span> em Canvas\n            </h1>\n            <p className=\"text-xl text-muted-foreground mb-6 leading-relaxed\">\n              Arte impressa em canvas de alta qualidade. Vários tamanhos e acabamentos premium.\n            </p>\n            \n            <div className=\"flex flex-wrap justify-center gap-4 mt-8\">\n              <div className=\"flex items-center gap-2 bg-white/10 backdrop-blur-sm px-4 py-2 rounded-full\">\n                <span className=\"text-[#20B2AA]\">✓</span>\n                <span className=\"text-sm\">Canvas Premium</span>\n              </div>\n              <div className=\"flex items-center gap-2 bg-white/10 backdrop-blur-sm px-4 py-2 rounded-full\">\n                <span className=\"text-[#4169E1]\">✓</span>\n                <span className=\"text-sm\">8 Tamanhos</span>\n              </div>\n              <div className=\"flex items-center gap-2 bg-white/10 backdrop-blur-sm px-4 py-2 rounded-full\">\n                <span className=\"text-[#FF6347]\">✓</span>\n                <span className=\"text-sm\">Qualidade Profissional</span>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Categories Grid */}\n      <section className=\"py-4\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"max-w-6xl mx-auto\">\n            <h2 className=\"text-2xl font-bold mb-8 text-center\">\n              Escolha sua <span className=\"text-[#20B2AA]\">Categoria</span>\n            </h2>\n            \n            {canvasCovers.length === 0 ? (\n              <div className=\"text-center py-12\">\n                <div className=\"text-6xl mb-4\">🖼️</div>\n                <h3 className=\"text-xl font-bold text-gray-400 mb-2\">\n                  Nenhuma categoria encontrada\n                </h3>\n                <p className=\"text-gray-500\">\n                  As categorias de quadros estão sendo preparadas.\n                </p>\n              </div>\n            ) : (\n              <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6\">\n                {canvasCovers.map((canvas) => (\n                  <Card \n                    key={canvas.fileName}\n                    className=\"bg-[#111111] border-[#333] hover:border-[#20B2AA] transition-all duration-300 group cursor-pointer\"\n                    onClick={() => handleCanvasSelect(canvas)}\n                  >\n                    <CardContent className=\"p-4\">\n                      <div className=\"aspect-square rounded-lg overflow-hidden mb-4\">\n                        <img \n                          src={canvas.path} \n                          alt={canvas.name}\n                          className=\"w-full h-full object-cover group-hover:scale-105 transition-transform duration-300\"\n                        />\n                      </div>\n                      \n                      <h3 className=\"text-lg font-bold group-hover:text-[#20B2AA] transition-colors text-center mb-2\">\n                        {canvas.name}\n                      </h3>\n                      \n                      <div className=\"text-center\">\n                        <Badge variant=\"secondary\" className=\"text-xs\">\n                          {canvas.canvasCount} {canvas.canvasCount === 1 ? 'opção' : 'opções'}\n                        </Badge>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            )}\n          </div>\n        </div>\n      </section>\n\n      {/* Size Guide Section */}\n      <section className=\"py-16 bg-[#111111]\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"max-w-4xl mx-auto text-center\">\n            <h3 className=\"text-2xl font-bold mb-8\">\n              <Ruler className=\"inline w-6 h-6 mr-2\" />\n              Tamanhos e Preços\n            </h3>\n            \n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n              {sizeOptions.map((option) => (\n                <Card key={option.size} className=\"bg-[#0a0a0a] border-[#333]\">\n                  <CardContent className=\"p-4 text-center\">\n                    <div className=\"text-[#20B2AA] font-bold text-lg mb-1\">\n                      {option.size}cm\n                    </div>\n                    <div className=\"text-gray-400 text-sm mb-2\">\n                      {option.width}×{option.height}\n                    </div>\n                    <div className=\"text-[#FFD700] font-bold\">\n                      <Euro className=\"inline w-4 h-4\" />\n                      {option.price.toFixed(2)}\n                    </div>\n                    <div className=\"text-xs text-gray-500 mt-1\">\n                      + IVA (23%)\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n            \n            <p className=\"text-gray-400 text-sm mt-6\">\n              Preços incluem impressão em canvas premium com chassi em madeira.\n            </p>\n          </div>\n        </div>\n      </section>\n\n\n      <Footer />\n    </div>\n  );\n}","size_bytes":9570},"client/src/pages/loja-canvas-detalhes.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ArrowLeft, ShoppingCart, Package, Sparkles, Eye, ChevronLeft, ChevronRight, Euro, Ruler } from \"lucide-react\";\nimport { Link, useParams, useLocation } from \"wouter\";\nimport Navigation from \"@/components/navigation\";\nimport Footer from \"@/components/footer\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { SEOHead } from \"@/components/seo-head\";\n\ninterface CanvasImage {\n  name: string;\n  path: string;\n}\n\ninterface SizeOption {\n  size: string;\n  width: number;\n  height: number;\n  price: number;\n}\n\n// Preços por tamanho (baseado em Telas Artísticas)\nconst sizeOptions: SizeOption[] = [\n  { size: '20x30', width: 20, height: 30, price: 15.00 },\n  { size: '30x40', width: 30, height: 40, price: 25.00 },\n  { size: '40x50', width: 40, height: 50, price: 35.00 },\n  { size: '50x70', width: 50, height: 70, price: 50.00 },\n  { size: '60x80', width: 60, height: 80, price: 70.00 },\n  { size: '70x100', width: 70, height: 95, price: 90.00 },\n  { size: '80x120', width: 90, height: 120, price: 120.00 },\n  { size: '100x150', width: 95, height: 150, price: 150.00 },\n];\n\nexport default function LojaCanvasDetalhes() {\n  const { categoria } = useParams();\n  const { toast } = useToast();\n  const [, setLocation] = useLocation();\n  \n  const [selectedCanvas, setSelectedCanvas] = useState<string>('');\n  const [selectedSize, setSelectedSize] = useState<string>('');\n  const [showPreview, setShowPreview] = useState(false);\n\n  // Navigation functions for preview modal\n  const getCurrentIndex = () => {\n    return canvasImages.findIndex(canvas => canvas.path === selectedCanvas);\n  };\n\n  const goToPrevious = () => {\n    const currentIndex = getCurrentIndex();\n    const prevIndex = currentIndex > 0 ? currentIndex - 1 : canvasImages.length - 1;\n    setSelectedCanvas(canvasImages[prevIndex].path);\n  };\n\n  const goToNext = () => {\n    const currentIndex = getCurrentIndex();\n    const nextIndex = currentIndex < canvasImages.length - 1 ? currentIndex + 1 : 0;\n    setSelectedCanvas(canvasImages[nextIndex].path);\n  };\n\n  const { data: images, isLoading } = useQuery({\n    queryKey: [\"/api/loja/images\"],\n  });\n\n  // Filter canvas images for the specific category\n  const canvasImages: CanvasImage[] = (images as { images: string[] })?.images\n    ?.filter((path: string) => \n      path.includes(`Quadros-em-canvas/${categoria}/`) &&\n      /\\.(jpg|jpeg|png|gif|webp)$/i.test(path)\n    )\n    ?.map((path: string) => ({\n      name: path.split('/').pop()?.replace(/\\.(jpg|jpeg|png|gif|webp)$/i, '') || '',\n      path: `/public-objects/${path}`\n    }))\n    ?.sort((a, b) => a.name.localeCompare(b.name)) || [];\n\n  const selectedSizeOption = sizeOptions.find(s => s.size === selectedSize);\n\n  const handleAddToCart = () => {\n    if (!selectedCanvas) {\n      toast({\n        title: \"Selecione um quadro\",\n        description: \"Por favor, escolha um quadro antes de adicionar ao carrinho.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (!selectedSize) {\n      toast({\n        title: \"Selecione um tamanho\",\n        description: \"Por favor, escolha um tamanho antes de adicionar ao carrinho.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const sizeOption = sizeOptions.find(s => s.size === selectedSize);\n    if (!sizeOption) return;\n\n    // Calculate area and pricing\n    const area = (sizeOption.width * sizeOption.height) / 10000; // m²\n    const precoBase = sizeOption.price;\n    const iva = precoBase * 0.23;\n    const precoTotal = precoBase + iva;\n\n    const cartItem = {\n      id: Date.now().toString(),\n      type: 'quadros-canvas',\n      canvasName: `${categoria?.toUpperCase()} - ${selectedCanvas.split('/').pop()?.replace(/\\.(jpg|jpeg|png|gif|webp)$/i, '') || ''}`,\n      canvasImage: selectedCanvas,\n      tamanho: selectedSize,\n      larguraCm: sizeOption.width,\n      alturaCm: sizeOption.height,\n      area: area,\n      precoBase: precoBase,\n      precoTotal: precoTotal,\n      quantity: 1,\n    };\n\n    // Get existing cart from localStorage\n    const existingCart = JSON.parse(localStorage.getItem('cart') || '[]');\n    existingCart.push(cartItem);\n    localStorage.setItem('cart', JSON.stringify(existingCart));\n\n    toast({\n      title: \"Produto adicionado!\",\n      description: `Quadro ${selectedSize}cm adicionado ao carrinho - €${precoTotal.toFixed(2)}`,\n    });\n\n    // Redirecionar automaticamente para o carrinho\n    setTimeout(() => {\n      setLocation('/carrinho');\n    }, 1000);\n  };\n\n  const handlePreview = () => {\n    if (!selectedCanvas) {\n      toast({\n        title: \"Selecione um quadro\",\n        description: \"Por favor, escolha um quadro para ver a pré-visualização.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    setShowPreview(true);\n  };\n\n  const categoryName = categoria?.replace(/-/g, ' ').replace(/\\b\\w/g, (l: string) => l.toUpperCase()) || '';\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-[#0a0a0a] py-16\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"text-center\">\n            <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-[#20B2AA] mx-auto\"></div>\n            <p className=\"mt-4 text-gray-300\">A carregar quadros...</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-[#0a0a0a] text-white\">\n      <SEOHead \n        title={`${categoryName} - Quadros em Canvas | DOMREALCE`}\n        description={`Quadros em canvas da categoria ${categoryName}. Várias opções de tamanho e preços competitivos. Qualidade premium.`}\n        keywords={`quadros canvas ${categoryName}, arte impressa, decoração parede`}\n        canonicalUrl={`/loja/quadros-canvas/categoria/${categoria}`}\n      />\n      \n      <Navigation />\n      \n      {/* Header */}\n      <div className=\"bg-[#111111] border-b border-[#333] mt-16\">\n        <div className=\"container mx-auto px-4 py-8\">\n          <Link \n            href=\"/loja/quadros-canvas\" \n            className=\"inline-flex items-center gap-2 text-[#20B2AA] hover:text-white mb-4 transition-colors\"\n          >\n            <ArrowLeft className=\"w-4 h-4\" />\n            Voltar às Categorias\n          </Link>\n          \n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h1 className=\"text-3xl font-bold mb-2\">\n                <span className=\"text-[#20B2AA]\">{categoryName}</span> em Canvas\n              </h1>\n              <p className=\"text-gray-400\">\n                {canvasImages.length} {canvasImages.length === 1 ? 'quadro disponível' : 'quadros disponíveis'}\n              </p>\n            </div>\n            \n            <div className=\"text-right\">\n              <div className=\"flex items-center gap-2 mb-2\">\n                <Package className=\"w-5 h-5 text-[#20B2AA]\" />\n                <span className=\"text-sm text-gray-300\">Canvas Premium</span>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <Sparkles className=\"w-5 h-5 text-[#FFD700]\" />\n                <span className=\"text-sm text-gray-300\">Alta Qualidade</span>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Main Content */}\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"mb-6\">\n          <h2 className=\"text-2xl font-bold mb-6 text-center\">Clique numa imagem para visualizar em tamanho maior</h2>\n          \n          {canvasImages.length === 0 ? (\n            <div className=\"text-center py-12 bg-[#111111] rounded-lg border border-[#333]\">\n              <div className=\"text-6xl mb-4\">🖼️</div>\n              <h3 className=\"text-xl font-bold text-gray-400 mb-2\">\n                Nenhum quadro encontrado\n              </h3>\n              <p className=\"text-gray-500\">\n                Os quadros desta categoria estão sendo preparados.\n              </p>\n            </div>\n          ) : (\n            <div className=\"grid grid-cols-2 md:grid-cols-4 lg:grid-cols-6 gap-4\">\n                  {canvasImages.map((canvas) => (\n                    <div\n                      key={canvas.name}\n                      className={`cursor-pointer group ${\n                        selectedCanvas === canvas.path ? 'ring-2 ring-[#20B2AA]' : ''\n                      }`}\n                      onClick={() => setSelectedCanvas(canvas.path)}\n                    >\n                      <div \n                        className=\"relative rounded-lg overflow-hidden cursor-pointer\"\n                        onClick={(e) => {\n                          e.stopPropagation();\n                          setSelectedCanvas(canvas.path);\n                          setShowPreview(true);\n                        }}\n                      >\n                        <img\n                          src={canvas.path}\n                          alt={canvas.name}\n                          className=\"w-full aspect-square object-cover group-hover:scale-105 transition-transform duration-300\"\n                        />\n                        {/* Hover overlay \"Ver Maior\" */}\n                        <div className=\"absolute inset-0 bg-black/70 opacity-0 group-hover:opacity-100 transition-opacity duration-300 flex items-center justify-center pointer-events-none\">\n                          <div className=\"bg-[#20B2AA] text-white px-3 py-1 rounded text-sm font-semibold\">\n                            Ver Maior\n                          </div>\n                        </div>\n                      </div>\n                      <p className=\"text-center mt-2 text-xs text-gray-300 group-hover:text-[#20B2AA] transition-colors\">\n                        {canvas.name}\n                      </p>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </div>\n        </div>\n\n      {/* Preview Modal with Actions */}\n      {showPreview && selectedCanvas && (\n        <div className=\"fixed inset-0 bg-black/80 z-50 flex items-center justify-center p-4\">\n          <div className=\"bg-[#111111] rounded-lg max-w-5xl max-h-[95vh] overflow-auto border border-[#333]\">\n            <div className=\"p-6\">\n              {/* Header */}\n              <div className=\"flex justify-between items-center mb-6\">\n                <h3 className=\"text-xl font-bold text-[#20B2AA]\">\n                  Pré-visualização do Quadro\n                </h3>\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => setShowPreview(false)}\n                  className=\"border-[#20B2AA] text-[#20B2AA] hover:bg-[#20B2AA] hover:text-white\"\n                >\n                  <ArrowLeft className=\"w-4 h-4 mr-1\" />\n                  Voltar Atrás\n                </Button>\n              </div>\n              \n              <div className=\"grid lg:grid-cols-3 gap-6\">\n                {/* Large Image with Navigation */}\n                <div className=\"lg:col-span-2 relative\">\n                  {/* Previous Arrow */}\n                  {canvasImages.length > 1 && (\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={goToPrevious}\n                      className=\"absolute left-2 top-1/2 -translate-y-1/2 z-10 bg-black/70 border-[#20B2AA] text-[#20B2AA] hover:bg-[#20B2AA] hover:text-white w-10 h-10 p-0\"\n                    >\n                      <ChevronLeft className=\"w-5 h-5\" />\n                    </Button>\n                  )}\n\n                  <img\n                    src={selectedCanvas}\n                    alt=\"Pré-visualização do quadro\"\n                    className=\"w-full rounded-lg border border-[#333]\"\n                  />\n\n                  {/* Next Arrow */}\n                  {canvasImages.length > 1 && (\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={goToNext}\n                      className=\"absolute right-2 top-1/2 -translate-y-1/2 z-10 bg-black/70 border-[#20B2AA] text-[#20B2AA] hover:bg-[#20B2AA] hover:text-white w-10 h-10 p-0\"\n                    >\n                      <ChevronRight className=\"w-5 h-5\" />\n                    </Button>\n                  )}\n\n                  {/* Image Counter */}\n                  {canvasImages.length > 1 && (\n                    <div className=\"absolute bottom-4 left-1/2 -translate-x-1/2 bg-black/70 text-white px-3 py-1 rounded-full text-sm\">\n                      {getCurrentIndex() + 1} de {canvasImages.length}\n                    </div>\n                  )}\n                </div>\n\n                {/* Preview Sidebar */}\n                <div>\n                  <h4 className=\"font-bold mb-4 text-[#FFD700]\">Detalhes do Quadro</h4>\n                  \n                  <div className=\"space-y-3 mb-6\">\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-400\">Categoria:</span>\n                      <span>{categoryName}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-400\">Material:</span>\n                      <span>Canvas Premium</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-400\">Chassi:</span>\n                      <span>Madeira</span>\n                    </div>\n                  </div>\n\n                  {/* Quick Size Selection */}\n                  <div className=\"mb-6\">\n                    <h5 className=\"font-semibold mb-3\">Tamanho:</h5>\n                    <Select value={selectedSize} onValueChange={setSelectedSize}>\n                      <SelectTrigger className=\"bg-[#0a0a0a] border-[#333]\">\n                        <SelectValue placeholder=\"Escolha o tamanho\" />\n                      </SelectTrigger>\n                      <SelectContent className=\"bg-[#0a0a0a] border-[#333]\">\n                        {sizeOptions.map((option) => (\n                          <SelectItem key={option.size} value={option.size}>\n                            {option.size}cm - €{option.price.toFixed(2)}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  {/* Quick Add to Cart */}\n                  <Button\n                    onClick={() => {\n                      setShowPreview(false);\n                      handleAddToCart();\n                    }}\n                    disabled={!selectedSize}\n                    className=\"w-full bg-[#20B2AA] hover:bg-[#4169E1] text-white\"\n                  >\n                    <ShoppingCart className=\"w-4 h-4 mr-2\" />\n                    Adicionar ao Carrinho\n                  </Button>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n\n      <Footer />\n    </div>\n  );\n}","size_bytes":15309},"client/src/pages/carrinho-old.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ArrowLeft, ShoppingCart, Trash2, Sparkles, Plus, Minus } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport Navigation from \"@/components/navigation\";\nimport Footer from \"@/components/footer\";\nimport { useToast } from \"@/hooks/use-toast\";\n\n// Use unified CartItem from schema that supports both types\ninterface CartItem {\n  id: string;\n  type: 'papel-parede' | 'quadros-canvas';\n  // Wallpaper properties\n  textureName?: string;\n  textureImage?: string;\n  category?: string;\n  preco?: number;\n  acabamento?: 'brilho' | 'mate';\n  laminacao?: boolean;\n  tipoCola?: 'com-cola' | 'sem-cola';\n  // Canvas properties  \n  canvasName?: string;\n  canvasImage?: string;\n  tamanho?: string;\n  // Common properties\n  largura?: number;\n  altura?: number;\n  larguraCm?: number;\n  alturaCm?: number;\n  area?: number;\n  precoBase?: number;\n  precoTotal: number;\n  quantity?: number;\n  quantidade?: number;\n}\n\nexport default function Carrinho() {\n  const { toast } = useToast();\n  const [cartItems, setCartItems] = useState<CartItem[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    // Load cart from localStorage\n    const savedCart = localStorage.getItem('cart');\n    if (savedCart) {\n      const items = JSON.parse(savedCart);\n      // Add default values if not exists\n      const itemsWithDefaults = items.map((item: CartItem) => ({\n        ...item,\n        quantidade: item.quantidade || 1,\n        largura: item.largura || 0,\n        altura: item.altura || 0,\n        larguraCm: item.larguraCm || 0,\n        alturaCm: item.alturaCm || 0,\n        area: item.area || Math.max(0.01, (item.largura || 0) * (item.altura || 0)),\n        tipoCola: item.tipoCola || 'com-cola'\n      }));\n      setCartItems(itemsWithDefaults);\n    }\n    setIsLoading(false);\n  }, []);\n\n  const updateCartInStorage = (items: CartItem[]) => {\n    localStorage.setItem('cart', JSON.stringify(items));\n    setCartItems(items);\n  };\n\n  const updateItem = (id: string, updates: Partial<CartItem>) => {\n    const updatedItems = cartItems.map(item => {\n      if (item.id === id) {\n        const updatedItem = { ...item, ...updates };\n        \n        // Calculate area if largura or altura changed\n        if ('largura' in updates || 'altura' in updates || 'larguraCm' in updates || 'alturaCm' in updates) {\n          const largura = updatedItem.largura || 0;\n          const altura = updatedItem.altura || 0;\n          updatedItem.area = Math.max(0.01, largura * altura);\n        }\n        \n        // Recalculate total price based on area\n        const area = updatedItem.area || 0.01;\n        const basePrice = (updatedItem.preco || 0) * area;\n        const laminacaoPrice = updatedItem.laminacao ? 8 * area : 0;\n        updatedItem.precoTotal = basePrice + laminacaoPrice;\n        \n        return updatedItem;\n      }\n      return item;\n    });\n    updateCartInStorage(updatedItems);\n  };\n\n  const updateQuantity = (id: string, quantidade: number) => {\n    if (quantidade < 1) return;\n    updateItem(id, { quantidade });\n  };\n\n  const removeItem = (id: string) => {\n    const updatedItems = cartItems.filter(item => item.id !== id);\n    updateCartInStorage(updatedItems);\n    toast({\n      title: \"Item removido\",\n      description: \"Produto removido do carrinho.\",\n    });\n  };\n\n  const clearCart = () => {\n    setCartItems([]);\n    localStorage.removeItem('cart');\n    toast({\n      title: \"Carrinho limpo\",\n      description: \"Todos os produtos foram removidos do carrinho.\",\n    });\n  };\n\n  const calculateTotal = () => {\n    return cartItems.reduce((total, item) => {\n      return total + (item.precoTotal * (item.quantidade || 1));\n    }, 0);\n  };\n\n  const calculateTotalWithShippingAndIVA = () => {\n    const subtotal = calculateTotal();\n    const shipping = subtotal >= 100 ? 0 : 15;\n    const subtotalWithShipping = subtotal + shipping;\n    const iva = subtotalWithShipping * 0.23; // 23% IVA\n    return {\n      subtotal,\n      shipping,\n      iva,\n      total: subtotalWithShipping + iva\n    };\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-[#0a0a0a] py-16\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"text-center\">\n            <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-[#FFD700] mx-auto\"></div>\n            <p className=\"mt-4 text-brand-yellow\">A carregar carrinho...</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-[#0a0a0a] text-white\">\n      <Navigation />\n      \n      {/* Header */}\n      <div className=\"bg-[#111111] border-b border-[#333] mt-16\">\n        <div className=\"container mx-auto px-4 py-8\">\n          <div className=\"flex items-center gap-4 mb-6\">\n            <Link href=\"/loja\">\n              <Button variant=\"outline\" size=\"sm\" className=\"gap-2 border-[#FFD700] text-[#FFD700] hover:bg-[#FFD700] hover:text-black\">\n                <ArrowLeft className=\"h-4 w-4\" />\n                Continuar a Comprar\n              </Button>\n            </Link>\n          </div>\n          <h1 className=\"text-4xl font-bold text-brand-yellow mb-4\">\n            Carrinho de <span className=\"text-[#FFD700]\">Compras</span>\n          </h1>\n          <p className=\"text-brand-yellow text-lg\">\n            Personalize os seus produtos e finalize a compra\n          </p>\n        </div>\n      </div>\n\n      {/* Content */}\n      <div className=\"container mx-auto px-4 py-8\">\n        {cartItems.length === 0 ? (\n          <div className=\"text-center py-16\">\n            <ShoppingCart className=\"h-16 w-16 text-gray-600 mx-auto mb-4\" />\n            <h2 className=\"text-2xl font-bold text-gray-400 mb-4\">\n              O seu carrinho está vazio\n            </h2>\n            <p className=\"text-gray-500 mb-8\">\n              Adicione algumas texturas fantásticas ao seu carrinho!\n            </p>\n            <Link href=\"/loja/papel-parede\">\n              <Button className=\"bg-gradient-to-r from-[#FFD700] to-[#20B2AA] text-black font-bold\">\n                Ver Texturas\n              </Button>\n            </Link>\n          </div>\n        ) : (\n          <div className=\"grid lg:grid-cols-3 gap-8\">\n            {/* Cart Items */}\n            <div className=\"lg:col-span-2 space-y-6\">\n              <div className=\"flex justify-between items-center\">\n                <h2 className=\"text-2xl font-bold text-[#FFD700]\">\n                  Produtos no Carrinho ({cartItems.length})\n                </h2>\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={clearCart}\n                  className=\"border-red-500 text-red-500 hover:bg-red-500 hover:text-white\"\n                >\n                  <Trash2 className=\"w-4 h-4 mr-1\" />\n                  Limpar Carrinho\n                </Button>\n              </div>\n\n              {cartItems.map((item) => (\n                <Card key={item.id} className=\"bg-[#111111] border-[#333]\">\n                  <CardContent className=\"p-6\">\n                    <div className=\"grid md:grid-cols-4 gap-6\">\n                      {/* Product Image */}\n                      <div className=\"md:col-span-1\">\n                        <img\n                          src={item.type === 'papel-parede' ? item.textureImage : item.canvasImage}\n                          alt={item.type === 'papel-parede' ? item.textureName : item.canvasName}\n                          className=\"w-full aspect-square object-cover rounded-lg border border-[#333]\"\n                        />\n                      </div>\n\n                      {/* Product Info & Customization */}\n                      <div className=\"md:col-span-2 space-y-4\">\n                        <div>\n                          <h3 className=\"text-lg font-bold text-[#FFD700] mb-2\">\n                            {item.type === 'papel-parede' ? item.textureName : item.canvasName}\n                          </h3>\n                          <Badge className=\"bg-[#20B2AA] text-black\">\n                            {item.type === 'papel-parede' ? 'PAPEL DE PAREDE' : 'QUADROS EM CANVAS'}\n                          </Badge>\n                        </div>\n\n                        {/* Customization Options */}\n                        <div className=\"space-y-4\">\n                          {/* Paper wallpaper options */}\n                          {item.type === 'papel-parede' && (\n                            <>\n                              {/* Acabamento */}\n                              <div>\n                                <label className=\"block text-sm font-medium text-brand-yellow mb-2\">\n                                  Acabamento\n                                </label>\n                                <Select \n                                  value={item.acabamento} \n                                  onValueChange={(value: 'brilho' | 'mate') => updateItem(item.id, { acabamento: value })}\n                                >\n                                  <SelectTrigger className=\"bg-[#0a0a0a] border-[#333] text-white\">\n                                    <SelectValue />\n                                  </SelectTrigger>\n                                  <SelectContent className=\"bg-[#111111] border-[#333]\">\n                                    <SelectItem value=\"brilho\" className=\"text-white hover:bg-[#333]\">\n                                      <div className=\"flex items-center gap-2\">\n                                        <Sparkles className=\"h-4 w-4\" />\n                                        Brilho\n                                      </div>\n                                    </SelectItem>\n                                    <SelectItem value=\"mate\" className=\"text-white hover:bg-[#333]\">\n                                      <div className=\"flex items-center gap-2\">\n                                        <div className=\"h-4 w-4 bg-gray-400 rounded-full\"></div>\n                                        Mate\n                                      </div>\n                                    </SelectItem>\n                                  </SelectContent>\n                                </Select>\n                              </div>\n\n                              {/* Tipo de Cola */}\n                              <div>\n                                <label className=\"block text-sm font-medium text-brand-yellow mb-2\">\n                                  Tipo de Aplicação\n                                </label>\n                                <Select \n                                  value={item.tipoCola || 'com-cola'} \n                                  onValueChange={(value: 'com-cola' | 'sem-cola') => updateItem(item.id, { tipoCola: value })}\n                                >\n                                  <SelectTrigger className=\"bg-[#0a0a0a] border-[#333] text-white\">\n                                    <SelectValue />\n                                  </SelectTrigger>\n                                  <SelectContent className=\"bg-[#111111] border-[#333]\">\n                                    <SelectItem value=\"com-cola\" className=\"text-white hover:bg-[#333]\">\n                                      <div className=\"flex items-center gap-2\">\n                                        <div className=\"h-4 w-4 bg-[#20B2AA] rounded-full\"></div>\n                                        Com Cola (Vinil autocolante)\n                                      </div>\n                                    </SelectItem>\n                                    <SelectItem value=\"sem-cola\" className=\"text-white hover:bg-[#333]\">\n                                      <div className=\"flex items-center gap-2\">\n                                        <div className=\"h-4 w-4 bg-[#FFD700] rounded-full\"></div>\n                                        Sem Cola (Cola comprada separadamente)\n                                      </div>\n                                    </SelectItem>\n                                  </SelectContent>\n                                </Select>\n                                <p className=\"text-xs text-gray-400 mt-1\">\n                                  <a href=\"/como-aplicar-papel-parede\" className=\"text-[#FFD700] hover:text-[#20B2AA] underline\">\n                                    Download de manuais de aplicação\n                                  </a>\n                                </p>\n                              </div>\n\n                          {/* Informação sobre medidas mínimas */}\n                          <div className=\"mb-4 p-3 bg-blue-900/20 border border-blue-500/30 rounded-lg\">\n                            <h4 className=\"text-brand-yellow text-sm font-semibold mb-2\">📏 Medidas Mínimas:</h4>\n                            <div className=\"text-xs text-blue-200\">\n                              <p>• Largura mínima: <strong>100cm</strong></p>\n                              <p>• Altura mínima: <strong>100cm</strong></p>\n                            </div>\n                          </div>\n\n                          {/* Medidas */}\n                          <div className=\"grid grid-cols-2 gap-3\">\n                            <div>\n                              <label className=\"block text-sm font-medium text-brand-yellow mb-2\">\n                                Largura (cm) - Min: 100cm\n                              </label>\n                              <input\n                                type=\"text\"\n                                placeholder=\"Min: 100cm\"\n                                value={item.larguraCm || ''}\n                                required\n                                onChange={(e) => {\n                                  const value = e.target.value.replace(',', '.');\n                                  const numericValue = parseFloat(value);\n                                  if (!isNaN(numericValue) && numericValue > 0) {\n                                    const larguraM = numericValue / 100;\n                                    updateItem(item.id, { larguraCm: numericValue, largura: larguraM });\n                                  } else if (value === '') {\n                                    updateItem(item.id, { larguraCm: 0, largura: 0 });\n                                  }\n                                }}\n                                onBlur={(e) => {\n                                  const value = parseFloat(e.target.value.replace(',', '.'));\n                                  if (!isNaN(value) && value < 100 && value > 0) {\n                                    // Força o mínimo se o valor for menor\n                                    updateItem(item.id, { larguraCm: 100, largura: 1 });\n                                    e.target.value = '100';\n                                    toast({\n                                      title: \"Medida ajustada\",\n                                      description: \"Largura mínima é 100cm. Valor ajustado automaticamente.\",\n                                    });\n                                  }\n                                }}\n                                className={`w-full px-3 py-2 bg-[#0a0a0a] border rounded text-white text-sm focus:border-[#FFD700] focus:outline-none ${\n                                  !item.larguraCm || item.larguraCm < 100 ? 'border-red-500' : 'border-[#333]'\n                                }`}\n                              />\n                              {(!item.larguraCm || item.larguraCm < 100) && (\n                                <p className=\"text-red-400 text-xs mt-1\">\n                                  {!item.larguraCm ? 'Campo obrigatório' : 'Mínimo 100cm'}\n                                </p>\n                              )}\n                            </div>\n                            <div>\n                              <label className=\"block text-sm font-medium text-brand-yellow mb-2\">\n                                Altura (cm) - Min: 100cm\n                              </label>\n                              <input\n                                type=\"text\"\n                                placeholder=\"Min: 100cm\"\n                                value={item.alturaCm || ''}\n                                required\n                                onChange={(e) => {\n                                  const value = e.target.value.replace(',', '.');\n                                  const numericValue = parseFloat(value);\n                                  if (!isNaN(numericValue) && numericValue > 0) {\n                                    const alturaM = numericValue / 100;\n                                    updateItem(item.id, { alturaCm: numericValue, altura: alturaM });\n                                  } else if (value === '') {\n                                    updateItem(item.id, { alturaCm: 0, altura: 0 });\n                                  }\n                                }}\n                                onBlur={(e) => {\n                                  const value = parseFloat(e.target.value.replace(',', '.'));\n                                  if (!isNaN(value) && value < 100 && value > 0) {\n                                    // Força o mínimo se o valor for menor\n                                    updateItem(item.id, { alturaCm: 100, altura: 1 });\n                                    e.target.value = '100';\n                                    toast({\n                                      title: \"Medida ajustada\",\n                                      description: \"Altura mínima é 100cm. Valor ajustado automaticamente.\",\n                                    });\n                                  }\n                                }}\n                                className={`w-full px-3 py-2 bg-[#0a0a0a] border rounded text-white text-sm focus:border-[#FFD700] focus:outline-none ${\n                                  !item.alturaCm || item.alturaCm < 100 ? 'border-red-500' : 'border-[#333]'\n                                }`}\n                              />\n                              {(!item.alturaCm || item.alturaCm < 100) && (\n                                <p className=\"text-red-400 text-xs mt-1\">\n                                  {!item.alturaCm ? 'Campo obrigatório' : 'Mínimo 100cm'}\n                                </p>\n                              )}\n                            </div>\n                          </div>\n\n                          {/* Área Calculada */}\n                          <div className=\"p-3 bg-[#0a0a0a] rounded border border-[#333]\">\n                            <div className=\"flex justify-between items-center\">\n                              <span className=\"text-sm text-gray-300\">Área total:</span>\n                              <span className=\"text-lg font-bold text-[#FFD700]\">\n                                {((item.largura || 0) * (item.altura || 0)).toFixed(2)} m²\n                              </span>\n                            </div>\n                          </div>\n\n                          {/* Laminação */}\n                          <div className=\"flex items-center space-x-2\">\n                            <input\n                              type=\"checkbox\"\n                              id={`laminacao-${item.id}`}\n                              checked={item.laminacao}\n                              onChange={(e) => updateItem(item.id, { laminacao: e.target.checked })}\n                              className=\"rounded border-[#333] bg-[#0a0a0a] text-[#FFD700] focus:ring-[#FFD700]\"\n                            />\n                            <label htmlFor={`laminacao-${item.id}`} className=\"text-sm text-gray-300\">\n                              Laminação (+€8/m²) - Proteção contra riscos e raios UV\n                            </label>\n                            <Sparkles className=\"h-4 w-4 text-[#FFD700]\" />\n                          </div>\n\n                            </>\n                          )}\n\n                          {/* Quantity */}\n                          <div>\n                            <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n                              Quantidade\n                            </label>\n                            <div className=\"flex items-center gap-2\">\n                              <Button\n                                variant=\"outline\"\n                                size=\"sm\"\n                                onClick={() => updateQuantity(item.id, (item.quantidade || 1) - 1)}\n                                disabled={(item.quantidade || 1) <= 1}\n                                className=\"border-[#333] text-white hover:bg-[#333]\"\n                              >\n                                <Minus className=\"h-4 w-4\" />\n                              </Button>\n                              <span className=\"w-12 text-center font-semibold\">\n                                {item.quantidade || 1}\n                              </span>\n                              <Button\n                                variant=\"outline\"\n                                size=\"sm\"\n                                onClick={() => updateQuantity(item.id, (item.quantidade || 1) + 1)}\n                                className=\"border-[#333] text-white hover:bg-[#333]\"\n                              >\n                                <Plus className=\"h-4 w-4\" />\n                              </Button>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n\n                      {/* Price & Actions */}\n                      <div className=\"md:col-span-1 text-right space-y-4\">\n                        <div>\n                          <p className=\"text-sm text-brand-yellow\">Preço por m²:</p>\n                          <p className=\"text-md font-semibold text-white\">€{item.preco}/m²</p>\n                          {item.laminacao && (\n                            <p className=\"text-xs text-gray-400\">+ €8/m² laminação</p>\n                          )}\n                          <div className=\"mt-2 pt-2 border-t border-[#333]\">\n                            <p className=\"text-sm text-brand-yellow\">Total área ({((item.largura || 0) * (item.altura || 0)).toFixed(2)} m²):</p>\n                            <p className=\"text-lg font-semibold text-[#FFD700]\">€{item.precoTotal.toFixed(2)}</p>\n                            <p className=\"text-sm text-gray-400\">\n                              Final: €{(item.precoTotal * (item.quantidade || 1)).toFixed(2)}\n                            </p>\n                          </div>\n                        </div>\n                        \n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => removeItem(item.id)}\n                          className=\"border-red-500 text-red-500 hover:bg-red-500 hover:text-white\"\n                        >\n                          <Trash2 className=\"w-4 h-4 mr-1\" />\n                          Remover\n                        </Button>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n\n            {/* Order Summary */}\n            <div className=\"lg:col-span-1\">\n              <Card className=\"bg-[#111111] border-[#333] sticky top-24\">\n                <CardContent className=\"p-6\">\n                  <h3 className=\"text-xl font-bold text-[#FFD700] mb-6\">\n                    Resumo do Pedido\n                  </h3>\n\n                  {/* Order Details */}\n                  <div className=\"space-y-3 mb-6\">\n                    {cartItems.map((item) => (\n                      <div key={item.id} className=\"flex justify-between text-sm\">\n                        <span className=\"text-brand-yellow\">\n                          {(item.textureName || item.canvasName || 'Produto')?.substring(0, 25)}... x{item.quantidade || 1}\n                        </span>\n                        <span className=\"text-white font-semibold\">\n                          €{(item.precoTotal * (item.quantidade || 1)).toFixed(2)}\n                        </span>\n                      </div>\n                    ))}\n                  </div>\n\n                  <hr className=\"border-[#333] my-4\" />\n\n                  {/* Breakdown of costs */}\n                  <div className=\"space-y-2 mb-4\">\n                    {(() => {\n                      const totals = calculateTotalWithShippingAndIVA();\n                      return (\n                        <>\n                          {/* Subtotal */}\n                          <div className=\"flex justify-between text-sm\">\n                            <span className=\"text-gray-300\">Subtotal:</span>\n                            <span className=\"text-white\">€{totals.subtotal.toFixed(2)}</span>\n                          </div>\n                          \n                          {/* Shipping */}\n                          <div className=\"flex justify-between text-sm\">\n                            <span className=\"text-gray-300\">Portes de envio:</span>\n                            <span className=\"text-white\">\n                              {totals.shipping === 0 ? (\n                                <span className=\"text-green-400\">Grátis</span>\n                              ) : (\n                                `€${totals.shipping.toFixed(2)}`\n                              )}\n                            </span>\n                          </div>\n                          \n                          {/* IVA */}\n                          <div className=\"flex justify-between text-sm\">\n                            <span className=\"text-gray-300\">IVA (23%):</span>\n                            <span className=\"text-white\">€{totals.iva.toFixed(2)}</span>\n                          </div>\n                        </>\n                      );\n                    })()}\n                  </div>\n\n                  {/* Free shipping message */}\n                  {calculateTotal() >= 100 && (\n                    <div className=\"bg-green-900/20 border border-green-500/30 rounded-lg p-3 mb-4\">\n                      <p className=\"text-green-400 text-sm text-center\">\n                        🚚 Portes grátis! Compra acima de €100\n                      </p>\n                    </div>\n                  )}\n\n                  {/* Show how much more needed for free shipping */}\n                  {calculateTotal() < 100 && calculateTotal() > 0 && (\n                    <div className=\"bg-blue-900/20 border border-blue-500/30 rounded-lg p-3 mb-4\">\n                      <p className=\"text-blue-300 text-sm text-center\">\n                        💡 Adicione €{(100 - calculateTotal()).toFixed(2)} para portes grátis\n                      </p>\n                    </div>\n                  )}\n\n                  <hr className=\"border-[#333] my-4\" />\n\n                  {/* Total final */}\n                  <div className=\"flex justify-between items-center mb-6\">\n                    <span className=\"text-[#FFD700] font-bold text-lg\">Total Final:</span>\n                    <span className=\"text-[#FFD700] font-bold text-2xl\">\n                      €{calculateTotalWithShippingAndIVA().total.toFixed(2)}\n                    </span>\n                  </div>\n\n                  {/* Checkout Button */}\n                  <Button \n                    onClick={() => {\n                      // Verificar se todos os itens têm medidas\n                      const itemsSemMedidas = cartItems.filter(item => \n                        !item.larguraCm || !item.alturaCm || item.larguraCm === 0 || item.alturaCm === 0\n                      );\n                      \n                      if (itemsSemMedidas.length > 0) {\n                        toast({\n                          title: \"Medidas em falta\",\n                          description: \"Por favor, complete as medidas de todos os produtos antes de finalizar.\",\n                          variant: \"destructive\",\n                        });\n                        return;\n                      }\n                      \n                      // Redirecionar para checkout\n                      window.location.href = '/checkout';\n                    }}\n                    className=\"w-full bg-gradient-to-r from-[#FFD700] to-[#20B2AA] text-black font-bold py-3 hover:opacity-90 mb-4\"\n                    disabled={cartItems.length === 0}\n                    data-testid=\"button-checkout\"\n                  >\n                    Finalizar Compra - €{calculateTotalWithShippingAndIVA().total.toFixed(2)}\n                  </Button>\n\n                  {/* Installation Quote Button */}\n                  <Button \n                    onClick={() => {\n                      const element = document.querySelector('#orcamento-colocacao');\n                      if (element) {\n                        element.scrollIntoView({ behavior: 'smooth', block: 'start' });\n                      }\n                    }}\n                    variant=\"outline\" \n                    className=\"w-full border-[#20B2AA] text-[#20B2AA] hover:bg-[#20B2AA] hover:text-black mb-3\"\n                  >\n                    Solicitar Orçamento de Aplicação\n                  </Button>\n\n                  {/* Continue Shopping */}\n                  <Link href=\"/loja/papel-parede\">\n                    <Button variant=\"outline\" className=\"w-full border-[#FFD700] text-[#FFD700] hover:bg-[#FFD700] hover:text-black\">\n                      Continuar a Comprar\n                    </Button>\n                  </Link>\n\n                  {/* Info */}\n                  <div className=\"mt-6 p-4 bg-[#0a0a0a] rounded-lg border border-[#333]\">\n                    <h4 className=\"text-sm font-semibold text-[#FFD700] mb-2\">Informações:</h4>\n                    <ul className=\"text-xs text-gray-300 space-y-1\">\n                      <li>• Produtos personalizados</li>\n                      <li>• Sem trocas ou devoluções</li>\n                      <li>• Prazo: 5-7 dias úteis</li>\n                      <li>• Aplicação profissional disponível</li>\n                    </ul>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* Installation Request Form */}\n      <div id=\"orcamento-colocacao\" className=\"bg-[#111111] border-t border-[#333]\">\n        <div className=\"container mx-auto px-4 py-12\">\n          <div className=\"max-w-3xl mx-auto\">\n            <h2 className=\"text-3xl font-bold text-[#FFD700] mb-6 text-center\">\n              Solicitar Orçamento para Colocação\n            </h2>\n            <p className=\"text-gray-300 text-center mb-8\">\n              Preencha o formulário abaixo e entraremos em contacto para agendar uma avaliação gratuita e fornecer um orçamento personalizado para a instalação.\n            </p>\n\n            <div className=\"grid md:grid-cols-2 gap-8\">\n              {/* Contact Form */}\n              <div className=\"bg-[#0a0a0a] rounded-lg p-6 border border-[#333]\">\n                <h3 className=\"text-xl font-bold text-[#FFD700] mb-4\">Dados de Contacto</h3>\n                <form className=\"space-y-4\">\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n                      Nome Completo *\n                    </label>\n                    <input\n                      type=\"text\"\n                      required\n                      className=\"w-full px-3 py-2 bg-[#111111] border border-[#333] rounded text-white focus:ring-2 focus:ring-[#FFD700] focus:border-transparent\"\n                      placeholder=\"O seu nome completo\"\n                    />\n                  </div>\n                  \n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n                      Telefone *\n                    </label>\n                    <input\n                      type=\"tel\"\n                      required\n                      className=\"w-full px-3 py-2 bg-[#111111] border border-[#333] rounded text-white focus:ring-2 focus:ring-[#FFD700] focus:border-transparent\"\n                      placeholder=\"O seu número de telefone\"\n                    />\n                  </div>\n                  \n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n                      Email\n                    </label>\n                    <input\n                      type=\"email\"\n                      className=\"w-full px-3 py-2 bg-[#111111] border border-[#333] rounded text-white focus:ring-2 focus:ring-[#FFD700] focus:border-transparent\"\n                      placeholder=\"O seu email\"\n                    />\n                  </div>\n                  \n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n                      Localização *\n                    </label>\n                    <input\n                      type=\"text\"\n                      required\n                      className=\"w-full px-3 py-2 bg-[#111111] border border-[#333] rounded text-white focus:ring-2 focus:ring-[#FFD700] focus:border-transparent\"\n                      placeholder=\"Cidade/Distrito onde será a instalação\"\n                    />\n                  </div>\n                  \n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n                      Área Total (m²)\n                    </label>\n                    <input\n                      type=\"number\"\n                      className=\"w-full px-3 py-2 bg-[#111111] border border-[#333] rounded text-white focus:ring-2 focus:ring-[#FFD700] focus:border-transparent\"\n                      placeholder=\"Ex: 25\"\n                    />\n                  </div>\n                  \n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n                      Observações\n                    </label>\n                    <textarea\n                      rows={3}\n                      className=\"w-full px-3 py-2 bg-[#111111] border border-[#333] rounded text-white focus:ring-2 focus:ring-[#FFD700] focus:border-transparent\"\n                      placeholder=\"Informações adicionais sobre o projeto\"\n                    ></textarea>\n                  </div>\n                  \n                  <Button\n                    type=\"submit\"\n                    className=\"w-full bg-gradient-to-r from-[#FFD700] to-[#20B2AA] text-black font-bold py-3 hover:opacity-90\"\n                  >\n                    Solicitar Orçamento\n                  </Button>\n                </form>\n              </div>\n\n              {/* Contact Info */}\n              <div className=\"space-y-6\">\n                <div className=\"bg-[#0a0a0a] rounded-lg p-6 border border-[#333]\">\n                  <h3 className=\"text-xl font-bold text-[#FFD700] mb-4\">Como Funciona</h3>\n                  <ul className=\"text-gray-300 space-y-3\">\n                    <li className=\"flex items-start gap-3\">\n                      <span className=\"bg-[#FFD700] text-black rounded-full w-6 h-6 flex items-center justify-center text-sm font-bold mt-0.5\">1</span>\n                      <span>Preencha o formulário com os seus dados</span>\n                    </li>\n                    <li className=\"flex items-start gap-3\">\n                      <span className=\"bg-[#FFD700] text-black rounded-full w-6 h-6 flex items-center justify-center text-sm font-bold mt-0.5\">2</span>\n                      <span>Entraremos em contacto em 24h</span>\n                    </li>\n                    <li className=\"flex items-start gap-3\">\n                      <span className=\"bg-[#FFD700] text-black rounded-full w-6 h-6 flex items-center justify-center text-sm font-bold mt-0.5\">3</span>\n                      <span>Agendamos uma avaliação gratuita</span>\n                    </li>\n                    <li className=\"flex items-start gap-3\">\n                      <span className=\"bg-[#FFD700] text-black rounded-full w-6 h-6 flex items-center justify-center text-sm font-bold mt-0.5\">4</span>\n                      <span>Fornecemos orçamento detalhado</span>\n                    </li>\n                  </ul>\n                </div>\n\n                <div className=\"bg-[#0a0a0a] rounded-lg p-6 border border-[#333]\">\n                  <h3 className=\"text-xl font-bold text-[#FFD700] mb-4\">Contacto Direto</h3>\n                  <div className=\"space-y-3 text-gray-300\">\n                    <p><strong>WhatsApp:</strong> <a href=\"https://wa.me/351917570649\" className=\"text-[#FFD700] hover:text-[#20B2AA]\">+351 917 570 649</a></p>\n                    <p><strong>Email:</strong> <a href=\"mailto:geral@domrealce.com\" className=\"text-[#FFD700] hover:text-[#20B2AA]\">geral@domrealce.com</a></p>\n                    <p className=\"text-sm text-gray-400 mt-4\">\n                      💡 Para um orçamento mais rápido, pode contactar-nos diretamente via WhatsApp com as fotos do espaço e medidas.\n                    </p>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <Footer />\n    </div>\n  );\n}","size_bytes":37667},"client/src/components/ui/OndeEstamos.tsx":{"content":"","size_bytes":0},"client/src/components/GoogleMap.tsx":{"content":"import { useEffect, useRef, useState } from 'react';\n\ninterface GoogleMapProps {\n  apiKey: string;\n  center: {\n    lat: number;\n    lng: number;\n  };\n  zoom?: number;\n  className?: string;\n  address?: string;\n  companyName?: string;\n}\n\nexport default function GoogleMap({ \n  apiKey, \n  center, \n  zoom = 15, \n  className = '', \n  address = '',\n  companyName = 'DOMREALCE'\n}: GoogleMapProps) {\n  const mapRef = useRef<HTMLDivElement>(null);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    // Check if Google Maps is already loaded\n    if ((window as any).google && (window as any).google.maps) {\n      initializeMap();\n      return;\n    }\n\n    // Load Google Maps API\n    const script = document.createElement('script');\n    script.src = `https://maps.googleapis.com/maps/api/js?key=${apiKey}&libraries=places`;\n    script.async = true;\n    script.defer = true;\n    \n    script.onload = () => {\n      setIsLoaded(true);\n      initializeMap();\n    };\n    \n    script.onerror = () => {\n      setError('Erro ao carregar o Google Maps');\n    };\n    \n    document.head.appendChild(script);\n\n    return () => {\n      // Cleanup script if component unmounts\n      if (script.parentNode) {\n        script.parentNode.removeChild(script);\n      }\n    };\n  }, [apiKey, center.lat, center.lng, zoom]);\n\n  const initializeMap = () => {\n    if (!mapRef.current || !(window as any).google) return;\n\n    try {\n      const map = new (window as any).google.maps.Map(mapRef.current, {\n        center: center,\n        zoom: zoom,\n        styles: [\n          {\n            \"elementType\": \"geometry\",\n            \"stylers\": [{ \"color\": \"#0a0a0a\" }]\n          },\n          {\n            \"elementType\": \"labels.text.stroke\",\n            \"stylers\": [{ \"color\": \"#0a0a0a\" }]\n          },\n          {\n            \"elementType\": \"labels.text.fill\",\n            \"stylers\": [{ \"color\": \"#616161\" }]\n          },\n          {\n            \"featureType\": \"administrative.locality\",\n            \"elementType\": \"labels.text.fill\",\n            \"stylers\": [{ \"color\": \"#d59563\" }]\n          },\n          {\n            \"featureType\": \"poi\",\n            \"elementType\": \"labels.text.fill\",\n            \"stylers\": [{ \"color\": \"#d59563\" }]\n          },\n          {\n            \"featureType\": \"poi.park\",\n            \"elementType\": \"geometry\",\n            \"stylers\": [{ \"color\": \"#263c3f\" }]\n          },\n          {\n            \"featureType\": \"poi.park\",\n            \"elementType\": \"labels.text.fill\",\n            \"stylers\": [{ \"color\": \"#6b9a76\" }]\n          },\n          {\n            \"featureType\": \"road\",\n            \"elementType\": \"geometry\",\n            \"stylers\": [{ \"color\": \"#38414e\" }]\n          },\n          {\n            \"featureType\": \"road\",\n            \"elementType\": \"geometry.stroke\",\n            \"stylers\": [{ \"color\": \"#212a37\" }]\n          },\n          {\n            \"featureType\": \"road\",\n            \"elementType\": \"labels.text.fill\",\n            \"stylers\": [{ \"color\": \"#9ca5b3\" }]\n          },\n          {\n            \"featureType\": \"road.highway\",\n            \"elementType\": \"geometry\",\n            \"stylers\": [{ \"color\": \"#746855\" }]\n          },\n          {\n            \"featureType\": \"road.highway\",\n            \"elementType\": \"geometry.stroke\",\n            \"stylers\": [{ \"color\": \"#1f2835\" }]\n          },\n          {\n            \"featureType\": \"road.highway\",\n            \"elementType\": \"labels.text.fill\",\n            \"stylers\": [{ \"color\": \"#f3d19c\" }]\n          },\n          {\n            \"featureType\": \"transit\",\n            \"elementType\": \"geometry\",\n            \"stylers\": [{ \"color\": \"#2f3948\" }]\n          },\n          {\n            \"featureType\": \"transit.station\",\n            \"elementType\": \"labels.text.fill\",\n            \"stylers\": [{ \"color\": \"#d59563\" }]\n          },\n          {\n            \"featureType\": \"water\",\n            \"elementType\": \"geometry\",\n            \"stylers\": [{ \"color\": \"#17263c\" }]\n          },\n          {\n            \"featureType\": \"water\",\n            \"elementType\": \"labels.text.fill\",\n            \"stylers\": [{ \"color\": \"#515c6d\" }]\n          },\n          {\n            \"featureType\": \"water\",\n            \"elementType\": \"labels.text.stroke\",\n            \"stylers\": [{ \"color\": \"#17263c\" }]\n          }\n        ],\n        mapTypeControl: false,\n        streetViewControl: true,\n        fullscreenControl: true,\n        zoomControl: true,\n        gestureHandling: 'cooperative'\n      });\n\n      // Add custom marker\n      const marker = new (window as any).google.maps.Marker({\n        position: center,\n        map: map,\n        title: companyName,\n        icon: {\n          path: (window as any).google.maps.SymbolPath.CIRCLE,\n          fillColor: '#FFD700',\n          fillOpacity: 1,\n          strokeColor: '#FF6B35',\n          strokeWeight: 3,\n          scale: 12\n        }\n      });\n\n      // Info window removed - no popup on map\n\n    } catch (err) {\n      setError('Erro ao inicializar o mapa');\n      console.error('Google Maps error:', err);\n    }\n  };\n\n  if (error) {\n    return (\n      <div className={`bg-gray-900 rounded-lg border-2 border-red-500/30 p-8 ${className}`}>\n        <div className=\"text-center text-red-400\">\n          <p className=\"text-lg font-semibold mb-2\">❌ {error}</p>\n          <p className=\"text-sm\">Por favor, tente recarregar a página</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className={`relative ${className}`}>\n      <div \n        ref={mapRef} \n        className=\"w-full h-full\"\n        style={{ minHeight: '400px' }}\n      />\n      {!isLoaded && (\n        <div className=\"absolute inset-0 bg-gray-900 flex items-center justify-center\">\n          <div className=\"text-center text-brand-yellow\">\n            <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-brand-yellow mx-auto mb-4\"></div>\n            <p>A carregar mapa...</p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":5986},"client/src/pages/contactos (copy).tsx":{"content":"import Navigation from \"@/components/navigation\";\nimport Footer from \"@/components/footer\";\nimport GoogleMap from \"@/components/GoogleMap\";\nimport { useState } from \"react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { insertContactSchema, type InsertContact } from \"@shared/schema\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Link } from \"wouter\";\nimport { ObjectUploader } from \"@/components/ObjectUploader\";\nimport { Button } from \"@/components/ui/button\";\nimport { Shield, Upload, FileText, X } from \"lucide-react\";\n\nexport default function Contactos() {\n  const { toast } = useToast();\n\n  // Fetch Google Maps API key\n  const { data: mapsConfig } = useQuery<{ apiKey: string }>({\n    queryKey: ['/api/config/google-maps-key'],\n  });\n\n  const [formData, setFormData] = useState({\n    nome: '',\n    email: '',\n    telefone: '',\n    empresa: '',\n    mensagem: '',\n    ficheiros: [] as string[]\n  });\n\n  const [uploadedFiles, setUploadedFiles] = useState<string[]>([]);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  const mutation = useMutation({\n    mutationFn: async (data: InsertContact) => {\n      return await apiRequest('/api/contact', 'POST', data);\n    },\n    onSuccess: (data: any) => {\n      toast({\n        title: \"Sucesso!\",\n        description: data.message || \"Mensagem enviada com sucesso!\",\n        variant: \"default\",\n      });\n      setFormData({\n        nome: '',\n        email: '',\n        telefone: '',\n        empresa: '',\n        mensagem: '',\n        ficheiros: []\n      });\n      setUploadedFiles([]);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erro\",\n        description: error.message || \"Erro ao enviar mensagem. Tente novamente.\",\n        variant: \"destructive\",\n      });\n    },\n    onSettled: () => {\n      setIsSubmitting(false);\n    }\n  });\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsSubmitting(true);\n\n    try {\n      const dataToSubmit = {\n        ...formData,\n        ficheiros: uploadedFiles\n      };\n\n      const validatedData = insertContactSchema.parse(dataToSubmit);\n      mutation.mutate(validatedData);\n    } catch (error) {\n      setIsSubmitting(false);\n      toast({\n        title: \"Erro de validação\",\n        description: \"Por favor, verifique os dados inseridos.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    const { name, value } = e.target;\n    setFormData(prev => ({\n      ...prev,\n      [name]: value\n    }));\n  };\n\n  const handleFileUpload = async () => {\n    try {\n      const response = await apiRequest('/api/objects/upload', 'POST');\n      return {\n        method: 'PUT' as const,\n        url: (response as any).uploadURL,\n      };\n    } catch (error) {\n      toast({\n        title: \"Erro\",\n        description: \"Erro ao preparar upload. Tente novamente.\",\n        variant: \"destructive\",\n      });\n      throw error;\n    }\n  };\n\n  const handleUploadComplete = (result: any) => {\n    const newFiles = result.successful.map((file: any) => file.uploadURL);\n    setUploadedFiles(prev => [...prev, ...newFiles]);\n    toast({\n      title: \"Ficheiros enviados\",\n      description: `${result.successful.length} ficheiro(s) enviado(s) com sucesso.`,\n      variant: \"default\",\n    });\n  };\n\n  const removeFile = (index: number) => {\n    setUploadedFiles(prev => prev.filter((_, i) => i !== index));\n  };\n\n  return (\n    <div className=\"min-h-screen bg-black\">\n      <Navigation />\n\n      {/* Hero Section */}\n      <section className=\"pt-28 pb-4 bg-black\">\n        <div className=\"container mx-auto px-4 text-center\">\n          <h1 className=\"text-4xl md:text-5xl font-heading font-bold mb-4\">\n            <span className=\"text-brand-yellow\">Contacto</span>\n          </h1>\n          <p className=\"text-lg text-white/90 mb-4 max-w-2xl mx-auto\">\n            Entre em contacto connosco. Estamos aqui para ajudar com o seu projeto de comunicação visual.\n          </p>\n        </div>\n      </section>\n\n      {/* Google Maps Section */}\n      <section className=\"py-6 bg-black/90\">\n        <div className=\"container mx-auto px-4\">\n          <h3 className=\"text-xl font-semibold text-brand-yellow mb-6 text-center\">Onde Estamos</h3>\n\n          {/* Interactive Google Map */}\n          {mapsConfig?.apiKey ? (\n            <GoogleMap\n              apiKey={mapsConfig.apiKey}\n              center={{\n                lat: 41.229460, // Latitude da morada\n                lng: -8.323721, // Longitude da morada\n              }}\n              zoom={17}\n              className=\"w-full h-[500px] mb-6\" // Mapa com largura total e altura ajustada\n              address=\"Rua de Rebolido, 42, 4580-402 Gondalães, Paredes, Portugal\"\n              companyName=\"DOMREALCE\"\n              options={{\n                styles: [\n                  {\n                    \"elementType\": \"geometry\",\n                    \"stylers\": [\n                      {\n                        \"color\": \"#ffffff\" // Cor de fundo clara\n                      }\n                    ]\n                  },\n                  {\n                    \"elementType\": \"labels.icon\",\n                    \"stylers\": [\n                      {\n                        \"visibility\": \"off\"\n                      }\n                    ]\n                  },\n                  {\n                    \"featureType\": \"administrative\",\n                    \"elementType\": \"geometry\",\n                    \"stylers\": [\n                      {\n                        \"color\": \"#b0b0b0\" // Cor mais suave para o texto\n                      }\n                    ]\n                  },\n                  {\n                    \"featureType\": \"road\",\n                    \"elementType\": \"geometry\",\n                    \"stylers\": [\n                      {\n                        \"color\": \"#dcdcdc\" // Cor clara para as estradas\n                      }\n                    ]\n                  },\n                  {\n                    \"featureType\": \"water\",\n                    \"elementType\": \"geometry\",\n                    \"stylers\": [\n                      {\n                        \"color\": \"#b0e0e6\" // Cor clara para áreas de água\n                      }\n                    ]\n                  }\n                ]\n              }}\n            />\n          ) : (\n            <div className=\"w-full h-[500px] mb-6 bg-gray-900 rounded-lg border-2 border-brand-yellow/30 flex items-center justify-center\">\n              <div className=\"text-center text-brand-yellow\">\n                <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-brand-yellow mx-auto mb-4\"></div>\n                <p>A carregar mapa...</p>\n              </div>\n            </div>\n          )}\n\n          {/* Address Info Below Map */}\n          <div className=\"max-w-2xl mx-auto text-center\">\n            <div className=\"bg-gray-900/50 backdrop-blur-sm rounded-2xl p-6 border border-brand-yellow/30\">\n              <div className=\"space-y-4\">\n                <div className=\"text-lg text-white font-semibold\">\n                  📍 DOMREALCE\n                </div>\n                <div className=\"text-white/80\">\n                  Rua de Rebolido, 42<br />\n                  4580-402 Gondalães, Paredes<br />\n                  Portugal\n                </div>\n                <div className=\"grid md:grid-cols-3 gap-4 mt-6\">\n                  <div className=\"text-center p-2\">\n                    <h4 className=\"text-md font-semibold mb-2 text-brand-yellow\">Telefone</h4>\n                    <p className=\"text-white/80 text-sm\">+351 930 682 725</p>\n                  </div>\n                  <div className=\"text-center p-2\">\n                    <h4 className=\"text-md font-semibold mb-2 text-brand-turquoise\">Email</h4>\n                    <p className=\"text-white/80 text-sm\">carloscruz@domrealce.com</p>\n                  </div>\n                  <div className=\"text-center p-2\">\n                    <h4 className=\"text-md font-semibold mb-2 text-brand-coral\">Horário</h4>\n                    <p className=\"text-white/80 text-sm\">Seg-Sex: 9h-18h</p>\n                  </div>\n                </div>\n                <div className=\"pt-4\">\n                  <button\n                    onClick={() => {\n                      navigator.clipboard.writeText('Rua de Rebolido 42, 4580-402 Gondalães, Paredes');\n                      alert('Morada copiada para a área de transferência!');\n                    }}\n                    className=\"inline-flex items-center gap-2 px-4 py-2 bg-brand-yellow/20 border border-brand-yellow text-brand-yellow rounded-lg hover:bg-brand-yellow hover:text-black transition-all duration-300\"\n                  >\n                    📋 Copiar Morada\n                  </button>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      <Footer />\n    </div>\n  );\n}","size_bytes":9027}},"version":1}